extends TD_3D;
// ３Ｄオブジェクト

/*
※(Tonyu1)オブジェクトインスペクタのx,y,zの値が
　そのまま３Ｄの座標に割り当てられるので
　設計中のオブジェクトの移動には注意してください
*/

/* ●３Ｄを表示するためのメソッド集●

// ▲頂点と図形を同時に設定▲
add3D_DX_P(m,x,y,z,p,f,angle,alpha,scaleX,scaleY); //DXスプライト
add3D_L_P(m,x,y,z,x2,y2,z2,c,zt,h); //線
add3D_T_P(m,x,y,z,x2,y2,z2,x3,y3,z3,c,zt,h); //三角形
add3D_S_P(m,x,y,z,x2,y2,z2,x3,y3,z3,x4,y4,z4,c,zt,h); //四角形

m:常に1(今のところ無意味な引数だが将来的に図形のモードを設定できるようになる)
x,y,z:１つ目の頂点の座標を設定する(x:横 y:高さ z:奥行き)
                                  (yは正数で上に、zは正数で奥になる)
x2,y2,z2：２つ目の　〃
x3,y3,z3：３つ目の　〃
x4,y4,z4：４つ目の　〃
c:図形の色
zt:表示の前後設定(zOrder)。このシステムでは図形の前後が上手くいかないことがあるため
   プログラマが調整する必要がある。どのあたりをzOrderの基準とするか決める
   0,null:カメラから遠い頂点を基準とする
   1:図形の中心を基準とする
   2:カメラから近い頂点を基準とする

戻り値:メソッドで生成された図形オブジェクト(TD_DR)



// ▲頂点のみを生成（これだけでは図形は表示されない）▲
add3D_P(x,y,z);

x,y,z:１つ目の頂点の座標を設定する

戻り値:メソッドで生成された点オブジェクト(TD_P)



// ▲図形を設定（頂点を生成した後に、その頂点を引数に入れると図形が表示される）▲
add3D_DX(m,p1,p,f,angle,alpha,scaleX,scaleY);
add3D_L(m,p1,p2,c,zt,h);
add3D_T(m,p1,p2,p3,c,zt,h);
add3D_S(m,p1,p2,p3,p4,c,zt,h);

p1：１つ目の点オブジェクトを設定する
p2：２つ目の　〃
p3：３つ目の　〃
p4：４つ目の　〃

戻り値:メソッドで生成された図形オブジェクト(TD_DR)

*/



// ●図形の作り方●

// 点と図形をまとめて設定（お手軽に図形を作れる）
add3D_DX_P(1, 150,250,250, 3,0,0,255,1); // DXスプライト
add3D_L_P(1, 200,200,200, 200,200,400, color(255,255,255),0,0); // 線
add3D_T_P(1, 100,100,100, 200,200,100, 300,100,100, color(255,255,0),0,0); // 三角形
add3D_S_P(1, 300,200,300, 300,300,300, 400,300,300, 400,200,300, color(0,255,255),0,0); // 四角形

// 点を設定してから図形を設定する（無駄に点を作らないようにもできる）
var p1=add3D_P(0,0,0);
var p2=add3D_P(0,0,500);
var p3=add3D_P(500,0,500);
var p4=add3D_P(500,0,0);
var p5=add3D_P(0,500,0);
var p6=add3D_P(0,500,500);
var p7=add3D_P(500,500,500);
var p8=add3D_P(500,500,0);
add3D_S(1,p1,p2,p3,p4,color(128,128,128),0,0); // 四角形
add3D_S(1,p1,p2,p6,p5,color(64,64,64),0,0);    // 四角形
add3D_S(1,p4,p3,p7,p8,color(64,64,64),0,0);    // 四角形
add3D_S(1,p5,p6,p7,p8,color(128,128,128),0,0); // 四角形

// 図形全体を回転するときの中心となる座標
TD_angleX=250;
TD_angleY=250;
TD_angleZ=250;

while(true){
    // 図形全体を回転できる
    //TD_angleXZ+=1; // XZを回転
    //TD_angleYZ+=1; // YZを回転
    //TD_angleXY+=1; // XYを回転
    update();
}