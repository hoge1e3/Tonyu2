*キャラクタの衝突判定をしましょう

次に，猫(Cat)がリンゴ(Apple)にぶつかると，リンゴを取る（リンゴが消える）ようにしてみましょう．

[[@cfrag watchHit]] という命令を使うと，２つのキャラクタがぶつかったときに，
特定の命令を実行することができます．

[[@plistref addw]]の[[@editadd]]で示した部分を追加してみましょう．
（まだプログラムは実行しないでください）

<<code Game addw
siro=new Cat;
siro.say("いただきまーす");
apple1=new Apple;
apple1.x=200;
apple1.y=150;
apple2=new Apple;
apple2.x=300;
apple2.y=100;
watchHit(Cat, Apple, hitCatApple);[[@editadd]]
>>

[[@cfrag watchHit(Cat, Apple, hitCatApple)]]と書くと，
猫（[[@cfrag Cat]]）とリンゴ（[[@cfrag Apple]]）がぶつかったときに，
[[@cfrag hitCatApple]] という命令が実行されるようになります．

ところで，[[@cfrag hitCatApple]] ってどんな命令でしょうか？
実はこの時点ではそんな命令はありません．この命令は自分で作ってあげる必要があります．
さらに[[@plistref addf]]のように追加してみましょう．

<<code Game addf
siro=new Cat;
siro.say("いただきまーす");
apple1=new Apple;
apple1.x=200;
apple1.y=150;
apple2=new Apple;
apple2.x=300;
apple2.y=100;
watchHit(Cat, Apple, hitCatApple);
function hitCatApple(cat,apple) {[[@editadd]]
    apple.hide();[[@editadd]]
}[[@editadd]]
>>

実行すると，猫とリンゴが触れたときにリンゴが消えるようになります．

最後に書いた[[@cfrag function]] で始まる部分は，
自分で新しい命令を作るための書き方です．
ここでは，[[@cfrag hitCatApple]]という名前の命令を作っています．
その後ろにある[[@cfrag (cat, apple)]] という部分は，この命令を実行するに
あたって，必要な情報を受け取るためのものです．
ここでは，「どのキャラクタと，どのキャラクタがぶつかったか」という情報を受け取り，
それぞれに，[[@cfrag cat]] と [[@cfrag apple]] という名前をつけています．

[[@cfrag cat]] は，もちろん最初に作った猫ですが，
もうひとつの[[@cfrag apple]] は，そのとき猫に触れていたリンゴです．
それは[[@cfrag apple1]] かもしれないし，
[[@cfrag apple2]] かもしれませんが，とにかく猫が触れていたほうのリンゴに，[[@cfrag apple]]という名前がつけられます．

そして，その[[@cfrag apple]] に， [[@cfrag apple.hide()]] という命令を行っています．これは，そのキャラクタ（ここでは[[@cfrag apple]]）を隠す（画面から見えなくする）命令です．




