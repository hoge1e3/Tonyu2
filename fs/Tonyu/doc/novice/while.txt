* 繰り返しを使ってプログラムを短くしましょう

さきほどのプログラムをよく見てみましょう．

<<code Cat 50to100inc
x=50;
go(x,100);sleep();
x+=10;
go(x,100);sleep();
x+=10;
go(x,100);sleep();
x+=10;
go(x,100);sleep();
x+=10;
go(x,100);sleep();
x+=10;
go(x,100);sleep();
>>

最初の[[@cfrag x=50;]]を除いて，あとはずっと

<<code 
go(x,100);sleep();
x+=10;
>>
が繰り返されていることがわかります．

このように，同じことを何度も繰り返すときは，コンピュータに「この部分は繰り返してください」
と指示することによって，プログラムをもっと短くすることができます．

[[@plistref 50to100inc]] を，[[@plistref firstWhile]]のように書き換えてみましょう．

<<code Cat firstWhile
x=50;
while (x<=100) {
  go(x,100);sleep();
  x+=10;
}
>>

実行してみると，先ほど同じように動きます．

ここでは，「while文」という書き方を用いています．これは，次のような形式で使います

<<code while文の書式
while([[@arg 条件]]) {
   [[@arg 動作]]
}
>>

- while文は， {  と } で囲まれた[[@arg 動作]]を繰り返し実行します．
- どのくらいまで繰り返せばよいかを，[[@arg 条件]] に指定します．

[[@plistref firstWhile]]の動作は，次のようになります．

- [[@cfrag x=50;]] 変数xに50を覚えさせる
- [[@cfrag x<=100]]， つまり変数xの値が100以下の間は，次のことを繰り返す
-- [[@cfrag go(x,100);]] (x,100)の場所に絵を表示し，
-- [[@cfrag x+=10;]] xを10増やす

さて，この仕組みを使って，猫の絵を横位置300まで動かしてみましょう．

<<code Cat w300
x=50;
while (x<=300) {
  go(x,100);sleep();
  x+=10;
}
>>

[[@plistref firstWhile]]と変わった部分は，while の後ろの [[@cfrag x<=300]]だけです．
つまり，数値を1個変えるだけで，もっと遠くまで動かせるのです．

以前は，300まで動かすにはたくさんのプログラムを書かなければならなかったのに比べると
かなり楽になりました．