[[前へ>say]]

*メッセージを順番に表示させてみましょう

プログラムは上から順番に実行されます．

今度は「こんにちは」に続けて，「さようなら」と表示させてみたいと思います．
[[@plistref nonsleep]]を入力します．

@@@@nonsleep
go(50,100);
say("こんにちは");
say("さようなら");
@@@@

実行してみましょう.

[[[[@plistref nonsleep]]の実行結果>sayonara.png]]

あれ！いきなり「さようなら」が表示されました．「こんにちは」は表示されなかったのでしょうか？

実は，コンピュータは確かに[[@plistref nonsleep]]のプログラムを上から順番に

- 猫の絵を表示する
- 「こんにちは」と表示する
- 「さようなら」と表示する

と実行したのです．しかし，コンピュータはとても高速に動作しているので
「こんにちは」と表示してから，人間の目に見えないうちに，すぐに「さようなら」
と表示してしまっています．

これでは，「こんにちは」が見えないので，コンピュータに少し待ってもらうように命令を追加しましょう．

@@@@sleep
go(50,100);
say("こんにちは");
sleep(30); // 追加
say("さようなら");
@@@@

実行すると，今度は「こんにちは」が表示されてから「さようなら」が表示されました．

[[@plistref sleep]]で追加した sleep という命令は，その名の通りコンピュータにしばらく寝てもらいます．
つまり，プログラムの実行を少し待ってもらいます．
後ろに書いた30 は，どれくらい待つかを表す数値で，単位は「フレーム」です．
フレームについては後ほど詳しく説明しますが，1フレームは30分の1秒(約0.03秒)に相当します．

sleep(30)は30フレーム，つまり1秒ほど実行を待ちます．つまり，このプログラムは，次の順番で実行されます．

- 猫の絵を表示する
- 「こんにちは」と表示する
- 30フレーム（1秒ほど）待つ
- 「さようなら」と表示する


[[次へ>spriteMove]]