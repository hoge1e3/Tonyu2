extends Actor;
native $;
native Math;
native isNaN;
\new(opt){
    super(opt);
    this.width=width;
    this.height=height;
    if(align==null) align="center";
    if(alpha==null) alpha=255;
    buf=$("<canvas>").attr{width,height};
}
\setPanel(width,height){
    this.width=width;
    this.height=height;
    buf=$("<canvas>").attr{width,height};
}
\setFillStyle(color){
    this.color=color;
}
\fillRect(x,y,rectWidth,rectHeight){
    ctx=buf[0].getContext("2d");
    ctx.save();
    //ctx.clearRect(0,0,this.width,this.height);
    ctx.fillStyle=color;
    ctx.fillRect(x,y,rectWidth,rectHeight);
    ctx.restore();
}
\fillText(text,x,y,size,align){
    ctx=buf[0].getContext("2d");
    ctx.save();
    //ctx.clearRect(0,0,this.width,this.height);
    ctx.textAlign = align;
    ctx.fillStyle=color;
    ctx.font=size+"px 'Courier New'";
    ctx.fillText(text,x,y);
    ctx.restore();
}
\clearRect(clearX,clearY,clearW,clearH){
    ctx=buf[0].getContext("2d");
    ctx.save();
    ctx.clearRect(clearX,clearY,clearW,clearH);
    ctx.restore();
}
\getPixel(getX,getY){
    if(typeof getX=="number" && !isNaN(getX) && 
    typeof getY=="number" && !isNaN(getY)){
        ctx=buf[0].getContext("2d");
        imagedata=ctx.getImageData(getX,getY,1,1);
        colordata=[imagedata.data[0],imagedata.data[1],imagedata.data[2],imagedata.data[3]];
        //print(imagedata.data);
    }else{
        colordata=[0,0,0,0];
    }
    return(colordata);
}
\scroll(scrollX,scrollY){
    ctx=buf[0].getContext("2d");
    ctx.save();
    imagedata=ctx.getImageData(0,0,this.width,this.height);
    clearRect(0,0,width,height);
    ctx.putImageData(imagedata,-scrollX,-scrollY);
    ctx.restore();
}
\draw(ctx){
    pImg=buf[0];
    ctx.save();
    if(align=="left"){
        ctx.translate(x+width/2,y+height/2);
    }else if(align=="center"){
        ctx.translate(x,y);
    }else if(align=="right"){
        ctx.translate(x-width/2,y-height/2);
    }
    if(this.rotation!=0){
        ctx.rotate(this.rotation/180*Math.PI);
    }else{
        ctx.rotate(this.rotate/180*Math.PI);
    }
    ctx.globalAlpha=this.alpha/255;
    ctx.drawImage(
    pImg, 0, 0,width,height,
    -width/2, -height/2, width ,height);
    ctx.restore();
}