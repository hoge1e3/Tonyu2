extends null;
includes MathMod;
native Tonyu;
native Key;
native console;
native Math;
native fukidashi;
native TextRect;
native FS;

\new(x,y,p) {
    if (Tonyu.runMode) {
        var thg=currentThreadGroup();
        if (thg) _th=thg.addObj(this);
    }
    if (typeof x=="object") Tonyu.extend(this,x); 
    else if (typeof x=="number") {
        this.x=x;
        this.y=y;
        this.p=p;
    }
    if (scaleX==null) scaleX=1;
    if (rotation==null) rotation=0;
    if (rotate==null) rotate=0;
    if (alpha==null) alpha=255;
    if (zOrder==null) zOrder=0;
}
nowait \extend(obj) {
    return Tonyu.extend(this,obj);
}

nowait \print(pt) {
    console.log.apply(console,arguments);
    if($consolePanel){
        $consolePanel.scroll(0,20);
        $consolePanel.setFillStyle("white");
        $consolePanel.fillText(pt,0,$consolePrintY,20,"left");
    }
}
\update() {
    ifwait {
        _thread.suspend();
    }
}
\updateEx(updateT){
    for(var updateCount=0;updateCount<updateT;updateCount++){
        update();
    }
}
nowait \getkey(k) {
    return $Keys.getkey(k);
}
nowait \hitTo(t) {
    return crashTo(t);
}
nowait \all(c) {
    var res=new TQuery;
    $Sprites.sprites.forEach \(s) {
        if (s===this || s.excludeFromAll) return;
        if (!c || s instanceof c) {
            res.push(s);
        }
    };
    return res;// new TQuery{objects:res};
}
nowait \allCrash(t) {
    var res=new TQuery;
    var sp=this; //_sprite || this;
    var t1=getCrashRect();
    if (!t1) return res;
    $Sprites.sprites.forEach(\(s) {
        var t2;
        if (s!==this && 
        !s.excludeFromAll &&
        s instanceof t && 
        (t2=s.getCrashRect()) &&
        Math.abs(t1.x-t2.x)*2<t1.width+t2.width &&
        Math.abs(t1.y-t2.y)*2<t1.height+t2.height) {
            res.push(s);    
        }
    });
    return res;
}
nowait \crashTo(t) {
    if (!t) return false;
    if (typeof t=="function") {
        return allCrash(t)[0];
    }
    return crashTo1(t);
}
nowait \crashTo1(t) {
    if (!t || t._isDead) return false;
    /*if (_sprite && t._sprite) {
        return _sprite.crashTo(t._sprite);
    }*/
    var t1=getCrashRect();
    var t2=t.getCrashRect();
    return 
    //    t1.x!=null && t1.y!=null && t1.width && t1.height &&
    //    t2.x!=null && t2.y!=null && t2.width && t2.height &&
    t1 && t2 &&
    Math.abs(t1.x-t2.x)*2<t1.width+t2.width &&
    Math.abs(t1.y-t2.y)*2<t1.height+t2.height;
}
nowait \getCrashRect() {
    var actWidth=width*scaleX, actHeight;
    if(typeof scaleY==="undefined"){
        actHeight=height*scaleX;
    }else{
        actHeight=height*scaleY;
    }
    return typeof x=="number" &&
    typeof y=="number" &&
    typeof width=="number" &&
    typeof height=="number" && 
    {x,y,width:actWidth,height:actHeight};
}
nowait \within(t,distance){
    if(!t || t._isDead) return false;
    if(Math.sqrt(Math.abs(x-t.x)*Math.abs(x-t.x)+ Math.abs(y-t.y)*Math.abs(y-t.y))<distance){
        return true;
    }
    return false;
}
nowait \watchHit(typeA,typeB,onHit) {
    $Sprites.watchHit(typeA , typeB, \(a,b) {
        onHit.apply(this,[a,b]);
    });
}
nowait \currentThreadGroup() {
    return $currentThreadGroup; 
}
nowait \die() {
    if (_th) {
        _th.kill();
    }
    hide();
    play().stop();
    _isDead=true;
}
nowait \hide() {
    /*if (_sprite) {
        $Sprites.remove(_sprite);
        _sprite=null;
    } else {*/
        $Sprites.remove(this);
    //}
}
nowait \show(x,y,p) {
    $Sprites.add(this);
    if (x!=null) this.x=x;
    if (y!=null) this.y=y;
    if (p!=null) this.p=p;
}

nowait \rnd(r) {
    if (typeof r=="number") {
        return Math.floor(Math.random()*r);
    }
    return Math.random();
}
nowait \detectShape() {
    if (typeof p!="number") {
        if (text!=null) return;
        p=0;
    }
    p=Math.floor(p);
    pImg=$Sprites.getImageList()[p];
    if (!pImg) return;
    width=pImg.width;
    height=pImg.height;
}
\waitFor(f) {
    ifwait {
        _thread.waitFor(f);
    }
    update();
}
nowait \isDead() {
    return _isDead;
}
nowait \draw(ctx) {
    if (x==null || y==null) return;
    detectShape();
    if (pImg) {
        ctx.save();
        ctx.translate(x,y);
        //if (typeof rotate=="number" ) rotation=rotate;// 削除予定
        //ctx.rotate(this.rotation/180*Math.PI);
        if(this.rotation!=0){
            ctx.rotate(this.rotation/180*Math.PI);
        }else{
            ctx.rotate(this.rotate/180*Math.PI);
        }
        if(typeof this.scaleY==="undefined") {
            ctx.scale(this.scaleX,this.scaleX);
        }else{
            ctx.scale(this.scaleX,this.scaleY);
        }
        ctx.globalAlpha=this.alpha/255;
        ctx.drawImage(
        pImg.image, pImg.x, pImg.y, pImg.width, pImg.height,
        -width/2, -height/2, width, height);
        ctx.restore();
    } else if (text!==null) {
        if (!size) size=15;
        if (!align) align="center";
        if (!fillStyle) fillStyle="white";
        ctx.fillStyle=fillStyle;
        var rect=TextRect.draw(ctx, text, x, y, size, align , "fill");
        width=rect.w;
        height=rect.h;
    }
    if (_fukidashi) {
        if (_fukidashi.c>0) {
            _fukidashi.c--;
            ctx.fillStyle="white";
            ctx.strokeStyle="black";
            fukidashi ( ctx , _fukidashi.text, 
            x, y-height/2-10, _fukidashi.size);
        }
    }
}
nowait \asyncResult() {
    return Tonyu.asyncResult();
}

\screenOut(a) {
    //オブジェクトが画面外に出たかどうかを判定します。
    if (!a) a=0;
    var r=0;
    var viewX=0,viewY=0;
    if (x<viewX+a)               r+=viewX+a-x;
    if (y<viewY+a)               r+=viewY+a-y;
    if (x>$screenWidth +viewX-a) r+=x-($screenWidth +viewX-a);
    if (y>$screenHeight+viewY-a) r+=y-($screenHeight+viewY-a);
    return r;
}
\file(path) {
    var d=Tonyu.currentProject.getDir();
    var files=d.rel("files/");
    return FS.get(files.rel(path)) {topDir:d};
}

\play() {
    if (!_mml) _mml=new MML;
    if (isDead() || arguments.length==0) return _mml;
    var mmls=[];
    for (var i=0; i<arguments.length; i++) {
        mmls.push(arguments[i]);
    }
    _mml.play(mmls);
    while (_mml.bufferCount()>2) {
        update();
    }
    return _mml;
}
nowait \playSE() {
    var mml=new MML;
    var mmls=[];
    for (var i=0; i<arguments.length; i++) {
        mmls.push(arguments[i]);
    }
    mml.play(mmls);
    return mml;
}