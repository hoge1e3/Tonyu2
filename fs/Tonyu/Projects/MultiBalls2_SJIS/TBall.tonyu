extends SpriteChar;

function collision(pp,recur) {
  // ppと衝突時に、相手から衝撃をうけて速度を変える
  // recurが1ならば、相手にも衝撃を与える
  vx   =vx   +(x-pp.x)/10;
  vy   =vy   +(y-pp.y)/10;
  if (recur) pp.collision(this,0);
}

function onDraw() {
  // 描画時に、lifeを文字で描く
  drawText(x-10,y-10,life,0,15,-5);
}

// update()の度に行う処理
function onUpdate(){
  var i,c,pp,sx,sy;
  // 現在位置を保存
  sx=x;sy=y;
  // 画面端にあたったときの跳ね返り
  if (x<0) vx=abs(vx);
  if (y<0) vy=abs(vy);
  if (x>$screenWidth) vx=-abs(vx);
  if (y>$screenHeight) vy=-abs(vy);
  // 速度分だけ移動
  x+=vx;
  y+=vy;
  // 速度が重力の影響を受ける(TGrav.tonyu参照)
  vx=vx+$grav.vx/10;
  vy=vy+$grav.vy/10;
  
  for (pp in $chars) {
    //他のボールとの衝突を調べる
    if (pp!=this && pp is TBall && crashTo(pp,0,0)) {
      // 他のボールとぶつかっていたら...
      // 移動前の位置にもどる
      x=sx;
      y=sy;
      // 相手から衝撃をうける/相手にも衝撃を与える
      collision(pp,1);
      // 自分と相手のlifeをへらす
      life-=1;
      pp.life-=1;
    }
  }
}

// 初期設定
$grav.vx=0;
$grav.vy=0;
vx=0;
vx=rnd()*4-2;
vy=0;
vy=rnd()*4-2;
life=20;
// lifeが0になるまでループ
while(life>0) {
  update();
}
// 死んだら爆発をだす
i=0;
while(i<20) {
  appear (new Bomb(x+rnd()*40-20,y+rnd()*40-20,$Fuwa+5,0));
  update();
  i=i+1;
}