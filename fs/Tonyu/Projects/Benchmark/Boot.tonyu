extends Actor;
native $;
native TError;
native $LASTPOS;
native Key;
native Date;
native ImageList;
native Tonyu;
native SplashScreen;
native Math;

\initSprites() {
    $Sprites=new Sprites();
    $FrontSprites=new Sprites();
    print ("Loading pats..");
    var rs=$currentProject.getResource();
    var a=asyncResult();
    ImageList.load( rs.images, a.receiver)
    {baseDir:$currentProject.getDir()};
    waitFor(a);
    var r=a[0];
    $Sprites.setImageList(r);
    for (var name,val in r.names) {
        Tonyu.setGlobal(name, val);
    }
    print ("Loading pats done.");
    cvj=$("canvas");
    if (Tonyu.noviceMode) {
        $Screen=new ScaledCanvas{canvas:cvj, width:600, height:300};
    } else {
        $Screen=new ScaledCanvas{canvas:cvj, width:465, height:465};
    }
}


\initThread() {
    $mainThreadGroup=thg=Tonyu.threadGroup();
    var o=Tonyu.currentProject.getOptions();
    var mainClassName=o.run.mainClass;
    print("MainClass= "+mainClassName);
    mainClass=Tonyu.getClass(mainClassName);
    if (!mainClass) {
        TError( mainClassName+" というクラスはありません", 
        "不明" ,0).raise();
    }
    Tonyu.runMode=true;
    $currentThreadGroup=thg;
    new mainClass();
}
\stop() {
    
    for (var k,v in $MMLS) {
        v.stop();
    }
    $WaveTable.stop();
}
initSprites();
$InputDevice=new InputDevice;
$InputDevice.initCanvasEvents(cvj);
initThread();

$pat_fruits=30;
$Keys=new Keys;
$MMLS={};
$Math=Math;
$WaveTable=new WaveTable;
$consolePanel=new Panel{align:"center",x:465/2,y:465/2,width:465,height:465,zOrder:-10,layer:$FrontSprites};
$consolePrintY=465-15;
$panel=new Panel{align:"center",x:$screenWidth/2,y:$screenHeight/2,width:$screenWidth,height:$screenHeight,zOrder:-1,layer:$FrontSprites};
if (typeof SplashScreen!="undefined") SplashScreen.hide();
initFPSParams();
$BM=new BenchMarker;
$BM.start("all");
while (true) {
    $BM.start("tg");
    ti=new Date().getTime();
    thg.steps();
    $Keys.update();
    $InputDevice.update();
    $screenWidth=$Screen.width;
    $screenHeight=$Screen.height;
    $BM.end("tg");
    
    $BM.start("dr");
    doDraw=new Date().getTime()<deadLine;
    if (frameSkipped>=_frameSkip) {
        resetDeadLine();
    }
    if (doDraw) { // フレームスキップの時は描画しない
        $BM.start("dr.fc");
        $Screen.fillCanvas($Screen.buf[0]);
        $BM.end("dr.fc");
        $BM.start("dr.spd");
        $Sprites.draw($Screen.buf[0]);
        $BM.end("dr.spd");
        $BM.start("dr.fsd");
        $FrontSprites.draw($Screen.buf[0]);
        $BM.end("dr.fsd");
        $BM.start("dr.scd");
        $Screen.draw();
        $BM.end("dr.scd");
        //measureFps(); // FPS計測
    } else {
        frameSkipped++;
    }
    $BM.end("dr");
    $BM.start("wt");
    $Sprites.checkHit();
    
    fps_rpsCnt ++;
    //waitFrame(_fps, _frameSkip); // FPS制御
    wt=deadLine-new Date().getTime();
    if (wt<1) wt=1;
    waitFor(Tonyu.timeout());
    deadLine+=1000/_fps;
    $BM.end("wt");
    $BM.end("all");
    if (frameCnt%4==0)$BM.reset();
    $BM.start("all");
}
nowait initFPSParams2() {
    // フレームレートの設定
    _fps = 30;
    _frameSkip = 4;
    // フレームレート制御でつかう変数 //
    frameCnt = 0;
    resetDeadLine();
}
nowait resetDeadLine() {
    deadLine=new Date().getTime()+1000/_fps;
    _frameSkipped = 0;
}


nowait \initFPSParams() {
    // フレームレートの設定
    _fps = 30;
    _frameSkip = 4;
    
    // フレームレート制御でつかう変数 //
    frameCnt = 0;
    wtFrac = 0;
    frameDelay = 0;
    frameSkipCount = 0;
    frameSkipSW = 0;
    doDraw = 1;
    // フレームレート計測でつかう変数 //
    fps_fpsStartTime = 0;
    fps_fpsTimeCnt = 1;
    fps_fpsCnt = -1;
    fps_fps = 0;
    fps_rpsCnt = 0;
    fps_rps = 0;
    fps_oldTime = 0;
    
    $Boot = this; // アクセスできるようにした
}

// Tonyu1の$System.setFrameRate() //
nowait \setFrameRate(fps, frameSkipMax) {
    _fps = fps;
    if (!frameSkipMax) frameSkipMax=5;
    _frameSkip = frameSkipMax - 1; // Tonyu1では最小が1なので-1
    resetDeadLine();
}

// FPS（計測したフレームレート）を返す //
nowait \getMeasureFps() {
    return fps_fps;
}

// RPS（計測した実行レート）を返す //
nowait \getMeasureRps() {
    return fps_rps;
}


// フレームレートの制御 //
\waitFrame(fps, frameSkipMax) {
    var wt, nowWt, waitDo;
    frameCnt++;
    
    
    wt = 1000/fps; // 待機時間設定
    wtFrac += wt - floor(wt);
    if (wtFrac >= 1) {
        wt += floor(wtFrac); // 端数を待機時間に追加
        wtFrac -= floor(wtFrac);
    }
    wt = floor(wt);
    //print(wt+" "+floor(wtFrac));
    
    /*
    if (frameCnt % 3 == 0) wt = 16; // 待機時間設定
    else                   wt = 17; // 待機時間設定
    */
    
    wt -= frameDelay;
    waitFor(Tonyu.timeout(1));
    nowWt = (new Date().getTime()-ti);
    if (frameSkipSW == 0) waitDo = 0;
    while (wt > nowWt) {
        waitFor(Tonyu.timeout(1));
        nowWt = (new Date().getTime()-ti);
        waitDo = 1;
    }
    frameDelay = nowWt - wt; // 処理落ち計算
    // 待機したか？
    if (waitDo == 0) {
        frameSkipCount ++; // スキップ回数にカウント
        doDraw = 0;
    } else {
        doDraw = 1;
    }
    // フレームスキップ最大か //
    frameSkipSW = 0;
    if (frameSkipCount >= frameSkipMax) {
        frameDelay = 0;
        frameSkipCount = 0;
        frameSkipSW = 1;
    }
    
}


// FPS計測 //
nowait \measureFps() {
    var fps_nowTime;
    fps_nowTime = new Date().getTime();
    if (fps_oldTime == 0) fps_oldTime = new Date().getTime();
    fps_fpsCnt ++;
    fps_fpsTimeCnt += fps_nowTime - fps_oldTime;
    if (fps_nowTime - fps_fpsStartTime >= 1000) {
        fps_fps = ((1000 / fps_fpsTimeCnt) * fps_fpsCnt);
        //fps_fpsStr = trunc(fps_fps)+"."+(floor(fps_fps*10)%10);
        fps_fpsCnt = 0;
        fps_fpsTimeCnt = 0;
        fps_fpsStartTime = fps_nowTime;
        fps_rps = fps_rpsCnt;
        fps_rpsCnt = 0;
    }
    fps_oldTime = fps_nowTime;
}

