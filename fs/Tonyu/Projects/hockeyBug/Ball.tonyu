


function kabe(xx,yy) {
    var pa;
    // 壁にぶつかっているかの判定
    xx += $MAP_CHIP_PAT_WIDTH * $MAP_CHIP_COL;
    yy += $MAP_CHIP_PAT_HEIGHT * $MAP_CHIP_ROW;
    pa=$map.getAt(xx % ($MAP_CHIP_PAT_WIDTH * $MAP_CHIP_COL), yy % ($MAP_CHIP_PAT_HEIGHT * $MAP_CHIP_ROW));
    return (pa<$pat_table+9 || pa>$pat_table+14);
}

function onUpdate() {
    if (x<$pass.x-30) $pass.enabled=1;
    // １周したかの判定 。$passは周回を判定するオブジェクト
    if (crashTo($pass)) { vx=4;x=$pass.x+32;$pass.lap();}
}

$mplayer.playBGM("se_bgm");//BGM演奏
$cy=$screenHeight/2;
sx = 110; sy = 110;
vx = 0; vy = 0;
frameCnt = 0;
secnt = 0;
while(1){
    // 速度分だけ移動
    x+=vx;
    y+=vy;
    if (kabe(x,y)) {
        // 壁にぶつかった場合
        $mplayer.playPartSE(secnt%2, "se_bound");
        //$mplayer.playSE("se_bound");
        secnt++;
        // 跳ね返り
        if (!kabe(sx,y)) { x=sx;vx=-vx;}
        else if (!kabe(x,sy)) {y=sy;vy=-vy;}
        else {x=sx;y=sy; vx=-vx;vy=-vy;}
    }
    spd=dist(vx,vy);if (spd<0.01) {vx+=0.01;vy+=0.01;}
    // ゆっくり減速する
    vx=vx*0.99;
    vy=vy*0.99;
    if (spd>30) {
        // 速度30以上にはならないようにする
        vx=vx*30/spd;
        vy=vy*30/spd;
    }
    // 現在の位置を覚える
    sx=x;sy=y;
    
    onUpdate();
    //if (frameCnt % 2 == 1) 
    update();
    frameCnt ++;
}

/*
\draw(ctx) {
    var sx = x, sy = y;
    x -= $viewX;
    y -= $viewY;
    super.draw(ctx);
    x = sx; y = sy;
}
*/
\crashTo(pp,xx,yy) {
    if (!pp)return 0;
    if (!xx) xx = 0;
    if (!yy) yy = 0;
    if ( abs(pp.x-(x+xx))*2 < getWidth()+pp.getWidth() ) {
        return  abs(pp.y-(y+yy))*2 < getHeight()+pp.getHeight() ;
    }
    return 0;
}

\getWidth() {
    return 32;
}

\getHeight() {
    return 32;
}