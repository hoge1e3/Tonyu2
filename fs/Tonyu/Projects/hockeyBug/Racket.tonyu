
// 壁にぶつかっているかの判定
function kabe(xx,yy) {
    var pa;
    xx += $MAP_CHIP_PAT_WIDTH * $MAP_CHIP_COL;
    yy += $MAP_CHIP_PAT_HEIGHT * $MAP_CHIP_ROW;
    pa=$map.getAt(xx % ($MAP_CHIP_PAT_WIDTH * $MAP_CHIP_COL), yy % ($MAP_CHIP_PAT_HEIGHT * $MAP_CHIP_ROW));
    return (pa<$pat_table+9 || pa>$pat_table+14);
}

//crashToを再定義して、ボールとの距離(d)により判定する。ボールが速く動いていると当たり判定が大きくなる
function crashTo(t) {
    d=dist(t.x-x,t.y-y)+1;
    return (d<(dist(x-px,y-py)+dist($ball.vx,$ball.vy))/2+32); 
}
px=x;py=y;
scx = $viewX; scy = $viewY; sew = 0;
frameCnt = 0;
while(1){
    px=x; py=y; // 現在のボールの位置を覚える
    
    //if (frameCnt % 2 == 1) 
    update();
    frameCnt ++;
    
    sew-=1;
    if (!$ball.isDead() && crashTo($ball)) {
        // ボールにぶつかったときの処理
        if (sew<=0) {sew=8; $mplayer.playSE("se_shot");}
        avx=($ball.x-x)/d;
        avy=($ball.y-y)/d;
        spd=1;
        if (d<32) {
            // ボールとの距離が32以下の場合、ラケットとボールがめりこんでいるのを修正する
            $ball.x=x+avx*32;
            $ball.y=y+avy*32;
            spd=dist($ball.vx,$ball.vy)/2;
        }
        // ボールに力を与える
        $ball.vx+=avx*spd+(x-px)*0.1;
        $ball.vy+=avy*spd+(y-py)*0.1;
    }
    // tx,tyはマウスのx,y座標になっている (tx,tyは$Playerによって更新されている)
    if (dist(tx-x,ty-y)<40) {
        // tx,tyが壁でなかったらその場所へ移動
        if (!kabe(x,ty)) {
            y=ty;
        }
        if (!kabe(tx,y)) {
            x=tx;
        }
    }
    // 画面スクロール。
    scx=scx*0.95+x*0.05;
    scy=scy*0.95+y*0.05;
    scrollTo(scx-$screenWidth/2,scy-$screenHeight/2);
}



\scrollTo(scx, scy) {
    $Screen.scrollTo(scx, scy);
    $viewX = scx;
    $viewY = scy;
    /*
    for (var j=0; j<$MAP_ARY_HEIGHT; j++) {
        for (var i=0; i<$MAP_ARY_WIDTH; i++) {
            var mx = ($MAP_CHIP_COL * $MAP_CHIP_PAT_WIDTH) * i;
            var my = ($MAP_CHIP_ROW * $MAP_CHIP_PAT_HEIGHT) * j;
            mx -= $MAP_CHIP_PAT_WIDTH * $MAP_CHIP_COL;
            my -= $MAP_CHIP_PAT_HEIGHT * $MAP_CHIP_ROW;
            $mapAry[i + j*$MAP_ARY_WIDTH].scrollTo(-(mx-scx), -(my-scy));
        }
    }
    */
}

/*
\draw(ctx) {
    var sx = x, sy = y;
    x -= $viewX;
    y -= $viewY;
    super.draw(ctx);
    x = sx; y = sy;
}*/