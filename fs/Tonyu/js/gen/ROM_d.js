(function () {
  var rom={
    base: '/Tonyu/doc/',
    data: {
      '': '{"index.txt":{"lastUpdate":1397638103410},"novice/":{"lastUpdate":1397637120272},"projectIndex.txt":1397119075000,"tonyu2/":{"lastUpdate":1398750394966}}',
      'index.txt': 
        '* サンプルを見る\n'+
        '\n'+
        '左の[[@blink プロジェクト一覧>#prjItemList]]からサンプルを選びます\n'+
        '\n'+
        '* 新しくプロジェクトを作る\n'+
        '\n'+
        '-「[[@blink 新規作成>#newPrj]]」ボタンを押しましょう\n'+
        '- プロジェクトの名前を入力してください\n'+
        '\n'+
        '* リファレンス\n'+
        '\n'+
        '-[[リファレンス>tonyu2/index]]\n'
      ,
      'novice/': '{"crash.txt":1397119075000,"dec.txt":1397119075000,"firstRun.txt":1397119075000,"getkey.txt":1397119075000,"inc.txt":1397119075000,"index.txt":1397119075000,"item.txt":1397119075000,"key.txt":1397119075000,"left.txt":1397119075000,"new.txt":1397119075000,"newFile.txt":1397119075000,"param.txt":1397119075000,"projectIndex.txt":1397119075000,"say.txt":1397119075000,"say2.txt":1397119075000,"sleep.txt":1397119075000,"sprite.txt":1397119075000,"spriteMove.txt":1397119075000,"toc.json":1397119075000,"trouble1.txt":1397119075000,"true.txt":1397119075000,"udlr.txt":1397119075000,"variable.txt":1397119075000,"variable2.txt":1397119075000,"variable3.txt":1397119075000,"while.txt":1397119075000,"xy.txt":1397119075000}',
      'novice/crash.txt': 
        '*キャラクタの衝突判定をしましょう\r\n'+
        '\r\n'+
        '次に，猫(Cat)がリンゴ(Apple)にぶつかると，リンゴを取る（リンゴが消える）ようにしてみましょう．\r\n'+
        '\r\n'+
        '[[@cfrag watchHit]] という命令を使うと，２つのキャラクタがぶつかったときに，\r\n'+
        '特定の命令を実行することができます．\r\n'+
        '\r\n'+
        '[[@plistref addw]]の[[@editadd]]で示した部分を追加してみましょう．\r\n'+
        '（まだプログラムは実行しないでください）\r\n'+
        '\r\n'+
        '<<code Game addw\r\n'+
        'siro=new Cat;\r\n'+
        'siro.say("いただきまーす");\r\n'+
        'apple1=new Apple;\r\n'+
        'apple1.x=200;\r\n'+
        'apple1.y=150;\r\n'+
        'apple2=new Apple;\r\n'+
        'apple2.x=300;\r\n'+
        'apple2.y=100;\r\n'+
        'watchHit(Cat, Apple, hitCatApple);[[@editadd]]\r\n'+
        '>>\r\n'+
        '\r\n'+
        '[[@cfrag watchHit(Cat, Apple, hitCatApple)]]と書くと，\r\n'+
        '猫（[[@cfrag Cat]]）とリンゴ（[[@cfrag Apple]]）がぶつかったときに，\r\n'+
        '[[@cfrag hitCatApple]] という命令が実行されるようになります．\r\n'+
        '\r\n'+
        'ところで，[[@cfrag hitCatApple]] ってどんな命令でしょうか？\r\n'+
        '実はこの時点ではそんな命令はありません．この命令は自分で作ってあげる必要があります．\r\n'+
        'さらに[[@plistref addf]]のように追加してみましょう．\r\n'+
        '\r\n'+
        '<<code Game addf\r\n'+
        'siro=new Cat;\r\n'+
        'siro.say("いただきまーす");\r\n'+
        'apple1=new Apple;\r\n'+
        'apple1.x=200;\r\n'+
        'apple1.y=150;\r\n'+
        'apple2=new Apple;\r\n'+
        'apple2.x=300;\r\n'+
        'apple2.y=100;\r\n'+
        'watchHit(Cat, Apple, hitCatApple);\r\n'+
        'function hitCatApple(cat,apple) {[[@editadd]]\r\n'+
        '    apple.hide();[[@editadd]]\r\n'+
        '}[[@editadd]]\r\n'+
        '>>\r\n'+
        '\r\n'+
        '実行すると，猫とリンゴが触れたときにリンゴが消えるようになります．\r\n'+
        '\r\n'+
        '最後に書いた[[@cfrag function]] で始まる部分は，\r\n'+
        '自分で新しい命令を作るための書き方です．\r\n'+
        'ここでは，[[@cfrag hitCatApple]]という名前の命令を作っています．\r\n'+
        'その後ろにある[[@cfrag (cat, apple)]] という部分は，この命令を実行するに\r\n'+
        'あたって，必要な情報を受け取るためのものです．\r\n'+
        'ここでは，「どのキャラクタと，どのキャラクタがぶつかったか」という情報を受け取り，\r\n'+
        'それぞれに，[[@cfrag cat]] と [[@cfrag apple]] という名前をつけています．\r\n'+
        '\r\n'+
        '[[@cfrag cat]] は，もちろん最初に作った猫ですが，\r\n'+
        'もうひとつの[[@cfrag apple]] は，そのとき猫に触れていたリンゴです．\r\n'+
        'それは[[@cfrag apple1]] かもしれないし，\r\n'+
        '[[@cfrag apple2]] かもしれませんが，とにかく猫が触れていたほうのリンゴに，[[@cfrag apple]]という名前がつけられます．\r\n'+
        '\r\n'+
        'そして，その[[@cfrag apple]] に， [[@cfrag apple.hide()]] という命令を行っています．これは，そのキャラクタ（ここでは[[@cfrag apple]]）を隠す（画面から見えなくする）命令です．\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'novice/dec.txt': 
        '*画像を左方向にも動かしてみましょう\r\n'+
        '\r\n'+
        '今まで，猫の画像は左から右にしか動いていませんでしたが，右から左にも動かすことが\r\n'+
        'できます．\r\n'+
        '\r\n'+
        '<<code Cat dec\r\n'+
        'x=300;\r\n'+
        'while(true) {\r\n'+
        '   go(x,100);sleep();\r\n'+
        '   x-=10;\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        'ここに出てきた[[@cfrag x-=10]]は，「xの値を10減らす」という命令です．\r\n'
      ,
      'novice/firstRun.txt': 
        '* プログラムを実行しましょう\r\n'+
        '\r\n'+
        '実行するには [[@blink 実行>#run]] メニューをクリックするか，F9 キーを押します．\r\n'+
        '\r\n'+
        '[[@figref firstRunRes.png]]のように，猫の絵が表示されたら成功です．\r\n'+
        '\r\n'+
        '[[実行結果>firstRunRes.png]]\r\n'+
        '\r\n'+
        '[[うまくいかないときは>trouble1]]\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'novice/getkey.txt': '[[projectIndex]]',
      'novice/inc.txt': 
        '* 変数の値を増やしてみましょう\r\n'+
        '\r\n'+
        'さて，さきほどのプログラムをもう一度みてみましょう，\r\n'+
        '\r\n'+
        '<<code Cat 50to60\r\n'+
        'x=50;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x=60;\r\n'+
        'go(x,100);sleep();\r\n'+
        '>>\r\n'+
        '\r\n'+
        '[[@plistref 50to60]]では，[[@cfrag x=50;]]で，xに50覚えさせてから，\r\n'+
        '[[@cfrag x=60;]]で，xに60覚えさせています．\r\n'+
        '\r\n'+
        'ここでは，\r\n'+
        '「xに60を覚えさせる」代わりに，「（すでに覚えている）50 を10だけ増やす」\r\n'+
        'という書き方を紹介します．\r\n'+
        '\r\n'+
        '<<code Cat 50to60inc\r\n'+
        'x=50;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        'go(x,100);sleep();\r\n'+
        '>>\r\n'+
        '\r\n'+
        '[[@cfrag x+=10;]]という書き方が出てきました．これは\r\n'+
        '「今覚えているxの値に，10を足す」という意味です．\r\n'+
        '\r\n'+
        '[[@plistref 50to60inc]]では，\r\n'+
        '[[@cfrag x+=10;]]が実行される時点では，\r\n'+
        'xは50を覚えていますので，\r\n'+
        '[[@cfrag x+=10;]]が実行されると，50に10を足した値である\r\n'+
        '60を新しくxに覚えさせます．結果として，\r\n'+
        '[[@plistref 50to60inc]]は，\r\n'+
        '[[@plistref 50to60]]と同じ結果になります．\r\n'+
        '\r\n'+
        'これを利用して，xを100まで増やしながら，絵を動かしてみましょう．\r\n'+
        '\r\n'+
        '<<code Cat 50to100inc\r\n'+
        'x=50;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        'go(x,100);sleep();\r\n'+
        '>>'
      ,
      'novice/index.txt': 
        '\r\n'+
        '\r\n'+
        '* プログラミングを始めましょう\r\n'+
        '\r\n'+
        '- まず，プロジェクトを作ります．\r\n'+
        '-「[[@blink 新規作成>#newPrj]]」ボタンを押しましょう\r\n'+
        '- プロジェクトの名前を入力してください\r\n'+
        '-- 半角文字で入力します\r\n'+
        '-- ここでは  Hello と入力してみましょう\r\n'+
        '\r\n'
      ,
      'novice/item.txt': 
        '* アイテムを配置しましょう\r\n'+
        '\r\n'+
        '猫を動かして，リンゴのアイテムを取るゲームを作ってみましょう．\r\n'+
        '\r\n'+
        'まず，アイテムのためのプログラムを作成します．\r\n'+
        '\r\n'+
        '- メニューの「[[@blink ファイル>#fileMenu]]」→「[[@blink 新規>#newFile]]」を選びます\r\n'+
        '- ファイル名を入力します\r\n'+
        '-- ここでは Apple と入力してみます\r\n'+
        '\r\n'+
        '<<code Apple\r\n'+
        'go(200,150);\r\n'+
        '>>\r\n'+
        '\r\n'+
        '[[@blink 実行>#run]]メニューから，「Appleを実行」選びましょう．\r\n'+
        'すると，今まで通り猫の画像が表示されます．\r\n'+
        '\r\n'+
        'これを，リンゴの画像にしてみましょう．\r\n'+
        '\r\n'+
        '<<code Apple\r\n'+
        'change($pat_fruits);\r\n'+
        'go(200,150);\r\n'+
        '>>\r\n'+
        '\r\n'+
        '[[@cfrag change]]という命令は，画像の絵柄を変える命令です．\r\n'+
        '( ) 内に書くのは，絵柄の名前を指定します．[[@cfrag $pat_fruits]] は，\r\n'+
        '標準に用意されているリンゴの画像データを指します．\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'novice/key.txt': 
        '* キーボードを使って絵を動かしましょう\r\n'+
        '\r\n'+
        'さきほどのプログラムでは，猫が勝手に外にでていってしまうので\r\n'+
        'キーボードを使って好きな方向に動くようにしてみましょう\r\n'+
        '\r\n'+
        '<<code Cat getkey\r\n'+
        'x=50;\r\n'+
        'y=100;\r\n'+
        'while(true) {\r\n'+
        '   k=getkey("right");\r\n'+
        '   if (k>0) {\r\n'+
        '      x+=10;\r\n'+
        '   }\r\n'+
        '   go(x,y);sleep();\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '実行したら，まず，猫のいる画面をクリックしてください．\r\n'+
        'そのあと，右矢印キーを押すと，猫が右に動きます．\r\n'+
        '\r\n'+
        'ここでは，新しく2つの命令が出てきました．\r\n'+
        '\r\n'+
        'まず[[@cfrag getkey]]は，キーが押されているかを判定する命令です．\r\n'+
        '[[@cfrag k=getkey("right"); ]]は，右矢印キーが押されているかを判定し，判定結果を変数kに書き込みます．\r\n'+
        '-もし右矢印キーが押されていなければ，変数kに0を書き込みます．\r\n'+
        '-もし右矢印キーが押されていれば，変数kに0より大きい値を書き込みます（押されている時間が長いほど大きい値になります）．\r\n'+
        '\r\n'+
        'そして， [[@cfrag if]]という命令も登場しました．これは，次のような形式で使います．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'if ([[@arg 条件]]) {\r\n'+
        '  [[@arg 命令]]\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '-[[@arg 条件]]が成り立つ（正しい）ときに，  [[@arg 命令]]を実行します．\r\n'+
        '-[[@arg 条件]]が成り立たない（正しくない）ときには，[[@arg 命令]]を実行しません．\r\n'+
        '\r\n'+
        'ここでは，[[@arg 条件]]の部分に[[@cfrag k>0]]，[[@arg 命令]] の部分に[[@cfrag x+=10]] と書いてあります．つまり，\r\n'+
        '\r\n'+
        '-[[@cfrag k>0]]が成り立つ（正しい）ときに，  [[@cfrag x+=10;]]を実行します．\r\n'+
        '-[[@cfrag k>0]]が成り立たない（正しくない）ときには，[[@cfrag x+=10;]]を実行しません．\r\n'+
        '\r\n'+
        '[[@cfrag k>0]]が成り立つのは，右キーが押されているときです．また，[[@cfrag x+=10;]]は，右に移動する命令ですので，次のように動作します\r\n'+
        '\r\n'+
        '-右キーが押されているならば，右に動きます．\r\n'+
        '-右キーが押されていないならば，右に移動しません．\r\n'
      ,
      'novice/left.txt': 
        '*ゲームクリアの判定をしましょう\r\n'+
        '\r\n'+
        'すべてのリンゴを取ったら，猫が「ごちそうさま」といって，\r\n'+
        'ゲームクリアになるようにしましょう．\r\n'+
        '\r\n'+
        'それには，「リンゴがあといくつ残っているか」を数える必要があります．\r\n'+
        'そこで，リンゴの残り数を表す[[@cfrag left]]という変数を用意します．\r\n'+
        'リンゴは2つあるので，2を覚えさせておきます．\r\n'+
        '\r\n'+
        '[[@plistref addl]]の[[@editadd]]の部分を追加しましょう．\r\n'+
        '\r\n'+
        '<<code Game addl\r\n'+
        'siro=new Cat;\r\n'+
        'siro.say("いただきまーす");\r\n'+
        'apple1=new Apple;\r\n'+
        'apple1.x=200;\r\n'+
        'apple1.y=150;\r\n'+
        'apple2=new Apple;\r\n'+
        'apple2.x=300;\r\n'+
        'apple2.y=100;\r\n'+
        'watchHit(Cat, Apple, hitCatApple);\r\n'+
        'left=2;[[@editadd]]\r\n'+
        'function hitCatApple(cat,apple) {\r\n'+
        '    apple.hide();\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        'さらに，リンゴを取った時に，[[@cfrag left]]の値を減らします．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        '変数名--; \r\n'+
        '>>\r\n'+
        'と書くと，変数の値を1減らすことができます．\r\n'+
        '\r\n'+
        '<<code Game(hitCatApple内部のみ) adddec\r\n'+
        'function hitCatApple(cat,apple) {\r\n'+
        '    apple.hide();\r\n'+
        '    left--;[[@editadd]]\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        'さらに，[[@cfrag left]] が0になったときに，猫に「ごちそうさま」というメッセージを表示させます．\r\n'+
        '\r\n'+
        '<<code Game(hitCatApple内部のみ) addif\r\n'+
        'function hitCatApple(cat,apple) {\r\n'+
        '    apple.hide();\r\n'+
        '    left--;\r\n'+
        '    if (left<=0) {[[@editadd]]\r\n'+
        '        cat.say("ごちそうさま");[[@editadd]]\r\n'+
        '    }[[@editadd]]\r\n'+
        '}\r\n'+
        '>>\r\n'
      ,
      'novice/new.txt': 
        '*複数のキャラクタを配置しましょう\r\n'+
        '\r\n'+
        'さて，Appleを実行すると，リンゴが表示されますが，猫は出てこなくなってしまいました．ゲームには，猫とリンゴが同時に出てくる必要があります．\r\n'+
        '\r\n'+
        'そこで「リンゴと猫を置く」ための別のプログラムを作りましょう．\r\n'+
        '\r\n'+
        '- メニューの「[[@blink ファイル>#fileMenu]]」→「[[@blink 新規>#newFile]]」を選びます\r\n'+
        '- ファイル名を入力します\r\n'+
        '-- ここでは Game と入力してみます\r\n'+
        '\r\n'+
        'Gameに，次のように入力してみましょう．\r\n'+
        '\r\n'+
        '<<code Game\r\n'+
        'new Cat;\r\n'+
        'new Apple;\r\n'+
        '>>\r\n'+
        '\r\n'+
        '[[@blink 実行>#run]]メニューから，「Gameを実行」選びましょう．\r\n'+
        'すると，猫とリンゴが同じ画面に表示されます．\r\n'+
        '\r\n'+
        'ここで出てきた[[@cfrag new]] という命令は，\r\n'+
        '新しくキャラクタを作るための命令です．\r\n'+
        '\r\n'+
        '次のように，[[@arg プログラム名]]を指定します．\r\n'+
        '新しく出現したキャラクタは，\r\n'+
        '指定された[[@arg プログラム名]]のプログラムを実行します．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'new [[@arg プログラム名]];\r\n'+
        '>>\r\n'+
        '\r\n'+
        'なお，今後はしばらく Game を実行していきますので「実行する」と書いてあったら，\r\n'+
        '[[@blink 実行>#run]]メニューから，「Gameを実行」選ぶようにしてください．\r\n'+
        'F9キーを押すと，前回実行したプログラムと同じプログラムが実行されるので便利です．\r\n'
      ,
      'novice/newFile.txt': 
        '* 新しくファイルを作りましょう\r\n'+
        '\r\n'+
        '- メニューの「[[@blink ファイル>#fileMenu]]」→「[[@blink 新規>#newFile]]」を選びます\r\n'+
        '- ファイル名を入力します\r\n'+
        '-- ファイル名には，半角英数字とアンダースコア(_)のみが使えます．先頭は英大文字にしてください．\r\n'+
        '-- ここでは Cat と入力してみます(後で猫の画像が登場します）\r\n'+
        '\r\n'+
        '* ファイルを編集しましょう\r\n'+
        '\r\n'+
        '- [[@blink ファイル一覧>#fileItemList]] から，ファイルを選びます．\r\n'+
        '- [[@blink プログラム編集欄>#prog]] に，[[@plistref first]]のようにプログラムを書いてみましょう\r\n'+
        '\r\n'+
        '<<code Cat first\r\n'+
        'go(50,100);\r\n'+
        '>>'
      ,
      'novice/param.txt': 
        '*複数のキャラクタを配置しましょう(2)\r\n'+
        '\r\n'+
        '猫とリンゴが表示できたので，\r\n'+
        '今度はリンゴを2つ置いてみましょう．それには，Gameを次のようにすればよさそうですね．\r\n'+
        '\r\n'+
        '<<code Game g1\r\n'+
        'new Cat;\r\n'+
        'new Apple;\r\n'+
        'new Apple;\r\n'+
        '>>\r\n'+
        '\r\n'+
        '実行すると... あれ？リンゴは1つしか表示されません．\r\n'+
        '\r\n'+
        'ここで，Appleのプログラムを確認してみましょう．\r\n'+
        '\r\n'+
        '<<code Apple\r\n'+
        'change($pat_fruits);\r\n'+
        'go(200,150);\r\n'+
        '>>\r\n'+
        '\r\n'+
        'Appleでは，リンゴを(200,150)の位置に移動させる，と書いてあります．\r\n'+
        '\r\n'+
        '実は，リンゴは2つできているのですが，どちらも(200,150)という\r\n'+
        'ピッタリ同じ位置に重なっているので\r\n'+
        '１つにしか見えないのです．\r\n'+
        '\r\n'+
        'それでは，2つのリンゴを違う位置に表示させましょう．\r\n'+
        'それには，リンゴの位置が(200,150)ではなく，リンゴごとに変わるようにすればよいでしょう．つまり，200や150という「数」が「変わる」ようにする... そうです「変数」を使えばよいのです．\r\n'+
        '\r\n'+
        'そこで，Appleの[[@cfrag 200]]と[[@cfrag 150]] を，それぞれ変数[[@cfrag x]]と[[@cfrag y]]に置き換えてみましょう．\r\n'+
        '\r\n'+
        '<<code Apple xy1\r\n'+
        'change($pat_fruits);\r\n'+
        'go(x,y);\r\n'+
        '>>\r\n'+
        '\r\n'+
        '実行すると... あれ！今度はリンゴが1つも出てきません．\r\n'+
        '\r\n'+
        'なぜかというと，[[@plistref xy1]]の状態では，変数 x や y は何も値を覚えていないため，[[@cfrag go(x,y)]]と命令されても，どこに表示していいかわからないからです．\r\n'+
        '\r\n'+
        'かといって，[[@plistref xy1]]に[[@cfrag x=200]]や[[@cfrag y=150]]などの，変数に値を覚えさせる命令を書くわけにもいきません．なぜなら，xやy の値はリンゴごとに違っていなければならないからです．\r\n'+
        '\r\n'+
        'そこで，ここでは，Appleではなく，Gameのほうでリンゴに具体的なx や y の値を設定させます． \r\n'+
        '\r\n'+
        'まず，Gameを次のように書き換えます．まだ実行はしないでください．\r\n'+
        '\r\n'+
        '<<code Game\r\n'+
        'new Cat;\r\n'+
        'apple1=new Apple;\r\n'+
        'apple2=new Apple;\r\n'+
        '>>\r\n'+
        '\r\n'+
        '[[@plistref g1]]と変わったのは，[[@cfrag new Apple]]の前に，\r\n'+
        '[[@cfrag apple1=]]と[[@cfrag apple2=]]がついたところです．\r\n'+
        '\r\n'+
        '[[@cfrag apple1=new Apple;]]は，新しくできたリンゴのキャラクタに「apple1」という名前をつけています．同様に，2つ目のリンゴのキャラクタに「apple2」という名前をつけています．\r\n'+
        '\r\n'+
        '名前をつけることによって，それらのキャラクタに命令をしたり，キャラクタがもっている変数の値を変更させることができます．\r\n'+
        '\r\n'+
        '<<code Game a1a2\r\n'+
        'new Cat;\r\n'+
        'apple1=new Apple;\r\n'+
        'apple1.x=200;\r\n'+
        'apple1.y=150;\r\n'+
        'apple2=new Apple;\r\n'+
        'apple2.x=300;\r\n'+
        'apple2.y=100;\r\n'+
        '>>\r\n'+
        '\r\n'+
        '実行すると，今度はちゃんとリンゴが2つ表示されますね．\r\n'+
        '\r\n'+
        '[[@cfrag apple1.x=200;]] という命令は，その1行上で新しく作ったリンゴのキャラクタ，つまりapple1 がもっている x という変数に 200 を覚えさせています．\r\n'+
        '\r\n'+
        '今，「キャラクタがもっている変数」という表現をしましたが，変数は名前が同じでも，キャラクタごとに違う値をもたせる（覚えさせる）ことができます．\r\n'+
        '例えば，[[@plistref a1a2]]では，apple1 の もっている変数xの値は200ですが，apple2 がもっている変数x は300になっています．\r\n'+
        '\r\n'+
        '[[キャラクタごとに変数の値は異なる>apple1apple2.png]]\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'novice/projectIndex.txt': 
        '\r\n'+
        '* 目次\r\n'+
        '\r\n'+
        '<<toc\r\n'+
        '-[[新しくファイルを作りましょう>newFile]]\r\n'+
        '-[[プログラムを実行しましょう>firstRun]]\r\n'+
        '-[[値を変えてみましょう>sprite]]\r\n'+
        '-[[画像を動かしてみましょう>spriteMove]]\r\n'+
        '-[[画像をもっと長い時間動かしてみましょう>variable]]\r\n'+
        '-[[画像をもっと楽に動かしましょう>variable2]]\r\n'+
        '-[[変数の値を変えてみましょう>variable3]]\r\n'+
        '-[[変数の値を増やしてみましょう>inc]]\r\n'+
        '-[[繰り返しを使ってプログラムを短くしましょう>while]]\r\n'+
        '-[[ずっと繰り返すようにしましょう>true]]\r\n'+
        '-[[画像を左方向に動かしてみましょう>dec]]\r\n'+
        '-[[画像を縦や斜めにも動かしてみましょう>xy]]\r\n'+
        '-[[画像をキーボードで動かしましょう>key]]\r\n'+
        '-[[画像をキーボードで上下左右に動かしましょう>udlr]]\r\n'+
        '-[[アイテムを配置しましょう>item]]\r\n'+
        '-[[複数のキャラクタを配置しましょう>new]]\r\n'+
        '-[[複数のキャラクタを配置しましょう(2)>param]]\r\n'+
        '-[[メッセージを表示しましょう>say2]]\r\n'+
        '-[[キャラクタの衝突判定をしましょう>crash]]\r\n'+
        '-[[ゲームクリアの判定をしましょう>left]]\r\n'+
        '>>\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'novice/say.txt': 
        '[[前へ>sprite]]\r\n'+
        '\r\n'+
        '* メッセージを表示させてみましょう．\r\n'+
        '\r\n'+
        'プログラムは複数行書くこともできます．go 命令に続けて，次のように書いてみましょう\r\n'+
        '\r\n'+
        '@@@@\r\n'+
        'go(50,100);\r\n'+
        'say("こんにちは!!");\r\n'+
        '@@@@\r\n'+
        '\r\n'+
        '注意： こんにちは と書かれた部分以外はすべて半角で入力してください．\r\n'+
        '\r\n'+
        '[[@blink 実行>#run]]すると，猫の上に「こんにちは」というセリフが表示されます．\r\n'+
        '\r\n'+
        '[[次へ>sleep]]'
      ,
      'novice/say2.txt': 
        '* メッセージを表示しましょう．\r\n'+
        '\r\n'+
        'ゲームスタートしたときに，\r\n'+
        '猫に[[@figref itadaki.png]]のようなメッセージを表示させてみましょう．\r\n'+
        '\r\n'+
        '[[メッセージの表示>itadaki.png]]\r\n'+
        '\r\n'+
        '\r\n'+
        'それにはまず，猫に名前をつける必要があります．\r\n'+
        'なんでもかまいませんが，白いので[[@cfrag siro]] と名前をつけましょう．\r\n'+
        '\r\n'+
        '<<code Game\r\n'+
        'siro=new Cat;\r\n'+
        'apple1=new Apple;\r\n'+
        'apple1.x=200;\r\n'+
        'apple1.y=150;\r\n'+
        'apple2=new Apple;\r\n'+
        'apple2.x=300;\r\n'+
        'apple2.y=100;\r\n'+
        '>>\r\n'+
        '\r\n'+
        'そして，[[@cfrag siro]]にメッセージを表示させます．\r\n'+
        'メッセージを表示するには，[[@cfrag say]]という命令を使います．\r\n'+
        '\r\n'+
        '<<code Game itadaki\r\n'+
        'siro=new Cat;\r\n'+
        'siro.say("いただきまーす");\r\n'+
        'apple1=new Apple;\r\n'+
        'apple1.x=200;\r\n'+
        'apple1.y=150;\r\n'+
        'apple2=new Apple;\r\n'+
        'apple2.x=300;\r\n'+
        'apple2.y=100;\r\n'+
        '>>\r\n'+
        '\r\n'+
        '\r\n'+
        '命令を実行するとき，実行する相手のキャラクタを指定するときは次の形式を使います．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'キャラクタ名 . 命令名 ( 引数  )\r\n'+
        '>>\r\n'+
        '\r\n'+
        '[[@plistref itadaki]] では，キャラクタ名は [[@cfrag siro]]，\r\n'+
        ' 命令名は[[@cfrag say]] です．つまり[[@cfrag siro]] に対して，\r\n'+
        '[[@cfrag say]]という命令を行わせています．\r\n'+
        '\r\n'+
        'そして，引数の部分に，表示させるメッセージである[[@cfrag "いただきまーす"]] という文字列（文字が並んだもの）を指定しています．文字列は [[@cfrag "]]で囲む点に注意してください．'
      ,
      'novice/sleep.txt': 
        '[[前へ>say]]\r\n'+
        '\r\n'+
        '*メッセージを順番に表示させてみましょう\r\n'+
        '\r\n'+
        'プログラムは上から順番に実行されます．\r\n'+
        '\r\n'+
        '今度は「こんにちは」に続けて，「さようなら」と表示させてみたいと思います．\r\n'+
        '[[@plistref nonsleep]]を入力します．\r\n'+
        '\r\n'+
        '@@@@nonsleep\r\n'+
        'go(50,100);\r\n'+
        'say("こんにちは");\r\n'+
        'say("さようなら");\r\n'+
        '@@@@\r\n'+
        '\r\n'+
        '実行してみましょう.\r\n'+
        '\r\n'+
        '[[[[@plistref nonsleep]]の実行結果>sayonara.png]]\r\n'+
        '\r\n'+
        'あれ！いきなり「さようなら」が表示されました．「こんにちは」は表示されなかったのでしょうか？\r\n'+
        '\r\n'+
        '実は，コンピュータは確かに[[@plistref nonsleep]]のプログラムを上から順番に\r\n'+
        '\r\n'+
        '- 猫の絵を表示する\r\n'+
        '- 「こんにちは」と表示する\r\n'+
        '- 「さようなら」と表示する\r\n'+
        '\r\n'+
        'と実行したのです．しかし，コンピュータはとても高速に動作しているので\r\n'+
        '「こんにちは」と表示してから，人間の目に見えないうちに，すぐに「さようなら」\r\n'+
        'と表示してしまっています．\r\n'+
        '\r\n'+
        'これでは，「こんにちは」が見えないので，コンピュータに少し待ってもらうように命令を追加しましょう．\r\n'+
        '\r\n'+
        '@@@@sleep\r\n'+
        'go(50,100);\r\n'+
        'say("こんにちは");\r\n'+
        'sleep(30); // 追加\r\n'+
        'say("さようなら");\r\n'+
        '@@@@\r\n'+
        '\r\n'+
        '実行すると，今度は「こんにちは」が表示されてから「さようなら」が表示されました．\r\n'+
        '\r\n'+
        '[[@plistref sleep]]で追加した sleep という命令は，その名の通りコンピュータにしばらく寝てもらいます．\r\n'+
        'つまり，プログラムの実行を少し待ってもらいます．\r\n'+
        '後ろに書いた30 は，どれくらい待つかを表す数値で，単位は「フレーム」です．\r\n'+
        'フレームについては後ほど詳しく説明しますが，1フレームは30分の1秒(約0.03秒)に相当します．\r\n'+
        '\r\n'+
        'sleep(30)は30フレーム，つまり1秒ほど実行を待ちます．つまり，このプログラムは，次の順番で実行されます．\r\n'+
        '\r\n'+
        '- 猫の絵を表示する\r\n'+
        '- 「こんにちは」と表示する\r\n'+
        '- 30フレーム（1秒ほど）待つ\r\n'+
        '- 「さようなら」と表示する\r\n'+
        '\r\n'+
        '\r\n'+
        '[[次へ>spriteMove]]'
      ,
      'novice/sprite.txt': 
        '* 値を変えてみましょう\r\n'+
        '\r\n'+
        'プログラムは，命令を実行します．\r\n'+
        'ここでは，go という命令を使って，画面に絵を表示させています．\r\n'+
        '\r\n'+
        '@@@@\r\n'+
        'go(50,100);\r\n'+
        '@@@@\r\n'+
        '\r\n'+
        'ここで， 50 や 100 などの数値を別の数値に変えてみましょう\r\n'+
        '\r\n'+
        '@@@@\r\n'+
        'go(150,100);\r\n'+
        '@@@@\r\n'+
        '\r\n'+
        'もう一度， [[@blink 実行>#run]] メニューをクリックするか，F9 キーを押して実行します．\r\n'+
        '\r\n'+
        '画面上の位置を決めるには，2つの数値が必要になります．\r\n'+
        'それは，「横の位置」と「縦の位置」です．\r\n'+
        '-横の位置は「画面左端から何ピクセル離れているか」をあらわした数値です\r\n'+
        '-縦の位置は「画面上端から何ピクセル離れているか」をあらわした数値です\r\n'+
        '\r\n'+
        '横の位置と縦の位置をまとめてあらわしたものを「座標」といい，\r\n'+
        '\r\n'+
        '(横の位置,縦の位置)\r\n'+
        '\r\n'+
        'という形式であらわします．\r\n'+
        '\r\n'+
        '例えば(50,100) という座標は，次のような位置をあらわします．\r\n'+
        '-画面左端から50ピクセル離れた位置\r\n'+
        '-画面上端から100ピクセル離れた位置\r\n'+
        '\r\n'+
        '[[座標>50_100.png]]\r\n'+
        '\r\n'+
        'いろいろな位置の座標を[[@figref coords.png]]にまとめました．それぞれの数値の違いに注目しましょう．\r\n'+
        '\r\n'+
        '[[位置と座標>coords.png]]\r\n'+
        '\r\n'+
        'ここで出てきたgo という命令は，go の後ろに書いた座標の位置に，絵を表示します．\r\n'+
        '\r\n'+
        '命令は，次のような形式で書きます．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        '命令の名前 ( 引数 , 引数 ...);\r\n'+
        '>>\r\n'+
        '引数（ひきすう）とは，命令を行うときに必要な情報をあらわします．\r\n'+
        '\r\n'+
        '例えば，[[@cfrag go(100,50);]] は [[@cfrag go]]という名前の命令を，\r\n'+
        '100 と 50 という2つの引数（どこに移動するか，という情報）を\r\n'+
        '使って行います．'
      ,
      'novice/spriteMove.txt': 
        '* 画像を動かしてみましょう\r\n'+
        '\r\n'+
        'go 命令を使うと，指定した座標で示した位置に画像を動かすことができます．\r\n'+
        'これを利用して，画像を少しずつ違う位置に動かしていき，\r\n'+
        '猫が動くアニメーションを作ってみましょう．\r\n'+
        '\r\n'+
        '<<code Cat now\r\n'+
        'go(50,100);\r\n'+
        'go(60,100);\r\n'+
        'go(70,100);\r\n'+
        'go(80,100);\r\n'+
        'go(90,100);\r\n'+
        'go(100,100);\r\n'+
        '>>\r\n'+
        '\r\n'+
        '実行すると... 猫が動いていないようですね．いきなり(100,100)の\r\n'+
        '位置に表示されたようです．\r\n'+
        '\r\n'+
        '[[[[@plistref now]]の実行結果>noWaitCat.png]]\r\n'+
        '\r\n'+
        '実は，猫はちゃんと(50,100)の位置から始まって，(60,100)  (70,100) \r\n'+
        '(80,100)  (90,100) と少しずつ動きながら\r\n'+
        '(100,100)の位置まで移動したのですが，\r\n'+
        'コンピュータは，とても素早く命令を実行するため，\r\n'+
        '途中の動作が見えなかったのです．\r\n'+
        '\r\n'+
        'そこで，命令の実行を少しゆっくりに実行してもらいます．\r\n'+
        '[[@cfrag sleep]] という命令を使うと，途中で実行を待つことができます．\r\n'+
        '\r\n'+
        '<<code Cat now2\r\n'+
        'go(50,100);sleep();\r\n'+
        'go(60,100);sleep();\r\n'+
        'go(70,100);sleep();\r\n'+
        'go(80,100);sleep();\r\n'+
        'go(90,100);sleep();\r\n'+
        'go(100,100);sleep();\r\n'+
        '>>\r\n'+
        '\r\n'+
        '今度は，猫が少しずつ動く様子が見えると思います．\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'novice/toc.json': '["projectIndex","newFile","firstRun","sprite","spriteMove","variable","variable2","variable3","inc","while","true","dec","xy","key","udlr","item","new","param","say2","crash","left"]',
      'novice/trouble1.txt': 
        'プログラムを書き間違えていると，エラーが表示されます．\r\n'+
        '\r\n'+
        '[[文法エラー>syntaxError.png]]\r\n'+
        '\r\n'+
        '[[@figref syntaxError.png]]の例では，命令の最後にセミコロン ;  をつけていないためにエラーになっています．\r\n'+
        'セミコロンを追加して，再度実行してください．\r\n'+
        '\r\n'+
        '[[@figref runtimeError.png]]の例では，命令の名前を間違えています．(goo ではなく go ）\r\n'+
        '正しい命令になおしてください．\r\n'+
        '\r\n'+
        '[[命令の名前が違うエラー>runtimeError.png]]\r\n'+
        '\r\n'+
        'なお，命令の名前は大文字と小文字が区別されます．[[@cfrag go]]の代わりに[[@cfrag Go]]と書くことはできません．\r\n'+
        '\r\n'+
        '[[戻る>firstRun]]'
      ,
      'novice/true.txt': 
        '* ずっと繰り返すようにしましょう\r\n'+
        '\r\n'+
        'さきほどのプログラムでは，[[@cfrag x<=300]]，つまりxが300以下の間は絵が右に動き，xが300をを超えたら止まりました．\r\n'+
        '\r\n'+
        'ゲームなどにおいては，キャラクタは（ゲームオーバーやクリアにならなければ）半永久的に動き続けます．このようにずっと動く処理を書くには，[[@plistref true]]のようにします．\r\n'+
        '\r\n'+
        '<<code Cat true\r\n'+
        'x=50;\r\n'+
        'while(true) {\r\n'+
        '   go(x,100);sleep();\r\n'+
        '   x+=10;\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '実行すると，猫の画像が途中で止まらずに，そのまま画面外に出ていきます．\r\n'+
        '\r\n'+
        'もう一度F9を押せば，また同じ動きを見ることができます．\r\n'+
        '\r\n'+
        'while文の条件に書いてある [[@cfrag true]]という条件は，「必ず成り立つ」という意味です．この条件を書いておくと，{  } で囲まれた処理がずっと動き続けます．'
      ,
      'novice/udlr.txt': 
        '* 画像をキーボードで上下左右に動かしましょう\r\n'+
        '\r\n'+
        'さきほどのキーボードを使って右に動かす仕組みを使って，\r\n'+
        '画像を上下左右に動かしましょう\r\n'+
        '\r\n'+
        '<<code Cat k\r\n'+
        'x=50;\r\n'+
        'y=100;\r\n'+
        'while(true) {\r\n'+
        '   k=getkey("right");\r\n'+
        '   if (k>0) {\r\n'+
        '      x+=10;\r\n'+
        '   }\r\n'+
        '   k=getkey("left");\r\n'+
        '   if (k>0) {\r\n'+
        '      x-=10;\r\n'+
        '   }\r\n'+
        '   k=getkey("down");\r\n'+
        '   if (k>0) {\r\n'+
        '      y+=10;\r\n'+
        '   }\r\n'+
        '   k=getkey("up");\r\n'+
        '   if (k>0) {\r\n'+
        '      y-=10;\r\n'+
        '   }\r\n'+
        '   go(x,y);sleep();\r\n'+
        '}\r\n'+
        '>>'
      ,
      'novice/variable.txt': 
        '* 画像をもっと長い時間動かしてみましょう\r\n'+
        '\r\n'+
        'さきほどの実行したプログラム([[@plistref 50_100]]は，\r\n'+
        '横の位置を50 から始めて，100まで動かしました．\r\n'+
        '\r\n'+
        '@@@@\r\n'+
        'go(50,100);sleep();\r\n'+
        'go(60,100);sleep();\r\n'+
        'go(70,100);sleep();\r\n'+
        'go(80,100);sleep();\r\n'+
        'go(90,100);sleep();\r\n'+
        'go(100,100);sleep();\r\n'+
        '@@@@\r\n'+
        '\r\n'+
        '今度はもっと遠くまで動かしてみましょう．\r\n'+
        '例えば，横の位置を50から300まで動かしてみるには，[[@figref 50_300.png]] のように，\r\n'+
        'sleepを，[[@cfrag go(300,100);]] になるまで書けばよいでしょう\r\n'+
        '\r\n'+
        '[[300まで動かすプログラム>50_300.png]]\r\n'+
        '\r\n'+
        '実行してみましょう．さっきよりも長く動きますね．\r\n'
      ,
      'novice/variable2.txt': 
        '* 画像をもっと楽に動かしましょう\r\n'+
        '\r\n'+
        'しかし，前のプログラムは書くのが大変です．\r\n'+
        'そこで，もう少し簡単に書くための工夫を行います．\r\n'+
        '\r\n'+
        'さきほどのプログラムは，次のように，go の直後の数値が50,60,70,80.... と増えていることがわかります．\r\n'+
        '\r\n'+
        '@@@@\r\n'+
        'go(50,100);sleep();\r\n'+
        'go(60,100);sleep();\r\n'+
        'go(70,100);sleep();\r\n'+
        'go(80,100);sleep();\r\n'+
        '// 以下略\r\n'+
        '@@@@\r\n'+
        '\r\n'+
        '\r\n'+
        'ここで，「変数」という仕組みを紹介します．\r\n'+
        '変数とは，文字通り「変わる数」のことです．\r\n'+
        '\r\n'+
        '今のプログラムで数値が変わっている部分は，[[@cfrag go(★,100);]]の★で示した部分ですね．\r\n'+
        'そこで，「★の部分の数は変わるんですよ」ということをコンピュータに教えてあげます．\r\n'+
        '\r\n'+
        'もったいないのですが一旦プログラムを全部消して，次のように書いてみましょう．まだ実行はしないでください\r\n'+
        '\r\n'+
        '@@@@\r\n'+
        'go(x,100);\r\n'+
        '@@@@\r\n'+
        '\r\n'+
        'ここで出てきた x が変数です．\r\n'+
        '\r\n'+
        '「xと書いた部分は，何か数値が入るけど，それは変化することがあるよ」ということを表しています．\r\n'+
        '\r\n'+
        'ところで，「何か数値が入る」と書きましたが，何が入っているのでしょうか？\r\n'+
        '何が入っているのかは，最初に変数を使う前に決めないといけません．\r\n'+
        '\r\n'+
        '次のように[[@cfrag x=50;]]を追加してみましょう．\r\n'+
        '\r\n'+
        '@@@@firstVar\r\n'+
        'x=50;\r\n'+
        'go(x,100);\r\n'+
        '@@@@\r\n'+
        '\r\n'+
        'ここで[[@blink 実行>#run]]してみましょう．\r\n'+
        '[[@figref firstRunRes.png]]のように猫の絵が(50,100)の位置に表示されます．\r\n'+
        '\r\n'+
        '[[[[@plistref firstVar]]の実行結果>firstRunRes.png]]\r\n'+
        '\r\n'+
        '[[@cfrag x=50;]] という命令は，「変数 xに50という値を覚えさせる」という意味です．この状態で\r\n'+
        '\r\n'+
        '@@@@\r\n'+
        'go(x,100);\r\n'+
        '@@@@\r\n'+
        'を実行すると\r\n'+
        '@@@@\r\n'+
        'go(50,100);\r\n'+
        '@@@@\r\n'+
        'を実行したのと同じ結果が得られます．'
      ,
      'novice/variable3.txt': 
        '*変数の値を変えてみましょう．\r\n'+
        '\r\n'+
        'さて，変数を使って，猫を右方向に動かしてみたいと思います．\r\n'+
        '[[@plistref c5060]]のように変更しましょう\r\n'+
        '（動いている様子が見えるように，[[@cfrag sleep();]]も忘れずにつけてください．）\r\n'+
        '\r\n'+
        '<<code Cat c5060\r\n'+
        'x=50;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x=60;\r\n'+
        'go(x,100);sleep();\r\n'+
        '>>\r\n'+
        '\r\n'+
        'このプログラムは，まず，変数xに50を覚えさせてから，[[@cfrag go(x,100);]]を実行しています．\r\n'+
        'つまり[[@cfrag go(50,100);]]を実行したのと同じ結果になります．\r\n'+
        '\r\n'+
        'そして，xに60を覚えさせています．\r\n'+
        '\r\n'+
        'このとき，その前にxが覚えていた50はどうなってしまうのでしょうか．\r\n'+
        '実は，変数に値を覚えさせると，それまで覚えていた値のことは上書きされてなくなってしまいます．\r\n'+
        '\r\n'+
        'つまり，最後の行で[[@cfrag go(x,100);]]を実行すると，\r\n'+
        '[[@cfrag go(60,100);]]を実行したのと同じ結果になります．\r\n'
      ,
      'novice/while.txt': 
        '* 繰り返しを使ってプログラムを短くしましょう\r\n'+
        '\r\n'+
        'さきほどのプログラムをよく見てみましょう．\r\n'+
        '\r\n'+
        '<<code Cat 50to100inc\r\n'+
        'x=50;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        'go(x,100);sleep();\r\n'+
        '>>\r\n'+
        '\r\n'+
        '最初の[[@cfrag x=50;]]を除いて，あとはずっと\r\n'+
        '\r\n'+
        '<<code \r\n'+
        'go(x,100);sleep();\r\n'+
        'x+=10;\r\n'+
        '>>\r\n'+
        'が繰り返されていることがわかります．\r\n'+
        '\r\n'+
        'このように，同じことを何度も繰り返すときは，コンピュータに「この部分は繰り返してください」\r\n'+
        'と指示することによって，プログラムをもっと短くすることができます．\r\n'+
        '\r\n'+
        '[[@plistref 50to100inc]] を，[[@plistref firstWhile]]のように書き換えてみましょう．\r\n'+
        '\r\n'+
        '<<code Cat firstWhile\r\n'+
        'x=50;\r\n'+
        'while (x<=100) {\r\n'+
        '  go(x,100);sleep();\r\n'+
        '  x+=10;\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '実行してみると，先ほど同じように動きます．\r\n'+
        '\r\n'+
        'ここでは，「while文」という書き方を用いています．これは，次のような形式で使います\r\n'+
        '\r\n'+
        '<<code while文の書式\r\n'+
        'while([[@arg 条件]]) {\r\n'+
        '   [[@arg 動作]]\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '- while文は， {  と } で囲まれた[[@arg 動作]]を繰り返し実行します．\r\n'+
        '- どのくらいまで繰り返せばよいかを，[[@arg 条件]] に指定します．\r\n'+
        '\r\n'+
        '[[@plistref firstWhile]]の動作は，次のようになります．\r\n'+
        '\r\n'+
        '- [[@cfrag x=50;]] 変数xに50を覚えさせる\r\n'+
        '- [[@cfrag x<=100]]， つまり変数xの値が100以下の間は，次のことを繰り返す\r\n'+
        '-- [[@cfrag go(x,100);]] (x,100)の場所に絵を表示し，\r\n'+
        '-- [[@cfrag x+=10;]] xを10増やす\r\n'+
        '\r\n'+
        'さて，この仕組みを使って，猫の絵を横位置300まで動かしてみましょう．\r\n'+
        '\r\n'+
        '<<code Cat w300\r\n'+
        'x=50;\r\n'+
        'while (x<=300) {\r\n'+
        '  go(x,100);sleep();\r\n'+
        '  x+=10;\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '[[@plistref firstWhile]]と変わった部分は，while の後ろの [[@cfrag x<=300]]だけです．\r\n'+
        'つまり，数値を1個変えるだけで，もっと遠くまで動かせるのです．\r\n'+
        '\r\n'+
        '以前は，300まで動かすにはたくさんのプログラムを書かなければならなかったのに比べると\r\n'+
        'かなり楽になりました．'
      ,
      'novice/xy.txt': 
        '*画像を縦や斜めにも動かしてみましょう\r\n'+
        '\r\n'+
        '今まで，猫の画像は横にしか動きませんでしたが，縦にも動かすことができます．\r\n'+
        '\r\n'+
        '<<code Cat y\r\n'+
        'y=50;\r\n'+
        'while (true) {\r\n'+
        '  y+=10;\r\n'+
        '  go(100,y);sleep();\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '実行してみると，猫の画像が上から下に移動します．\r\n'+
        '\r\n'+
        'さらに，横と縦に同時に動かすこともできます\r\n'+
        '\r\n'+
        '<<code Cat xy\r\n'+
        'y=50;\r\n'+
        'x=100;\r\n'+
        'while (true) {\r\n'+
        '  y+=10;\r\n'+
        '  x+=10;\r\n'+
        '  go(x,y);sleep();\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '実行してみると，猫の画像が左上から右下に斜めに移動します．\r\n'+
        '\r\n'+
        '[[@plistref xy]]のように，\r\n'+
        '変数は同時に2つ使うこともできます．\r\n'+
        '\r\n'+
        '変数を区別するために，それぞれの変数には名前が必要になります．ここでは x と y \r\n'+
        'という名前の変数を使っています．\r\n'+
        '\r\n'+
        '名前は，半角英字とアンダースコア(_)が使えます．2文字以上でも構いません．2文字目以降は数字も使うことができます．'
      ,
      'projectIndex.txt': '',
      'tonyu2/': '{"$mouseX, $mouseY.txt":{"lastUpdate":1397637145831},"$touches.txt":{"lastUpdate":1397637150059},"Actor.txt":{"lastUpdate":1397637313340},"all.txt":1397119076000,"allCrash.txt":{"lastUpdate":1397637204337},"api.txt":{"lastUpdate":1397637247201},"asyncResult.txt":1397119076000,"BaseActor.txt":{"lastUpdate":1397886729734},"Boot.txt":1397119075000,"classDef.txt":1397119076000,"console.txt":1397119076000,"cpats.txt":1397119076000,"crashTo.txt":1397119076000,"crashTo1.txt":1397119076000,"die.txt":1397119076000,"draw.txt":1397119076000,"extend.txt":1397119076000,"forin.txt":1397119076000,"frame.txt":1397119076000,"fs.txt":1397119076000,"getCrashRect.txt":1397119076000,"getkey.txt":1397119076000,"hide.txt":1397119076000,"ide.txt":1397119076000,"index.txt":{"lastUpdate":1397637218111},"isDead.txt":1397119076000,"kernel.txt":1397119076000,"lang.txt":1397119076000,"MathMod.txt":1397119075000,"options.txt":1397119076000,"play.txt":1397119076000,"playSE.txt":1397119076000,"print.txt":1397119076000,"resize.txt":{"lastUpdate":1397887473627},"rnd.txt":1397119076000,"ScaledCanvas.txt":{"lastUpdate":1397887467691},"setBGColor.txt":1397119076000,"show.txt":1397119076000,"sugar.txt":1397119076000,"super.txt":1397119076000,"TQuery.alive.txt":1397119075000,"TQuery.apply.txt":1397119075000,"TQuery.attr.txt":1397119075000,"TQuery.die.txt":1397119075000,"TQuery.find.txt":1397119075000,"TQuery.minmax.txt":1397119075000,"TQuery.txt":1397119075000,"update.txt":{"lastUpdate":1397637287043},"waitFor.txt":1397119076000,"waitmode.txt":1397119076000,"Map.txt":{"lastUpdate":1398750305570},"set.txt":{"lastUpdate":1398750394965},"get.txt":{"lastUpdate":1397974707264},"getAt.txt":{"lastUpdate":1397974686208},"scrollTo.txt":{"lastUpdate":1397975063505}}',
      'tonyu2/$mouseX, $mouseY.txt': 
        '[[api]]\n'+
        '\n'+
        '*$mouseX/$mouseY\n'+
        '\n'+
        'マウスカーソルまたはタッチパネルの0番目の指のx,y座標を返します．'
      ,
      'tonyu2/$touches.txt': 
        '[[api]]\n'+
        '\n'+
        '* $touches\n'+
        '\n'+
        'タッチパネルのタッチされた座標を返します．\n'+
        '\n'+
        '[[@cfrag $touches[i] ]]は，i番目（0が最初の指）の指がタッチした場所についての情報を格納するオブジェクトです．\n'+
        '\n'+
        '-[[@cfrag $touches[i].x]]と[[@cfrag $touches[i].y]]は，タッチされた場所のx,y座標です．\n'+
        '-[[@cfrag $touches[i].touched]]は，今その場所がタッチされていれば[[@cfrag true]]，タッチされていなければ[[@cfrag false]]を返します\n'+
        '\n'+
        '\n'+
        '\n'
      ,
      'tonyu2/Actor.txt': 
        '[[api]]\n'+
        '\n'+
        '*Actorクラス\n'+
        '\n'+
        '画面に表示されるオブジェクトの基本クラスです．\n'+
        '\n'+
        '継承：  [[BaseActor]]\n'+
        '\n'+
        '※ほとんどのメソッドはBaseActorに宣言されています．\n'+
        '\n'+
        '**コンストラクタ\n'+
        '\n'+
        '<<code\n'+
        '\\new(x,y,p)\n'+
        '>>\n'+
        '\n'+
        '引数の仕様は[[BaseActor]]の処理と同じです．\n'+
        'BaseActorと同様，mainメソッドの動作を行うよう[[スレッド>thread]]を作成します．\n'+
        '\n'+
        'また，コンストラクタが呼ばれた時点で自分自身を画面に表示します．\n'+
        '\n'+
        '**initSprite\n'+
        '\n'+
        '自分自身を画面に表示します．\n'+
        'コンストラクタから自動的に呼ばれるので，通常は呼び出す必要はありません．\n'+
        '\n'
      ,
      'tonyu2/all.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*allメソッド\r\n'+
        '\r\n'+
        '自分以外のすべてのオブジェクト（あるいは，指定されたクラスのオブジェクト）をあらわす[[TQuery]]オブジェクトを取得します．\r\n'+
        '\r\n'+
        '**書式1\r\n'+
        '\r\n'+
        '自分以外のすべてのオブジェクトをあらわすTQueryオブジェクトを返します．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'all()\r\n'+
        '>>\r\n'+
        '\r\n'+
        '[[@arg Class]]で指定されたクラスのオブジェクト（自分以外）をあらわすTQueryオブジェクトを返します．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'all(Class)\r\n'+
        '>>\r\n'+
        '\r\n'
      ,
      'tonyu2/allCrash.txt': 
        '[[BaseActor]]\n'+
        '\n'+
        '* allCrashメソッド\n'+
        '\n'+
        '指定されたクラスのオブジェクトのうち，自分と衝突しているすべてのオブジェクトをあらわす[[TQuery]]オブジェクトを返します．\n'+
        '\n'+
        '**書式\n'+
        '<<code\n'+
        'allCrash(Class)\n'+
        '>>\n'+
        '\n'+
        '[[@arg Class]]で指定されたクラスのオブジェクトのうち，自分と衝突しているすべてのオブジェクトをあらわす[[TQuery]]オブジェクトを返します．\n'+
        '\n'+
        '\n'+
        '*例\n'+
        '\n'+
        '<<code\n'+
        '    // このオブジェクトがTargetクラスのオブジェクトとぶつかっていたら，\n'+
        '    // そのオブジェクトを消す\n'+
        '    for (t in allCrash(Target)) {\n'+
        '        t.die();\n'+
        '    }\n'+
        '>>\n'+
        '\n'+
        '上の例は，次のように書くこともできます．\n'+
        '\n'+
        '<<code\n'+
        '    // このオブジェクトがTargetクラスのオブジェクトとぶつかっていたら，\n'+
        '    // そのオブジェクトを消す\n'+
        '    allCrash(Target).die();\n'+
        '>>\n'+
        '\n'
      ,
      'tonyu2/api.txt': 
        '[[index]]\n'+
        '\n'+
        '*標準クラス\n'+
        '\n'+
        'Tonyu2で最初から使えるクラス群です．[[ファイルシステム>fs]]上の/Tonyu/Kernel/ で定義されています．\n'+
        '\n'+
        '-[[Actor]]\n'+
        '-[[BaseActor]]\n'+
        '-[[Boot]]\n'+
        '-[[Sprites]]\n'+
        '-[[ScaledCanvas]]\n'+
        '-[[NoviceActor]]\n'+
        '-[[MathMod]]\n'+
        '-[[Map]]\n'+
        '\n'+
        '*グローバル変数\n'+
        '\n'+
        '-[[$Screen>ScaledCanvas]]\n'+
        '-[[$mouseX, $mouseY]]\n'+
        '-[[$touches]]\n'
      ,
      'tonyu2/asyncResult.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*asyncResultメソッド\r\n'+
        '\r\n'+
        'AsyncResultオブジェクトを作成します\r\n'+
        '\r\n'+
        'AsyncResultオブジェクトは，ajaxなどの「非同期で実行を行い，結果をコールバック関数で受け取る」形式のメソッド（非同期メソッド）を[[待機可能モード>waitmode]]で扱うためのオブジェクトです．\r\n'+
        '\r\n'+
        '**使い方\r\n'+
        '\r\n'+
        '※必ず待機可能モードで実行してください．\r\n'+
        '\r\n'+
        '-asyncResult()メソッドで，AsyncResultオブジェクトを作成します．これを[[@cfrag a]]とします．\r\n'+
        '-非同期メソッドを呼び出します． このとき，[[@cfrag a.receiver]] をコールバック関数として渡します．\r\n'+
        '-[[waitFor]]メソッドを呼び出します．非同期メソッドが結果を返すまで処理を待機します．\r\n'+
        '-非同期メソッドの結果が[[@cfrag a[n]]]に返されます．[[@cfrag a[n]]]はコールバック関数に渡された第n引数（0が最初の引数）です．\r\n'+
        '\r\n'+
        '**使用例\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'native $;\r\n'+
        '//asyncResultオブジェクトを作成\r\n'+
        'a=asyncResult();\r\n'+
        '//jqueryのgetメソッドを呼び出す．コールバック関数に a.receiverを指定\r\n'+
        '$.get("http://tonyuedit.appspot.com/edit/", a.receiver);\r\n'+
        '//getメソッドが終わるまで待つ\r\n'+
        'waitFor(a);\r\n'+
        '//結果がa[0]に返される\r\n'+
        'print(a[0]);\r\n'+
        '>>\r\n'
      ,
      'tonyu2/BaseActor.txt': 
        '[[api]]\n'+
        '\n'+
        '*BaseActor\n'+
        '\n'+
        '画面に表示されるオブジェクトの基本クラスです．実際には[[Actor]]を継承してクラスを作成してください．\n'+
        '\n'+
        '* コンストラクタ(1)\n'+
        '\n'+
        '<<code\n'+
        '\\new(params)\n'+
        '>>\n'+
        '\n'+
        'paramsにはオブジェクトを指定します．paramsの値をフィールドに書き込みます\n'+
        '\n'+
        '例： \n'+
        '<<code\n'+
        '// MyActorはBaseActorの子クラスとする\n'+
        'a=new MyActor{x:50,y:30, power:20, hp:50};\n'+
        '// a.x=50  a.y=30 a.power=20  a.hp=50 となる\n'+
        '>>\n'+
        '\n'+
        '* コンストラクタ(2)\n'+
        '\n'+
        '<<code\n'+
        '\\new(x,y,p)\n'+
        '>>\n'+
        '\n'+
        'x,y,pの値をフィールドに書き込みます\n'+
        '\n'+
        '* フィールド\n'+
        '\n'+
        '-x : オブジェクトのx座標をあらわします\n'+
        '-y : オブジェクトのy座標をあらわします\n'+
        '-p : 表示する[[キャラクタパターン]]の番号をあらわします \n'+
        '-text : textに値がセットされると，文字を表示します（キャラクタパターンは表示されなくなります）\n'+
        '--size : 文字の大きさをあらわします\n'+
        '--fillStyle : 文字の色などをあらわします(JavascriptのCanvasにおけるfillStyleと同じ書式です）\n'+
        '--align:  "center" "left" "right"のいずれかを指定します．xの値であらわされる横位置がそれぞれ文字の中央，左端，右端になるように表示します．\n'+
        '\n'+
        '* メソッド\n'+
        '\n'+
        '-[[update]]\n'+
        '-[[getkey]]\n'+
        '-[[crashTo]]\n'+
        '-[[crashTo1]]\n'+
        '-[[allCrash]]\n'+
        '-[[all]]\n'+
        '-[[getCrashRect]]\n'+
        '-[[die]]\n'+
        '-[[isDead]] \n'+
        '-[[hide]]\n'+
        '-[[show]]\n'+
        '-[[rnd]]\n'+
        '-[[draw]]\n'+
        '-[[extend]]\n'+
        '-[[print]]\n'+
        '-[[asyncResult]]\n'+
        '-[[waitFor]]\n'+
        '-[[play]]\n'+
        '-[[playSE]]\n'+
        '-[[currentThreadGroup]]\n'+
        '-[[detectShape]]\n'+
        '-[[hitTo]]\n'+
        '-[[watchHit]]\n'+
        '-[[MathMod]]モジュールクラスがもつメソッド\n'
      ,
      'tonyu2/Boot.txt': 
        '[[api]]\r\n'+
        '\r\n'+
        '*Bootクラス\r\n'+
        '\r\n'+
        'プログラム実行時に最初に起動するクラスです．次のような動作を行います．\r\n'+
        'これらの処理は実行時に自動的に行われるので，通常は呼び出す必要はありません．\r\n'+
        '\r\n'+
        '-画面の初期化\r\n'+
        '-マウス・タッチイベントの初期化\r\n'+
        '-[[スレッド]]の初期化\r\n'+
        '-Mainクラスのオブジェクトの配置\r\n'+
        '-メインループ\r\n'+
        '--スレッドの実行\r\n'+
        '--描画\r\n'+
        '\r\n'
      ,
      'tonyu2/classDef.txt': 
        '[[lang]]\r\n'+
        '\r\n'+
        '*クラス定義\r\n'+
        '\r\n'+
        'Tonyu2では，1つの[[ファイル>fs]]に1つのクラスを定義します．\r\n'+
        '\r\n'+
        '-ファイル名は <<クラス名>>.tonyu という形式になります．\r\n'+
        '-- 例えば，Hello.tonyu という名前のファイルは，Hello という名前のクラスを定義します．\r\n'+
        '-クラスを定義するための構文（例えば，Javaの[[@cfrag class クラス名 {...  }]]など）はありません．\r\n'+
        '- ファイルには，次のいずれかを複数記述できます．\r\n'+
        '--継承宣言\r\n'+
        '--組み込み宣言\r\n'+
        '--native宣言\r\n'+
        '--mainメソッドの処理内容\r\n'+
        '--非mainメソッドの定義\r\n'+
        '- 定義された(Tonyu2の)クラスは，Javascriptのいわゆる「クラス」(function+prototypeによるメソッド定義）として機能します．\r\n'+
        '\r\n'+
        '**継承宣言\r\n'+
        '\r\n'+
        'このクラスの親クラスを設定します．ファイルの先頭に次のように宣言します\r\n'+
        '\r\n'+
        '<<code 継承宣言の書式\r\n'+
        'extends 親クラス名;\r\n'+
        '>>\r\n'+
        '\r\n'+
        '-継承宣言を省略すると，[[プロジェクト設定>options]]によって設定されている親クラスを自動的に継承します．\r\n'+
        '-親クラス名 に [[@cfrag null]]を設定すると，親クラスがないクラスになります．\r\n'+
        '-継承は，JavaScriptの一般的な継承の方法（このクラスを表す関数オブジェクトのprototypeが，親クラスのオブジェクトになる）で行われます．\r\n'+
        '\r\n'+
        '**組み込み宣言\r\n'+
        '\r\n'+
        'このクラスに組み込むクラス（モジュールクラス）を設定します．ファイルの先頭，または継承宣言続いて次のように宣言します\r\n'+
        '\r\n'+
        '<<code 継承宣言の書式\r\n'+
        'includes モジュールクラス名[, モジュールクラス名...];\r\n'+
        '>>\r\n'+
        '\r\n'+
        '-このクラスでは，組み込んだモジュールクラスがもつメソッドを利用できます．\r\n'+
        '-組み込みは継承とは異なり，複数のクラスを組み込むことができます\r\n'+
        '-モジュールクラスの実体は通常のクラスと同じ方法で作成します．\r\n'+
        '-モジュールクラスが他のモジュールクラスを組み込んでいる場合，組み込んだ先のクラスでもそれらのモジュールクラスのメソッドが組み込まれます．\r\n'+
        '-モジュールクラスが他のクラスを継承していても，組み込んだ先のクラスではその親クラスのメソッドは組み込まれません．\r\n'+
        '-組み込みは，モジュールクラスがもつメソッドの一覧を，このクラスの関数オブジェクトのprototypeオブジェクトに追記する方式で行われます．継承とは異なり，[[@cfrag instanceof]]演算子によって検査されるオブジェクトのクラスが，特定のモジュールクラスを組み込んでいるかどうかは判定できません．\r\n'+
        '\r\n'+
        '**native宣言\r\n'+
        '\r\n'+
        'native宣言は，Tonyu2のプログラムからJavascriptのネイティブオブジェクトにアクセスするために用います．ファイル中で次のように宣言します．\r\n'+
        '\r\n'+
        '<<code native宣言の書式\r\n'+
        'native 変数名;\r\n'+
        '>>\r\n'+
        '\r\n'+
        '- 指定された変数名を，このファイル中ではJavascriptのトップレベルスコープ（一般的にはwindowオブジェクト）に定義されている変数の値として扱います．\r\n'+
        '- 親クラスに書いてあるnative宣言は子クラスには適用されません．必要に応じて子クラスにも同じnative宣言を書く必要があります．\r\n'+
        '\r\n'+
        '**mainメソッドの処理内容\r\n'+
        '\r\n'+
        'mainメソッドは，mainという名前をもつメソッドです．[[Actor]]クラスなどでは，オブジェクトが出現してから停止するまでの動作を記述するのに用いられます．\r\n'+
        '\r\n'+
        'ファイルのトップレベル（メソッド定義に囲まれていない部分）に書かれた文はmainメソッドの内容として定義されます．\r\n'+
        '\r\n'+
        'mainメソッドは引数を受け取ることはできません．\r\n'+
        '\r\n'+
        '**非mainメソッドの定義\r\n'+
        '\r\n'+
        '名前がmainでないメソッドは非mainメソッドです．\r\n'+
        '\r\n'+
        'ファイルのトップレベルにおいて次の形式で定義します．\r\n'+
        '\r\n'+
        '<<code メソッド定義 methodef\r\n'+
        'function メソッド名(引数リスト) {\r\n'+
        '   処理内容\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '※function の代わりに \\ が使用可能です（[[拡張構文>sugar]]参照)\r\n'+
        '\r\n'+
        '*変数の種類\r\n'+
        '\r\n'+
        '-引数\r\n'+
        '--１つのメソッドに渡される値です．メソッド宣言の引数リストに記述されます．１回のメソッド呼び出しが終わると破棄されます．\r\n'+
        '-ローカル変数\r\n'+
        '--メソッド宣言の処理中でvar で宣言されます．１回のメソッド呼び出しが終わると破棄されます．\r\n'+
        '-グローバル変数\r\n'+
        '--名前が$で始まる変数はグローバル変数です．すべてのTonyu2オブジェクトから直接参照できます．\r\n'+
        '--Javascriptからは[[@cfrag Tonyu.globals.グローバル変数名]]で参照できます．\r\n'+
        '-クラス変数\r\n'+
        '--現在のプロジェクトおよび[[標準ライブラリ>api]]で定義されているクラス名と同じ名前の変数はクラス変数です．そのクラスをあらわす関数オブジェクトを参照します．\r\n'+
        '--Javascriptからは[[@cfrag Tonyu.classes.クラス変数名]]で参照できます．\r\n'+
        '-native変数\r\n'+
        '--native宣言によって宣言された名前の変数です．Javascriptのトップレベルスコープにおける同名の変数を参照します．\r\n'+
        '-フィールド\r\n'+
        '--そのクラスのオブジェクトがもつ値です．上のどれにもあてはまらない変数はフィールドとして解釈されます．\r\n'+
        '--Javascriptではいわゆる[[@cfrag this.x]]という形式で参照されるものです．Tonyu2でもこの方式でも参照できます．\r\n'+
        '\r\n'+
        '*例\r\n'+
        '\r\n'+
        '<<code MyClass.tonyu example\r\n'+
        'extends Actor;\r\n'+
        'native alert;\r\n'+
        '// main関数\r\n'+
        'x=3;\r\n'+
        'rate=5;\r\n'+
        'y=mult(x);\r\n'+
        'alert(y); // 15\r\n'+
        '// main関数終わり\r\n'+
        '\\mult(a) {\r\n'+
        '  var res=a*rate;\r\n'+
        '  return res;\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '-クラス名はMyClass\r\n'+
        '-親クラスはActor\r\n'+
        '-Javascriptの [[@cfrag alert]] 関数を利用する\r\n'+
        '-[[@cfrag x,rate,y]] はフィールド\r\n'+
        '-multメソッドを定義\r\n'+
        '-- [[@cfrag a]]は引数，[[@cfrag res]]はローカル変数，[[@cfrag rate]]はフィールド'
      ,
      'tonyu2/console.txt': 
        '[[print]]\r\n'+
        '\r\n'+
        '*コンソール\r\n'+
        '\r\n'+
        'Tonyu2のコンソールは，JavaScriptのコンソールと同じです．次のキーで表示できます．\r\n'+
        '\r\n'+
        '-Chrome/Firefox: Ctrl+Shift+J\r\n'+
        '-IE: F12\r\n'+
        '\r\n'
      ,
      'tonyu2/cpats.txt': 
        '[[ide]]\r\n'+
        '\r\n'+
        '*画像リスト\r\n'+
        '\r\n'+
        'メニュー階層： ウィンドウ → 画像リスト\r\n'+
        '\r\n'+
        'オブジェクトに用いるキャラクタパターン（画像）を追加します．\r\n'+
        '\r\n'+
        '一番下の「追加」ボタンを押し，各項目を設定します．\r\n'+
        '\r\n'+
        '-名前\r\n'+
        '--この画像につける名前です．名前は$ で始めます．先頭のキャラクタパターンの番号を指す数値が同名の[[グローバル変数]]に入ります．\r\n'+
        '--通常は，URLを指定すると自動的に設定されます．\r\n'+
        '-URL  \r\n'+
        '-- 画像のURLを記述します．はpngまたはgifを指定してください．\r\n'+
        '-- URL欄にローカルの画像ファイルをドラッグ＆ドロップすると，その画像をあらわすURL（Base64エンコーディング）が自動的に設定されます．\r\n'+
        '-パターン解析方法\r\n'+
        '-- Tonyu1フォーマット ： Tonyu1で利用されている画像をそのまま使う場合はこちらを選びます\r\n'+
        '--- URL欄に他ドメインの画像ファイルを指定する場合，「Tonyu1フォーマット」は使えません．\r\n'+
        '--  固定サイズ：   画像内を決められた大きさ（例えば32x32）で区切って描かれた画像の場合，こちらを選びます．\r\n'+
        '\r\n'+
        'キャラクタパターンには，それぞれキャラクタパターン番号が割り振られます．\r\n'+
        '変数pにキャラクタパターン番号を代入することでそのキャラクタパターンを表示できます．\r\n'+
        '\r\n'+
        ' 例えば， $pat_chr という名前の画像ファイルの中の，4番目のキャラクタパターン（一番最初は0番目とする）を指定するには\r\n'+
        '<<code\r\n'+
        '    p=$pat_chr + 4; \r\n'+
        '>>\r\n'+
        '    とします．\r\n'+
        '\r\n'+
        '*例\r\n'+
        '\r\n'+
        '※ $pat_ballsという名前の画像が追加されているものとします．\r\n'+
        '<<code\r\n'+
        't=0;\r\n'+
        'while(true) {\r\n'+
        '    if (t%5==0) {\r\n'+
        '        // 新しく作るBall オブジェクトの変数pに，\r\n'+
        '        // $pat_balls の0 - 15番目のキャラクタパターンをランダムに設定\r\n'+
        '        new Ball{x:rnd($screenWidth),y:0, p:$pat_balls+rnd(16)};\r\n'+
        '    }\r\n'+
        '    t++;\r\n'+
        '    update();\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'
      ,
      'tonyu2/crashTo.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*crashToメソッド\r\n'+
        '\r\n'+
        '他のオブジェクトと衝突しているかを判定します．\r\n'+
        '\r\n'+
        '**書式1\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'crashTo(obj)\r\n'+
        '>>\r\n'+
        '\r\n'+
        'このオブジェクトが[[@arg obj]]と衝突していれば[[@cfrag true]]，そうでなければ[[@cfrag false]]を返します．\r\n'+
        '\r\n'+
        '*書式2\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'crashTo(Class)\r\n'+
        '>>\r\n'+
        '\r\n'+
        'このオブジェクトが[[@arg Class]]で指定されるクラスのオブジェクトのうちどれかと衝突していれば，そのうちどれか1つのオブジェクトを返します．そうでなければ[[@cfrag null]]を返します\r\n'+
        '\r\n'+
        '*例\r\n'+
        '\r\n'+
        '<<code\r\n'+
        '// $playerというオブジェクトにぶつかっていたら，$playerを消します\r\n'+
        'if (crashTo($player)) {\r\n'+
        '   $player.die();\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '*参考\r\n'+
        '\r\n'+
        '-[[crashTo1]]\r\n'+
        '-[[allCrash]]\r\n'+
        '-[[getCrashRect]]\r\n'
      ,
      'tonyu2/crashTo1.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*crashTo1メソッド\r\n'+
        '\r\n'+
        '[[crashTo]]メソッドと同様，衝突判定を行います．引数にはオブジェクトのみを指定ことができ，クラスは指定できません．引数の種類判定がない分，[[crashTo]]より若干処理速度が速くなります\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'crashTo1(obj)\r\n'+
        '>>\r\n'+
        '\r\n'+
        'このオブジェクトが[[@arg obj]]と衝突していれば[[@cfrag true]]，そうでなければ[[@cfrag false]]を返します．\r\n'
      ,
      'tonyu2/die.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*dieメソッド\r\n'+
        '\r\n'+
        'オブジェクトを画面から消去し，処理を中断します．\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'die();\r\n'+
        '>>\r\n'
      ,
      'tonyu2/draw.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*drawメソッド\r\n'+
        '\r\n'+
        'オブジェクトが描画される時に自動的に呼び出されます．ユーザのプログラムからは通常呼び出す必要はありません．\r\n'+
        '\r\n'+
        '*書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'draw(ctx)\r\n'+
        '>>\r\n'+
        '\r\n'+
        'ctxに，描画先のcanvasオブジェクトのコンテキスト(canvas.getContext("2d")で取得)を渡します．\r\n'+
        '\r\n'+
        '*オーバーライド\r\n'+
        '\r\n'+
        'drawメソッドをオーバーライドすると，オブジェクトの表示方法をカスタマイズできます．\r\n'+
        '\r\n'+
        '例\r\n'+
        '<<code\r\n'+
        '\\draw(ctx) {\r\n'+
        '   // 赤い四角形を表示\r\n'+
        '   ctx.fillStyle="red";\r\n'+
        '   ctx.fillRect(x,y,20,20);\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/extend.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*extendメソッド\r\n'+
        '\r\n'+
        'オブジェクトを受け取り，それらの属性値を書き込みます．\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '<<code\r\n'+
        'extend(obj)\r\n'+
        '>>\r\n'+
        '[[@arg obj]]（通常はオブジェクトリテラルを用いる）のもつ値をすべて自分自身に書き込みます．\r\n'+
        '\r\n'+
        '\r\n'+
        '**例\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'extend{x:5, y:10, score:20};\r\n'+
        '// x=5 y=10 score=20 になる\r\n'+
        'print (x);\r\n'+
        'print (y);\r\n'+
        'print (score);\r\n'+
        '>>\r\n'+
        '\r\n'
      ,
      'tonyu2/forin.txt': 
        '[[lang]]\r\n'+
        '\r\n'+
        '* for(..in..)の動作\r\n'+
        '\r\n'+
        '[[@cfrag for (e in set)]] はJavaScriptとは動作が異なります．\r\n'+
        '\r\n'+
        '-setが配列または[[TQuery]]オブジェクトの場合，eには（添字ではなく）値を入れながら繰り返します．\r\n'+
        '-setがオブジェクトの場合，eには(キーではなく）値を入れながら繰り返します．\r\n'+
        '\r\n'+
        'また，[[@cfrag for (k,v in set)]]という構文があります． \r\n'+
        '\r\n'+
        '-setがオブジェクトの場合，kにキー，vに値を入れながら繰り返します．\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/frame.txt': 
        '[[update]]\r\n'+
        '\r\n'+
        '*フレーム\r\n'+
        '\r\n'+
        'フレームとは，ゲームの画面1枚が表示されるまでの動作を指します．\r\n'+
        '1つのフレーム（1フレーム）の動作は次の構成されます．\r\n'+
        '\r\n'+
        '-各オブジェクトの移動\r\n'+
        '-各オブジェクトの表示\r\n'+
        '\r\n'+
        'ゲーム全体は，フレームが1秒間に数十回(30～60程度．この数値をfpsと呼びます）動作して進行していきます．\r\n'+
        '\r\n'+
        'Tonyu2では，各オブジェクトに[[スレッド>thread]]が割り当てられており，1フレームごとにスレッドが少しずつ実行されていきます．\r\n'+
        '\r\n'+
        'スレッドの実行中に[[update]]メソッドが呼ばれるとそのフレームでの処理を終了させ，他のオブジェクトのスレッドに動作を譲ります．\r\n'+
        '\r\n'
      ,
      'tonyu2/fs.txt': 
        '[[index]]\r\n'+
        '*ファイルシステム\r\n'+
        '\r\n'+
        '-Tonyu2 は，WebブラウザのJavascriptだけで動作するように設計されています．\r\n'+
        '-プログラムなどを保存・読み出しするために，サーバとの通信は行わず，localStorage を用いています．\r\n'+
        '-localStorageでは，単純なキー/値の格納・読み出しの仕組みだけが提供されていますが，Tonyu2は，localStorage上でディレクトリ構造を再現するためのライブラリ(fs.js)を搭載しています．\r\n'+
        '--詳細は[[fs.js>https://github.com/hoge1e3/Tonyu2/blob/master/js/fs/fs.js]] のプログラムを参照してください．\r\n'+
        '--ファイルを直接操作するための[[シェル>sh]]も用意されています．\r\n'+
        '\r\n'+
        '*注意点\r\n'+
        '\r\n'+
        'プログラムがlocalStorageに保存されるため，他のPCや他のWebブラウザではプログラムは共有されません．\r\n'+
        '\r\n'+
        '今のところ，他のWebブラウザ等とプログラムを送受信するには，[[jsdo.itへのインポート・エクスポート>jsdoit]]を用いてください．\r\n'+
        '\r\n'
      ,
      'tonyu2/getCrashRect.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*getCrashRect\r\n'+
        '\r\n'+
        '当たり判定に使う矩形領域を返します．\r\n'+
        '[[crashTo]]，[[crashTo1]]，[[allCrash]]で用いられます\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'getCrashRect()\r\n'+
        '>>\r\n'+
        '\r\n'+
        'このオブジェクトの当たり判定に使う矩形領域を返します．\r\n'+
        '\r\n'+
        '戻り値を[[@arg r]]とすると：\r\n'+
        '-([[@arg r]].x,[[@arg r]].y)が矩形領域の中心位置です（左上ではありません）\r\n'+
        '-[[@arg r]].widthと[[@arg r]].heightが，矩形領域の幅と高さです．\r\n'+
        '\r\n'+
        '**オーバライド\r\n'+
        '\r\n'+
        'デフォルトのgetCrashRectは，画像の大きさを基準に当たり判定を計算しますが，\r\n'+
        'getCrashRectをオーバーライドすると，当たり判定の大きさを変更できます．\r\n'+
        '\r\n'+
        '[[@plistref chg]]の例では，当たり判定の大きさを5*5に設定しています．\r\n'+
        '\r\n'+
        '<<code ChangeCrashRect.tonyu chg\r\n'+
        '\\getCrashRect() {\r\n'+
        '   return {x,y,width:5, height:5};\r\n'+
        '}\r\n'+
        '>>\r\n'
      ,
      'tonyu2/getkey.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*getkeyメソッド\r\n'+
        '\r\n'+
        'キーの押下状態を取得します．\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'getkey(code);\r\n'+
        '>>\r\n'+
        '\r\n'+
        '-code に調べたいキーのキーコード（数値）またはキーの名前（文字列）を指定します．\r\n'+
        '-キーの状態に応じて次の数値を返します\r\n'+
        '-- 0: 押されていない\r\n'+
        '-- 1: 押されたばかり\r\n'+
        '-- 2以上:  押しっぱなしになっている（押されて続けているフレーム数）\r\n'+
        '\r\n'+
        '* キーの名前とキーコード一覧\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'left: 37 , up:38 , right: 39, down:40, \r\n'+
        'space:32, enter:13, shift:16, ctrl:17, alt:18, \r\n'+
        'A-Z: 65-90,  0-9: 48-57,  mouseleft: 1\r\n'+
        '>>\r\n'+
        '\r\n'
      ,
      'tonyu2/hide.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*hideメソッド\r\n'+
        '\r\n'+
        'オブジェクトを非表示にします．\r\n'+
        '[[die]]メソッドと異なり，動作は続きます．再び表示するときは[[show]]メソッドを用います．\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'hide();\r\n'+
        '>>\r\n'+
        '\r\n'
      ,
      'tonyu2/ide.txt': 
        '[[index]]\r\n'+
        '\r\n'+
        '*プロジェクト選択画面(index.html)\r\n'+
        '\r\n'+
        '-「新規」ボタンでプロジェクトを作成します．作成すると自動的にプロジェクト編集画面に移動します．\r\n'+
        '-既存のプロジェクトを選択して，プロジェクト編集画面に移動します．\r\n'+
        '\r\n'+
        '*プロジェクト編集画面(project.html)\r\n'+
        '\r\n'+
        '**メニュー\r\n'+
        '\r\n'+
        '-Home\r\n'+
        '-- プロジェクト選択画面に戻ります．\r\n'+
        '-ファイル\r\n'+
        '-- 新規作成\r\n'+
        '---新しくTonyu2のクラス（=ファイル）を作成します．\r\n'+
        '-- 名前変更\r\n'+
        '---現在開いているクラスの名前を変更します．\r\n'+
        '-- 削除\r\n'+
        '---現在開いているクラスを削除します．\r\n'+
        '--初期状態に戻す\r\n'+
        '---現在開いているプロジェクトが[[サンプルプロジェクト>samples]]の場合，プロジェクトを初期状態に戻します．\r\n'+
        '--このプロジェクト自身を削除\r\n'+
        '--- プロジェクト全体を削除します．\r\n'+
        '\r\n'+
        '-実行\r\n'+
        '-- ～を実行\r\n'+
        '--- 指定されたクラスのオブジェクトを1つ作成し，実行を始めます．\r\n'+
        '--停止\r\n'+
        '--- プログラムを停止させます．\r\n'+
        '-ウィンドウ\r\n'+
        '--[[画像リスト>cpats]]\r\n'+
        '--[[プロジェクト オプション>options]]\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/index.txt': 
        '*Tonyu2 リファレンス\n'+
        '\n'+
        '-[[言語仕様>lang]]\n'+
        '-[[標準ライブラリ>api]]\n'+
        '-[[開発環境>ide]]\n'+
        '-[[ファイルシステム>fs]]\n'+
        '\n'+
        '-[[トップへ>../index]]\n'
      ,
      'tonyu2/isDead.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*isDeadメソッド\r\n'+
        '\r\n'+
        'オブジェクトに[[die]]メソッドが呼ばれたかどうかを返します\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'b=isDead();\r\n'+
        '>>\r\n'+
        '\r\n'+
        'このオブジェクトにdieメソッドが呼ばれていれば，[[@arg b]]に[[@cfrag true]]を，そうでなければ[[@cfrag false]]を返します．\r\n'+
        '\r\n'
      ,
      'tonyu2/kernel.txt': 
        '[[api]]\r\n'+
        '\r\n'+
        '*カーネル\r\n'+
        '\r\n'+
        'Tonyu2の標準ライブラリです．\r\n'+
        '[[ファイルシステム>fs]]上の/Tonyu/Kernel/ で定義されています．'
      ,
      'tonyu2/lang.txt': 
        '[[index]]\r\n'+
        '\r\n'+
        '*言語仕様\r\n'+
        '\r\n'+
        '-Tonyu2は，そのプログラムをJavaScriptに変換してから実行します．\r\n'+
        '-Tonyu2で用いられる値やオブジェクトはJavaScriptの値やオブジェクトそのものです．そのため，Tonyu2からJavaScriptのオブジェクトを操作したり，JavaScriptからTonyu2のオブジェクトを操作したりできます．\r\n'+
        '\r\n'+
        'Tonyu2 の言語仕様は，基本的にはJavaScriptの言語仕様に準じますが，JavaScriptとは次のような違いがあります．\r\n'+
        '\r\n'+
        '-[[ファイル>fs]]全体が１つの[[クラス定義>classDef]]になります．\r\n'+
        '-親クラスのメソッド・コンストラクタ呼び出しは[[super]]を用います\r\n'+
        '-「待機可能モード」「待機不能モード」という2つの[[動作モード>waitmode]]があります．\r\n'+
        '-[[拡張構文>sugar]]があります\r\n'+
        '-[[for (.. in ..)>forin]]の挙動が違います\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/MathMod.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*MathModモジュールクラス\r\n'+
        '\r\n'+
        '数学関数を提供するモジュールクラスです．\r\n'+
        '\r\n'+
        '-sin(d), cos(d)\r\n'+
        '-- 角度d（度数法）の正弦，余弦を返します\r\n'+
        '-rad(d)\r\n'+
        '-- 角度d（度数法）をラジアンに変換します\r\n'+
        '-deg(r)\r\n'+
        '-- 角度r（ラジアン）を度数法に変換します\r\n'+
        '-atan2(x,y)\r\n'+
        '-- 線分(0,0)-(x,y)とx軸のなす角を度数法で返します\r\n'+
        '-abs(v)\r\n'+
        '-- 絶対値 |v| を返します\r\n'+
        '-floor(x)\r\n'+
        '-- xを超えない最大の整数を返します\r\n'+
        '-sqrt(t)\r\n'+
        '-- 平方根 √t を返します\r\n'+
        '-dist(dx,dy)\r\n'+
        '-- 線分(0,0)-(dx,dy)の長さを返します\r\n'+
        '-dist(obj)\r\n'+
        '-- オブジェクト obj とこのオブジェクト間の距離を返します\r\n'+
        '-angleDiff(a,b)\r\n'+
        '-- 角度a-b と同じ向きを持つ、-180 から 179 までの角度を返します．\r\n'+
        '-- angleDiff(a,b)の値が正のとき、a から b に 至るには 左回り（aを減らす)が近く、負のときは右回り(aを増やす) のほうが近くなります．\r\n'+
        '\r\n'
      ,
      'tonyu2/options.txt': 
        '[[ide]]\r\n'+
        '\r\n'+
        '*プロジェクト オプション\r\n'+
        '\r\n'+
        'プロジェクトオプションは，通常は操作する必要はありません．主にTonyu2自身の開発時に設定を変える場合に用います．\r\n'+
        '\r\n'+
        '-デフォルトの親クラス\r\n'+
        '-- [[クラスの定義>classDef]]において， extends を省略したときに継承される親クラスです．通常は[[Actor]]に設定します．\r\n'+
        '-実行\r\n'+
        '-- Mainクラス\r\n'+
        '--- 実行するときに最初に作成されるオブジェクトのクラスです．通常，「実行」メニューで最後に選ばれたクラスになっています．\r\n'+
        '-- Bootクラス\r\n'+
        '--- Mainクラスより前に，プログラム全体の初期化を行うクラスです．通常は[[Boot]]クラスです．ここに別のクラスを指定することで，初期化方法をカスタマイズできます．\r\n'+
        '-Kernelの開発を行う\r\n'+
        '-- 通常，ファイル →  新規 を選び，クラス名を入力したときに，それが[[標準ライブラリ>api]]に存在するクラス名と同名である場合は作成ができません\r\n'+
        '-- このチェックをonにすることで標準ライブラリと同名のクラスを作成できます．さらに，新規作成時に標準ライブラリにある同名のクラスの内容が現在のプロジェクトフォルダにコピーされます．\r\n'+
        '-- 標準ライブラリと同名のクラスの内容を変更することで，標準ライブラリの挙動を変更できます．ただし，変更が有効なのはこのプロジェクトのみです．\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/play.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*playメソッド\r\n'+
        '\r\n'+
        '音楽の演奏または停止を行います．\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'play(mml1, mml2, ...)\r\n'+
        '>>\r\n'+
        '\r\n'+
        'mml に，音楽を演奏するための文字列を指定します．\r\n'+
        '書き方は，[[timbre.jsのMML>http://mohayonao.github.io/timbre.js/ja/mml.html]]\r\n'+
        'を参照してください．\r\n'+
        '\r\n'+
        'playメソッドを連続して実行すると，\r\n'+
        '最初に実行したplayメソッドの音楽の演奏が終わってから，\r\n'+
        '次の音楽が演奏されます．．\r\n'+
        '\r\n'+
        '例：\r\n'+
        '\r\n'+
        '<<code\r\n'+
        '// ドレミとミファソの和音を演奏し，それが終わったら\r\n'+
        'play("cde","efg");\r\n'+
        '// ミレドとソファミの和音を演奏する\r\n'+
        'play("edc","gfe");\r\n'+
        '>>\r\n'+
        '\r\n'+
        '**音楽の停止\r\n'+
        '\r\n'+
        '自分が鳴らしている音楽を止めるには次のようにします．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'play().stop()\r\n'+
        '>>\r\n'+
        '\r\n'+
        'あるいは，[[die]]メソッドを呼び出すと停止します．\r\n'+
        '\r\n'+
        '注意：音楽は，それぞれのオブジェクトが独立に鳴らすことができます．\r\n'+
        'そのため，音楽を鳴らしているオブジェクトを指定して止める必要があります．\r\n'+
        '例えば，自分以外のオブジェクト[[@cfrag a]]が演奏中であれば，次のようにします．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'a.play().stop()\r\n'+
        '>>\r\n'+
        'あるいは\r\n'+
        '<<code\r\n'+
        'a.die()\r\n'+
        '>>\r\n'+
        '\r\n'+
        '\r\n'+
        '**参照\r\n'+
        '\r\n'+
        '[[playSE]]\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/playSE.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*playSEメソッド\r\n'+
        '\r\n'+
        '音楽を演奏しますが，[[play]]メソッドと異なり，演奏が終了するのを待ちません．\r\n'+
        '\r\n'+
        '書式はplayメソッドと同じです．\r\n'+
        '\r\n'+
        '**参照\r\n'+
        '\r\n'+
        '[[play]]メソッド\r\n'
      ,
      'tonyu2/print.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*printメソッド\r\n'+
        '\r\n'+
        '[[コンソール>console]]に値を表示します．(JavaScriptのconsole.logと同じ)\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'print(value...);\r\n'+
        '>>\r\n'+
        'value（複数指定可）の値をコンソールに表示します．\r\n'+
        '\r\n'
      ,
      'tonyu2/resize.txt': 
        '[[ScaledCanvas]]\n'+
        '\n'+
        '*$Screen.resizeメソッド\n'+
        '\n'+
        'ゲーム画面のサイズを変更します．\n'+
        '\n'+
        '<<code\n'+
        '$Screen.resize(w,h);\n'+
        '>>\n'+
        '\n'+
        'wとh に画面幅と高さを指定します．\n'+
        '\n'+
        '\n'+
        '*例\n'+
        '\n'+
        '<<code\n'+
        '$Screen.resize(500,300);\n'+
        '>>\n'+
        '\n'+
        '\n'+
        '※実際の画面（Canvas）の大きさが変わるのではなく，画面内に表示される仮想画面の大きさが変わります．\n'
      ,
      'tonyu2/rnd.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*rndメソッド\r\n'+
        '\r\n'+
        '乱数を返します\r\n'+
        '\r\n'+
        '*書式1\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'rnd()\r\n'+
        '>>\r\n'+
        '\r\n'+
        '0以上1未満の実数乱数を返します\r\n'+
        '\r\n'+
        '*書式2\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'rnd(n)\r\n'+
        '>>\r\n'+
        '\r\n'+
        '0以上n未満の整数乱数を返します\r\n'+
        '\r\n'+
        '*ヒント\r\n'+
        '\r\n'+
        'a以上b未満の実数乱数を返すには，次の式を用います．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'rnd()*(b-a)+a\r\n'+
        '>>\r\n'+
        '\r\n'+
        'a以上b未満の整数乱数を返すには，次の式を用います．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'rnd(b-a)+a\r\n'+
        '>>\r\n'+
        '\r\n'
      ,
      'tonyu2/ScaledCanvas.txt': 
        '[[api]]\n'+
        '\n'+
        '*ScaledCanvasクラス\n'+
        '\n'+
        'ゲーム画面をあらわすオブジェクトです．[[Boot]]クラスで[[@cfrag $Screen]] というオブジェクトで初期化されます．\n'+
        '\n'+
        '**メソッド\n'+
        '\n'+
        '-[[resize]]\n'+
        '-[[setBGColor]]\n'+
        '\n'+
        ' '
      ,
      'tonyu2/setBGColor.txt': 
        '[[ScaledCanvas]]\r\n'+
        '\r\n'+
        '*$Screen.setBGColor メソッド\r\n'+
        '\r\n'+
        '画面の背景色を変更します．\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        '$Screen.setBGColor(c)\r\n'+
        '>>\r\n'+
        '\r\n'+
        '[[@arg c]]は，画面の背景色をあらわす文字列（HTMLの色指定方法に準ずる）を指定します．\r\n'+
        '\r\n'+
        '**例\r\n'+
        '\r\n'+
        '<<code\r\n'+
        '$Screen.setBGColor("black");\r\n'+
        '>>\r\n'+
        '\r\n'+
        '<<code\r\n'+
        '$Screen.setBGColor("#ffeedd");\r\n'+
        '>>\r\n'+
        '\r\n'+
        '<<code\r\n'+
        '$Screen.setBGColor("rgb(200,100,50)");\r\n'+
        '>>'
      ,
      'tonyu2/show.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*showメソッド\r\n'+
        '\r\n'+
        'オブジェクトを表示します．\r\n'+
        '\r\n'+
        '*書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'show(x,y,p)\r\n'+
        '>>\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/sugar.txt': 
        '[[lang]]\r\n'+
        '\r\n'+
        '*拡張構文\r\n'+
        '\r\n'+
        '** \\ による関数・メソッド定義\r\n'+
        '\r\n'+
        '-[[@cfrag function]] と書く代わりに [[@cfrag \\]] と書くことができます．[[@plistref fun]]と[[@plistref back]]は等価です．\r\n'+
        '\r\n'+
        '<<code functionでメソッド定義 fun\r\n'+
        'function a(x,y) {\r\n'+
        '   return x+y;\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '<<code \\でメソッド定義 back\r\n'+
        '\\a(x,y) {\r\n'+
        '   return x+y;\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '-無名関数にも使えます．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'onComplete=\\(evt) { alert("Complete") };\r\n'+
        '>>\r\n'+
        '\r\n'+
        '**引数渡しにおける()の省略\r\n'+
        '\r\n'+
        '関数・メソッド呼び出し時に，引数がオブジェクトリテラルまたは関数リテラルのみで構成される場合，()を省略できます．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        '$("a").attr{target:"_top"};\r\n'+
        '// $("a").attr({target:"_top"}); と等価\r\n'+
        '\r\n'+
        '$("a").click \\(e) { alert("click"); };\r\n'+
        '// $("a").click(\\(e) { alert("click"); }); と等価\r\n'+
        '\r\n'+
        '>>\r\n'+
        '\r\n'+
        'また，通常の引数リスト＋オブジェクトリテラルまたは関数リテラルのみで構成される引数リストを組み合わせて書くこともできます\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'sh.cp("src.txt","dst.txt") {v:true};\r\n'+
        '// sh.cp("src.txt","dst.txt",{v:true}); と等価\r\n'+
        '>>\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '**オブジェクトリテラルの省略記法\r\n'+
        '\r\n'+
        '[[@cfrag {x:x}]]のように，属性名と値が同じ場合，[[@cfrag {x}]]と記述できます．\r\n'+
        '\r\n'
      ,
      'tonyu2/super.txt': 
        '[[lang]]\r\n'+
        '\r\n'+
        '*super\r\n'+
        '\r\n'+
        '**親クラスのコンストラクタを呼ぶ\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'super(引数)\r\n'+
        '>>\r\n'+
        '\r\n'+
        '**親クラスと子クラスに同じ名前のメソッドがある場合，親クラスのメソッドを呼ぶ\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'super.メソッド名(引数)\r\n'+
        '>>\r\n'+
        '\r\n'
      ,
      'tonyu2/TQuery.alive.txt': 
        '[[TQuery]]\r\n'+
        '\r\n'+
        '* TQuery.alive メソッド\r\n'+
        '\r\n'+
        'このTQueryオブジェクトが格納しているActorのうち，生きている（[[die]]メソッドが1回も呼ばれていない）ものだけを格納した新しいTQueryオブジェクトを返します．\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        't.alive()\r\n'+
        '>>\r\n'+
        '\r\n'+
        '**戻り値\r\n'+
        '\r\n'+
        'このTQueryオブジェクトが格納しているActorのうち，生きているものだけを格納した新しいTQueryオブジェクト\r\n'+
        '\r\n'
      ,
      'tonyu2/TQuery.apply.txt': 
        '[[TQuery]]\r\n'+
        '\r\n'+
        '*TQuery.applyメソッド\r\n'+
        '\r\n'+
        'このTQueryオブジェクトが指すすべてのActorに対して，指定されたメソッドを呼びます．\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        't.apply(name, args)\r\n'+
        '>>\r\n'+
        '\r\n'+
        'すべてのActorについて，\r\n'+
        '[[@arg name]]で指定されたをメソッドを，配列[[@arg args]]で指定された引数を渡して呼び出します．\r\n'+
        '\r\n'+
        '**戻り値\r\n'+
        '\r\n'+
        '一番最後にメソッドが呼び出されたActorに対するメソッドの戻り値．メソッドが呼ばれたActorがなければ[[@cfrag undefined]]．\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/TQuery.attr.txt': 
        '[[TQuery]]\r\n'+
        '\r\n'+
        '*TQuery.attrメソッド\r\n'+
        '\r\n'+
        'このTQueryオブジェクトが格納しているActorについて，フィールドの読み込みまたは書き込みを行います．\r\n'+
        '\r\n'+
        '** 書式1\r\n'+
        '\r\n'+
        '<<code\r\n'+
        't.attr(key)\r\n'+
        '>>\r\n'+
        '\r\n'+
        '最初のActor ( [[@cfrag t[0] ]] ) の，[[@arg key]] で指定した名前をもつフィールドの値を読み出します\r\n'+
        '\r\n'+
        '** 書式2\r\n'+
        '\r\n'+
        '<<code\r\n'+
        't.attr(key1, value1, key2, value2 ...)\r\n'+
        '>>\r\n'+
        '\r\n'+
        'すべてのActorについて，[[@arg key]] と [[@arg value]]  の組で表されるフィールドを書き込みます．\r\n'+
        '\r\n'+
        '** 書式3\r\n'+
        '\r\n'+
        '<<code\r\n'+
        't.attr(obj)\r\n'+
        '>>\r\n'+
        '\r\n'+
        'すべてのActorについて，[[@arg obj]](通常はオブジェクトリテラルで指定)で指定されたオブジェクトの内容をフィールドに書き込みます．\r\n'+
        '\r\n'
      ,
      'tonyu2/TQuery.die.txt': 
        '[[TQuery]]\r\n'+
        '\r\n'+
        '*TQuery.dieメソッド\r\n'+
        '\r\n'+
        'このTQueryオブジェクトが格納しているすべての「生きている」Actorに対して，[[die]]メソッドを呼びます．\r\n'+
        '\r\n'+
        '※「生きている」Actorとは，dieメソッドが一度も呼ばれていないActorを指す\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        't.die()\r\n'+
        '>>\r\n'+
        '\r\n'+
        '**戻り値\r\n'+
        '\r\n'+
        'このTQueryオブジェクトが格納しているすべてのActorのうち，少なくとも1つが「生きている」Actorであれば [[@cfrag true]] ，そうでなければ[[@cfrag false]]\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/TQuery.find.txt': 
        '[[TQuery]]\r\n'+
        '\r\n'+
        '*TQuery.find\r\n'+
        '\r\n'+
        'このTQueryオブジェクトが格納しているActorのうち，指定された条件に合うものだけを格納した新しいTQueryオブジェクトを返します．\r\n'+
        '\r\n'+
        '**書式\r\n'+
        '\r\n'+
        '<<code\r\n'+
        't.find(f)\r\n'+
        '>>\r\n'+
        '\r\n'+
        'このTQueryオブジェクトが格納しているActorそれぞれについて，\r\n'+
        '第1引数にそのActorを渡して関数[[@arg f]] を呼び出し，\r\n'+
        '[[@cfrag true]]相当の値が返されたActorだけを格納した新しいTQueryオブジェクト\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/TQuery.minmax.txt': 
        '[[TQuery]]\r\n'+
        '\r\n'+
        '*TQuery.min / TQuery.max メソッド\r\n'+
        '\r\n'+
        'このTQueryオブジェクトが格納しているすべてのActorのうち，指定された値の最小（最大）値を返します．\r\n'+
        '\r\n'+
        '** 書式1\r\n'+
        '\r\n'+
        '<<code\r\n'+
        't.min(key)\r\n'+
        '>>\r\n'+
        '<<code\r\n'+
        't.max(key)\r\n'+
        '>>\r\n'+
        '\r\n'+
        'このTQueryオブジェクトが格納しているすべてのActorにおける，\r\n'+
        '[[@arg key]](文字列)で指定された名前をもつフィールドの値の最小（最大）値\r\n'+
        '\r\n'+
        '** 書式2\r\n'+
        '\r\n'+
        '<<code\r\n'+
        't.min(func)\r\n'+
        '>>\r\n'+
        '<<code\r\n'+
        't.max(func)\r\n'+
        '>>\r\n'+
        '\r\n'+
        'このTQueryオブジェクトが格納しているすべてのActorについて，そえｒぞれ\r\n'+
        'そのActorを第1引数に渡して[[@arg func]](関数)を呼び出した結果の最小（最大）値\r\n'
      ,
      'tonyu2/TQuery.txt': 
        '[[BaseActor]]\r\n'+
        '\r\n'+
        '*TQuery\r\n'+
        '\r\n'+
        '[[all]]メソッド， [[allCrash]]メソッドなどで返されるオブジェクトです．複数の[[Actor]]に対して一斉に動作を行わせることができます．\r\n'+
        '\r\n'+
        '* 要素数・要素へのアクセス\r\n'+
        '\r\n'+
        'TQueryオブジェクトに格納しているActorの個数は[[@cfrag .length]]で取得します．\r\n'+
        '\r\n'+
        '各Actorへは[[@cfrag [添字] ]]でアクセスします．\r\n'+
        '\r\n'+
        '**例\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'a=all(Enemy);\r\n'+
        'print("敵の数=", a.length);\r\n'+
        'if (a.length>0) print("最初の敵のx座標",a[0].x);\r\n'+
        '>>\r\n'+
        '\r\n'+
        '* for ... in の使用\r\n'+
        '\r\n'+
        'for ... in を使って各Actorへに同じ処理を一斉に行うことができます．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'for (e in all(Enemy)) {\r\n'+
        '   e.die();\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '* メソッド\r\n'+
        '\r\n'+
        '-[[die>TQuery.die]]\r\n'+
        '-[[alive>TQuery.alive]]\r\n'+
        '-[[attr>TQuery.attr]]\r\n'+
        '-[[find>TQuery.find]]\r\n'+
        '-[[apply>TQuery.apply]]\r\n'+
        '-[[min, max>TQuery.minmax]]\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/update.txt': 
        '[[BaseActor]]\n'+
        '\n'+
        '*updateメソッド\n'+
        '\n'+
        '現在の処理を中断し，描画などの処理を行います．\n'+
        '\n'+
        '詳しい処理内容については[[フレーム>frame]]を参照してください．\n'+
        '\n'+
        '*書式\n'+
        '\n'+
        '<<code\n'+
        'update();\n'+
        '>>\n'+
        '\n'+
        '*その他\n'+
        '\n'+
        'このメソッドは待機系メソッドです．待機不能モードでは何も動作を行いません．（詳細は[[動作モード>waitmode]]を参照してください）'
      ,
      'tonyu2/waitFor.txt': 
        '[[asyncResult]]\r\n'+
        '\r\n'+
        '*waitForメソッド\r\n'+
        '\r\n'+
        '使い方は[[asyncResult]]を参照してください．\r\n'
      ,
      'tonyu2/waitmode.txt': 
        '[[lang]]\r\n'+
        '\r\n'+
        '*動作モード\r\n'+
        '\r\n'+
        'Tonyu2には「待機可能モード」と「待機不能モード」という2つの動作モードがあります．\r\n'+
        '\r\n'+
        '** 待機可能モード\r\n'+
        '\r\n'+
        '待機可能モードで動作している間は，[[update]]などの，途中で動作を中断する（つまり，プログラムの動作を待機状態にする）メソッド（これを「待機系メソッド」と呼びます）が呼ばれたときに，一旦処理を中断し，描画や入力状態の更新などの処理を行います．\r\n'+
        '\r\n'+
        '待機可能モードで動作する条件として，次のものがあります\r\n'+
        '\r\n'+
        '-[[Actor]]クラスを継承したオブジェクトでは，mainメソッドは待機可能モードで動作します．\r\n'+
        '--ただし，mainメソッドから呼び出される他のメソッドが待機可能モードで動作しない場合もあります．次の条件を参照してください．\r\n'+
        '-待機可能モードで動作している間に，次のいずれかの形式をもつ文から呼び出されるメソッドは，待機可能モードで動作します．ただし，メソッド名はそのオブジェクト自身がもつメソッドを指しており，それが待機不能メソッド（後述）でない場合に限ります．\r\n'+
        '-- [[@cfrag メソッド名(引数...); ]]\r\n'+
        '-- [[@cfrag 戻り値=メソッド名(引数...); ]]\r\n'+
        '\r\n'+
        '**待機不能モード\r\n'+
        '\r\n'+
        '上で述べた条件にあてはまらない場合，「待機不能モード」で動作します．\r\n'+
        '待機不能モードでは，待機系メソッドが呼ばれても，途中で動作を中断しません．例えば，待機不能モード中にupdateメソッドが呼ばれても，何も動作を行いません．\r\n'+
        '\r\n'+
        '**待機不能メソッド\r\n'+
        '\r\n'+
        '待機可能モードでは，待機不能モードより動作が遅くなることがあります．そこで，待機系メソッドが呼び出されないことが明らかな場合，必ず待機不能モードで動作したほうが効率がよくなります．このようなメソッドを「待機不能メソッド」と呼びます．\r\n'+
        '\r\n'+
        '待機不能メソッドは，メソッドの定義の先頭に[[@cfrag nowait]]キーワードを追加して定義します．\r\n'+
        '\r\n'+
        '<<code\r\n'+
        'nowait \\myNoWaitMethod(arg1,arg2) {\r\n'+
        '\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '**例\r\n'+
        '\r\n'+
        '<<code\r\n'+
        '\r\n'+
        'method1();        //待機可能モードで動作\r\n'+
        'a=method1();      //待機可能モードで動作\r\n'+
        'a=10+method1();   //待機不能モードで動作\r\n'+
        'other.method1();  //待機不能モードで動作\r\n'+
        'method2();        //待機不能モードで動作\r\n'+
        '\r\n'+
        '\\method1() {\r\n'+
        '   for (i=0 ; i<20 ; i++) {\r\n'+
        '      x++;\r\n'+
        '      update(); // 待機可能モードなら，ここで待機する\r\n'+
        '   }\r\n'+
        '   return x;\r\n'+
        '}\r\n'+
        'nowait \\method2() {\r\n'+
        '   for (i=0 ; i<20 ; i++) {\r\n'+
        '      x--;\r\n'+
        '      update(); // ここでは待機しない\r\n'+
        '   }\r\n'+
        '}\r\n'+
        '>>\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'+
        '\r\n'
      ,
      'tonyu2/Map.txt': 
        '[[api]]\n'+
        '\n'+
        '*Mapクラス\n'+
        '\n'+
        'マップの表示クラスです．\n'+
        '* コンストラクタ\n'+
        '\n'+
        '<<code\n'+
        '\\new(param)\n'+
        '>>\n'+
        '\n'+
        'paramでマップのチップサイズとその個数を指定します．\n'+
        '\n'+
        '例： \n'+
        '<<code\n'+
        '// 16*16のチップを横に15，縦に10並べる\n'+
        '$map=new Map{chipWidth:16,chipHeight:16, col:15, row:10};\n'+
        '>>\n'+
        '\n'+
        '*メソッド\n'+
        '-[[set]]\n'+
        '-[[get]]\n'+
        '-[[getAt]]\n'+
        '-[[scrollTo]]\n'
      ,
      'tonyu2/set.txt': 
        '[[Map]]\n'+
        '*setメソッド\n'+
        '\n'+
        'マップにチップをはめ込みます．\n'+
        '一番左上のチップを(0,0)，その右隣のチップを(1,0)として指定された座標のパターンを設定します．\n'+
        '\n'+
        '<<code\n'+
        'map.set(setCol,setRow,p);\n'+
        '//マップのsetCol，setRow座標のパターンをpに設定します．\n'+
        '>>\n'+
        '\n'+
        '\n'+
        '-setCol : セットするx座標をあらわします\n'+
        '-setRow : セットするy座標をあらわします\n'+
        '-p : 表示するパターンの番号をあらわします \n'
      ,
      'tonyu2/get.txt': 
        '[[Map]]\n'+
        '*getメソッド\n'+
        '\n'+
        '指定したマップ上の座標に対応するマップパターンを取得します．\n'+
        '\n'+
        '<<code\n'+
        'map.get(getCol,getRow);\n'+
        '>>\n'+
        '\n'+
        '\n'+
        '\n'+
        '-getCol : パターンを取得するx座標をあらわします\n'+
        '-getRow : パターンを取得するy座標をあらわします\n'
      ,
      'tonyu2/getAt.txt': 
        '[[Map]]\n'+
        '*getAtメソッド\n'+
        '\n'+
        '指定した画面上の座標に対応するマップパターンを取得します．\n'+
        '\n'+
        '<<code\n'+
        'map.get(getX,getY);\n'+
        '>>\n'+
        '\n'+
        '\n'+
        '\n'+
        '-getX : パターンを取得するx座標をあらわします\n'+
        '-getY : パターンを取得するy座標をあらわします\n'
      ,
      'tonyu2/scrollTo.txt': 
        '[[Map]]\n'+
        '*scrollToメソッド\n'+
        '\n'+
        'マップをスクロールします．\n'+
        '\n'+
        '<<code\n'+
        'map.scrollTo(scrollX,scrollY);\n'+
        '>>\n'+
        '\n'+
        '\n'+
        '\n'+
        '-scrollX : 最初の位置からずらすx座標をあらわします\n'+
        '-scrollY : 最初の位置からずらすy座標をあらわします\n'+
        '\n'+
        '最初の位置から右方向にscrollXドット，下方向にscrollYドットずらして表示します．左や上にずらす場合はscrollXとscrollYを負の値にします．'
      
    }
  };
  if (WebSite.devMode) {
    rom.base='/ROM'+rom.base;
  }
  FS.mountROM(rom);
})();