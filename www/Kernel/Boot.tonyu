extends Actor;
includes T2MediaPlayer;

native $;
native $LASTPOS;
native Key;
native Date;
native ImageList;
native Tonyu;
native SplashScreen;
native Math;
native requestAnimationFrame;
native console;

$Boot=this;
scheduler=$Scheduler=new Scheduler;
initEvents();
initLayers();
initPeripherals();
loadPlugins();
loadImages();
loadSounds();
createMainObject();
progress();
mainLoop();

\new(param) {
    extend(param);
}
\update() {
    waitFor(Tonyu.timeout(50)); // waitFor calls update...
}
\initEvents() {
    // used in EventMod
    eventTypes={
        "screenOut":ScreenOutHandler,
        "crashTo":CrashToHandler,
        "within":WithinHandler
    };
}
\initPeripherals() {
    $InputDevice=new InputDevice;
    $InputDevice.initCanvasEvents(cvj);
    $ObjectPool=new ObjectPool;
    $pat_fruits=30;
    $Keys=new Keys;
    $Math=Math;
    $consolePanel=new Panel{align:"center",x:465/2,y:465/2,width:465,height:465,zOrder:-10,layer:$FrontSprites};
    $consolePrintY=465-15;
    $panel=new Panel{align:"center",x:$screenWidth/2,y:$screenHeight/2,width:$screenWidth,height:$screenHeight,zOrder:-1,layer:$FrontSprites};
    initFPSParams();
    $WebPage=new WebPage;
    $Navigator=new Navigator;
    $mouseX=$mouseX||0;
    $mouseY=$mouseY||0;
}
\initLayers() {
    $mainLayer=$Sprites=new Sprites();
    $frontLayer=$FrontSprites=new Sprites();
    $backLayer=new Sprites();
    $uiLayer=new Sprites();
    cvj=$("canvas");
    $screenWidth=465;
    $screenHeight=465;
    $Screen=new Screen{width:$screenWidth, height:$screenHeight, layer:$uiLayer};
    $Screen.on("resize") \{
        $screenWidth=$Screen.width;
        $screenHeight=$Screen.height;
        if($panel){
            $panel.setPanel($screenWidth,$screenHeight);
            $panel.x=$screenWidth/2;
            $panel.y=$screenHeight/2;
        }
        if($consolePanel){
            $consolePanel.setPanel($screenWidth,$screenHeight);
            $consolePanel.x=$screenWidth/2;
            $consolePanel.y=$screenHeight/2;
            $consolePrintY=$screenHeight-15;
        }
    };
    $Screen.addLayer($frontLayer);
    $Screen.addLayer($mainLayer);
    $Screen.addLayer($backLayer);
    $Screen.setBGColor("rgb(20,80,180)");
    $Screen.selectLayer($mainLayer);
    $rootLayer=new Sprites();
    $uiScreen=new Screen{canvas:$("canvas")[0],layer:$rootLayer};    
    $uiScreen.setBGColor("#888");
    $uiScreen.addLayer($uiLayer);
    $layoutManager=new UILayout{layer:$uiLayer};
    //drawFrame();
}
/*----OLD
\initLayers() {
    $mainLayer=$Sprites=new Sprites();
    $frontLayer=$FrontSprites=new Sprites();
    $backLayer=new Sprites();
    $UILayer=new Sprites();
    cvj=$("canvas");
    $Screen=new ScaledCanvas{canvas:cvj, width:465, height:465};
    drawFrame();
}*/
\loadPlugins() {
    progress("Loading plugins..");
    runAsync \(r) {
        $currentProject.loadPlugins(r);
    };
    progress("Loading plugins done");
}
\loadImages() {
    progress("Loading pats..");
    var rs=$currentProject.getResource();
    var r;
    r=runAsync \(succ) {
        ImageList.load( rs.images, succ) {
            baseDir:$currentProject.getDir()
        };
    };
    //var r=a[0];
    $imageList=r[0];
    //$Sprites.setImageList(r[0]);
    for (var name,val in r[0].names) {
        Tonyu.setGlobal(name, val);
    }
    progress("Loading pats done.");
}
\loadSounds() {
    progress("Loading sounds...");
    initT2MediaPlayer();
    loadFromProject($currentProject);
    progress("Loading sounds done.");
    on("stop")\{
        clearSEData();
    };
    $sound=this;
}

\createMainObject() {
    var o=Tonyu.currentProject.getOptions();
    var mainClassName=o.run.mainClass;
    progress("MainClass= "+mainClassName);
    mainClass=Tonyu.getClass(mainClassName);
    if (!mainClass) {
        throw new Error( mainClassName+" というクラスはありません");
    }
    $excludeFromAll=$Screen.all();
    new mainClass();
}
\loadPage(page,arg) {
    var a=$Screen.all();
    a=a.find \(e) { return !$excludeFromAll.contains(e); };
    a.die();
    new page(arg);
}
\stop() {
    fireEvent("stop");
    die();
}
\hide() {
}
\schedule(obj,method,args) {
    method=method||"main";
    args=args||[];
    var th=scheduler.newThread(obj, method, args);
    obj.setThreadGroup(this);
    th.setThreadGroup(obj);
    return th;
}
\progress(m) {
    if (typeof SplashScreen=="undefined") return;
    if (m) {
        console.log.apply(console,arguments);
        SplashScreen.progress(m);
    } else SplashScreen.hide();
}

\mainLoop() {
    $frameCount=0;
    while (true) {
    	if (_useRAF) loopRAF();
    	else loopTimer();
        measureFps();
    	handlePause();
        $frameCount++;
    }
}
\loopRAF() {
    var nowTime=now();
    //var elapsed;
	var frameTime=1000/_fps; // 1フレームにかけられる時間
	var moves=0;
    //var procCnt;
    //var subTime;
    var bufferTime;
    subTime = trunc(nowTime - rafProcNowTime);
    procCnt = subTime / frameTime;
    // 誤差丸めの範囲
    bufferTime = (0.5*_fps/60);
    // 60FPS時、procCntが0,2,0,2,…となり実質30FPSになることがあるため、誤差を丸める
    if (procCnt >= 1.0-bufferTime && procCnt <= 1.0+bufferTime) procCnt = 1.0;
    procCnt = floor(procCnt);
    if (procCnt > maxFrameSkip) {
        procCnt = maxFrameSkip;
        rafProcNowTime = nowTime;
    } else {
        rafProcNowTime += procCnt * frameTime;
    }
    //print("procCnt:"+procCnt+" subTime:"+subTime);
	while(moves<procCnt) {
		moveFrame();
		moves++;
	    if (moves<procCnt) afterDraw(false);
	}
    if (moves > 0) {
        drawFrame();
        afterDraw(true);
    }
	waitRAF();
    //elapsed = now()-start;
    //var cnt=rafCount-1;
    //if (rafResolution) {//★で何回分のRAFが実行されたか？（描画移動に手間取ると2回分以上経過しているかも)
    //	var rafResMS=time/rafResolution;  //RAFの分解能をmsで  time=30  res=2   resMS=15
	//	var elapsedRAF=floor(elapsed/rafResMS+0.5);  // rafの経過回数
	//	if (elapsedRAF>1) cnt-=(elapsedRAF-1); // 2回以上の時間かかっていたらその分は減らす
    //}
    //rafCntDebug=cnt;
}
\waitRAF() {
    waitFor(Tonyu.animationFrame());
    //var rafStart=now();
    //if (pRafStart) detectRAFResolution(rafStart-pRafStart);
    //pRafStart=rafStart;
}
/*
nowait \detectRAFResolution(t) {
	if (rafResolution) return;
// RAFの分解能（1フレーム時間をRAFの回数に換算したもの）を求める。tはRAFとRAFの間隔ms
	var time=1000/_fps;
	var reso=time/t;  // t=15 time=30  reso=2
	// reso は、nを整数として n あるいは 1/n  と表現できると期待
	if (reso>1) reso=floor(reso+0.5); // 1.8 -> 2
	else reso=1/floor(1/reso+0.5);  // 0.6 -> 1/2
	// resoの値を投票して最初に10票集めたものをresoとする
	rafRess=rafRess||{};
	if (  (rafRess[reso+""]=(rafRess[reso+""]||0)+1 ) > 10 ) {
		rafResolution=reso;
		if (reso<1) {
			frameSkip=floor(1/reso+0.5);
			rafCount=1;
		} else {
			rafCount=reso;
			frameSkip=1;
		}
	}
}*/
/*
\measureRAFInterval() {
	if ($RAFInterval) return;
	var s=now();
	for (var i=0;i<20;i++) {
	    waitFor(Tonyu.animationFrame());
	}
	$RAFInterval=(now()-s)/20;
}*/
\loopTimer() {
    moveFrame();
    doDraw=now()<deadLine;
    if (!doDraw && frameSkipped>=maxFrameSkip) {
        doDraw=true;
        resetDeadLine();
    }
    if (doDraw) { // フレームスキップの時は描画しない
		drawFrame();
        frameSkipped=0;
    } else {
        frameSkipped++;
    }
    afterDraw(doDraw);
    waitFrame(); // FPS制御
}
\handlePause() {
    while(paused) {
        waitFor(Tonyu.timeout(1));
        if (!paused) resetDeadLine();
    }
}
nowait \drawFrame() {
    var s=now(); 
    $uiScreen.drawLayers();
    drawTime=now()-s;
    fps_fpsCnt ++;
}
/*----OLD
nowait \drawFrame() {
	var s=now();
	var ctx=$Screen.buf[0].getContext("2d");
    $Screen.fillCanvas($Screen.buf[0]);
    $backLayer.draw(ctx);
    $Sprites.draw(ctx);
    $FrontSprites.draw(ctx);
    $Screen.draw();
    drawTime=now()-s;
    fps_fpsCnt ++;
}
*/
nowait \moveFrame() {
	var s=now();
    scheduler.stepsAll();
    $Keys.update();
    $InputDevice.update();
    $screenWidth=$Screen.width;
    $screenHeight=$Screen.height;
    moveTime=now()-s;
    fps_rpsCnt ++;
}
nowait \afterDraw(drawn) {// should call (after draw) or (move and frame skip)
    $Sprites.checkHit();
    $Sprites.removeOneframes(drawn);
}
nowait \initFPSParams() {
    // フレームレートの設定
    _fps = 30;
    maxFrameSkip = 5;
    minFrameSkip = 1;
    // フレームレート制御でつかう変数 //
    frameCnt = 0;
    resetDeadLine();
    lastMeasured=now();
    fps_fps=fps_rps=fps_fpsCnt=fps_rpsCnt=0;
    drawTime=5;moveTime=5;
	//rafAccept=1.1;
	//rafInterval=1000/60;
	_useRAF=true;
	//rafCount=2;
	//frameSkip=1;
    
    rafProcNowTime=now();
}
nowait \now() {
    return new Date().getTime();
}
nowait \resetDeadLine() {
    deadLine=now()+1000/_fps;
    frameSkipped = 0;
}

\waitFrame() {
    var wt=deadLine-now();
    if (wt<1) {
        if (wt<-1000) resetDeadLine();
        wt=1;
    }
    wt=floor(wt);
    waitFor(Tonyu.timeout(wt));
    deadLine+=1000/_fps;
}

nowait \getFrameRate() {
    return _fps;
}

// Tonyu1の$System.setFrameRate() //
nowait \setFrameRate(fps, maxFrameSkip) {
//    if (_fps!=fps) {
//		rafRess={};
//		rafResolution=null;
//		frameSkip=1;
//		rafCnt=floor(60/fps+0.5);
//    }
    _fps = fps;
    if (typeof maxFrameSkip!="number") maxFrameSkip=5;
    if (maxFrameSkip<=0) maxFrameSkip=1;
    this.maxFrameSkip = maxFrameSkip;
    resetDeadLine();
}
\useRAF {
	return _useRAF;
}
\useRAF=v {
    // 切り替え時にフレームスキップが発生するのを防止する
    if (v) {
        rafProcNowTime=now();
    } else {
        resetDeadLine();
    }
	return _useRAF=v;
}

// FPS（計測したフレームレート）を返す //
nowait \getMeasuredFps() {
    return fps_fps;
}

// RPS（計測した実行レート）を返す //
nowait \getMeasuredRps() {
    return fps_rps;
}

nowait \measureFps() {
    var nowTime = now();
    if (nowTime>=lastMeasured+1000) {
        fps_fps=fps_fpsCnt;
        fps_rps=fps_rpsCnt;
        fps_fpsCnt=0;
        fps_rpsCnt=0;
        lastMeasured=nowTime;
    }
}

