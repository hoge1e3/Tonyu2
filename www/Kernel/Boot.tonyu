extends Actor;
includes T2MediaPlayer;

native $;
native TError;
native $LASTPOS;
native Key;
native Date;
native ImageList;
native Tonyu;
native SplashScreen;
native Math;
native requestAnimationFrame;

\new(param) {
    extend(param);
}
\update() {
    waitFor(Tonyu.timeout(50)); // waitFor calls update...
}
\loadPlugins() {
    print ("Loading plugins..");
    var a=asyncResult();
    $currentProject.loadPlugins(a.receiver);
    waitFor(a);
}
\initSprites() {
    $Sprites=new Sprites();
    $FrontSprites=new Sprites();
    cvj=$("canvas");
    if (Tonyu.noviceMode) {
        $Screen=new ScaledCanvas{canvas:cvj, width:600, height:300};
    } else {
        $Screen=new ScaledCanvas{canvas:cvj, width:465, height:465};
    }
    drawFrame();
    print ("Loading pats..");
    var rs=$currentProject.getResource();
    a=asyncResult();
    ImageList.load( rs.images, a.receiver)
    {baseDir:$currentProject.getDir()};
    waitFor(a);
    var r=a[0];
    $Sprites.setImageList(r);
    for (var name,val in r.names) {
        Tonyu.setGlobal(name, val);
    }
    print ("Loading pats done.");
}
\initSounds() {
    print ("Loading sounds...");
    initT2MediaPlayer();
    loadFromProject($currentProject);
    print ("Loading sounds done.");
    on("stop")\{
        clearSEData();
    };
    $sound=this;
}
\hide() {
}

\initThread() {
    var o=Tonyu.currentProject.getOptions();
    var mainClassName=o.run.mainClass;
    print("MainClass= "+mainClassName);
    mainClass=Tonyu.getClass(mainClassName);
    if (!mainClass) {
        TError( mainClassName+" というクラスはありません",
        "" ,0).raise();
    }
    scheduler=$Scheduler=new Scheduler;
    new mainClass();
}
\stop() {
    fireEvent("stop");
    die();
}
\schedule(obj,method,args) {
    method=method||"main";
    args=args||[];
    var th=scheduler.newThread(obj, method, args);
    addThreadGroup(obj);
    obj.addThread(th);
    return th;
}
$Boot=this;
loadPlugins();
initSprites();
initSounds();
$InputDevice=new InputDevice;
$InputDevice.initCanvasEvents(cvj);
initThread();

$pat_fruits=30;
$Keys=new Keys;
$Math=Math;
$consolePanel=new Panel{align:"center",x:465/2,y:465/2,width:465,height:465,zOrder:-10,layer:$FrontSprites};
$consolePrintY=465-15;
$panel=new Panel{align:"center",x:$screenWidth/2,y:$screenHeight/2,width:$screenWidth,height:$screenHeight,zOrder:-1,layer:$FrontSprites};
initFPSParams();

$mouseX=$mouseX||0;
$mouseY=$mouseY||0;
if (typeof SplashScreen!="undefined") SplashScreen.hide();
while (true) {
	if (_useRAF) loopRAF();
	else loopTimer();
    measureFps();
	handlePause();
}
\loopRAF() {
	var start=now(),elapsed;
	var time=1000/_fps; // 1フレームにかけられる時間
	var moves=0;
	while(moves<frameSkip) {
		moveFrame();
		moves++;
		if (moves<frameSkip) afterDraw();
	}
	drawFrame();
	afterDraw();
	waitRAF();//★
    elapsed = now()-start;
    var cnt=rafCount-1;
    if (rafResolution) {//★で何回分のRAFが実行されたか？（描画移動に手間取ると2回分以上経過しているかも)
    	var rafResMS=time/rafResolution;  //RAFの分解能をmsで  time=30  res=2   resMS=15
		var elapsedRAF=floor(elapsed/rafResMS+0.5);  // rafの経過回数
		if (elapsedRAF>1) cnt-=(elapsedRAF-1); // 2回以上の時間かかっていたらその分は減らす
    }
    rafCntDebug=cnt;
	while(cnt>0) {
		waitRAF();
		cnt--;
    }
}
\waitRAF() {
    waitFor(Tonyu.animationFrame());
    var rafStart=now();
    if (pRafStart) detectRAFResolution(rafStart-pRafStart);
    pRafStart=rafStart;
}
nowait \detectRAFResolution(t) {
	if (rafResolution) return;
// RAFの分解能（1フレーム時間をRAFの回数に換算したもの）を求める。tはRAFとRAFの間隔ms
	var time=1000/_fps;
	var reso=time/t;  // t=15 time=30  reso=2  
	// reso は、nを整数として n あるいは 1/n  と表現できると期待
	if (reso>1) reso=floor(reso+0.5); // 1.8 -> 2
	else reso=1/floor(1/reso+0.5);  // 0.6 -> 1/2
	// resoの値を投票して最初に10票集めたものをresoとする
	rafRess=rafRess||{};
	if (  (rafRess[reso+""]=(rafRess[reso+""]||0)+1 ) > 10 ) {
		rafResolution=reso;
		if (reso<1) {
			frameSkip=floor(1/reso+0.5);
			rafCount=1;
		} else {
			rafCount=reso;
			frameSkip=1;
		}
	}
}

\measureRAFInterval() {
	if ($RAFInterval) return;
	var s=now();
	for (var i=0;i<20;i++) {
	    waitFor(Tonyu.animationFrame());
	}
	$RAFInterval=(now()-s)/20;
}
\loopTimer() {
    moveFrame();
    doDraw=now()<deadLine;
    if (!doDraw && frameSkipped>=maxFrameSkip) {
        doDraw=true;
        resetDeadLine();
    }
    if (doDraw) { // フレームスキップの時は描画しない
		drawFrame();
        frameSkipped=0;
    } else {
        frameSkipped++;
    }
    afterDraw();
    waitFrame(); // FPS制御
}
\handlePause() {
    while(paused) {
        waitFor(Tonyu.timeout(1));
        if (!paused) resetDeadLine();
    }
}
nowait \drawFrame() {
	var s=now();
    $Screen.fillCanvas($Screen.buf[0]);
    $Sprites.draw($Screen.buf[0]);
    $FrontSprites.draw($Screen.buf[0]);
    $Screen.draw();
    drawTime=now()-s;
    fps_fpsCnt ++;
}
nowait \moveFrame() {
	var s=now();
    scheduler.stepsAll();
    $Keys.update();
    $InputDevice.update();
    $screenWidth=$Screen.width;
    $screenHeight=$Screen.height;
    moveTime=now()-s;
    fps_rpsCnt ++;
}
nowait \afterDraw() {// should call (after draw) or (move and frame skip)
    $Sprites.checkHit();
    $Sprites.removeOneframes();
}
nowait \initFPSParams() {
    // フレームレートの設定
    _fps = 30;
    maxFrameSkip = 5;
    minFrameSkip = 1;
    // フレームレート制御でつかう変数 //
    frameCnt = 0;
    resetDeadLine();
    lastMeasured=now();
    fps_fps=fps_rps=fps_fpsCnt=fps_rpsCnt=0;
    drawTime=5;moveTime=5;
	rafAccept=1.1;
	rafInterval=1000/60;
	_useRAF=true;
	rafCount=2;
	frameSkip=1;
}
nowait \now() {
    return new Date().getTime();
}
nowait \resetDeadLine() {
    deadLine=now()+1000/_fps;
    frameSkipped = 0;
}

\waitFrame() {
    var wt=deadLine-now();
    if (wt<1) {
        if (wt<-1000) resetDeadLine();
        wt=1;
    }
    wt=floor(wt);
    waitFor(Tonyu.timeout(wt));
    deadLine+=1000/_fps;
}

nowait \getFrameRate() {
    return _fps;
}

// Tonyu1の$System.setFrameRate() //
nowait \setFrameRate(fps, maxFrameSkip) {
	if (_fps!=fps) { 
		rafRess={}; 
		rafResolution=null;
		frameSkip=1;
		rafCnt=floor(60/fps+0.5);
	}
    _fps = fps;
    if (typeof maxFrameSkip!="number") maxFrameSkip=5;
    this.maxFrameSkip = maxFrameSkip;
    resetDeadLine();
}
\useRAF {
	return _useRAF;
}
\useRAF=v {
	return _useRAF=v;
}

// FPS（計測したフレームレート）を返す //
nowait \getMeasuredFps() {
    return fps_fps;
}

// RPS（計測した実行レート）を返す //
nowait \getMeasuredRps() {
    return fps_rps;
}

nowait \measureFps() {
    if (now()>lastMeasured+1000) {
        fps_fps=fps_fpsCnt;
        fps_rps=fps_rpsCnt;
        fps_fpsCnt=0;
        fps_rpsCnt=0;
        lastMeasured=now();
    }
}

