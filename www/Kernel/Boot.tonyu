extends Actor;
includes T2MediaPlayer;

native $;
native $LASTPOS;
native Key;
native ImageList;
native Tonyu;
native SplashScreen;
native Math;
native JSON;
native requestAnimationFrame;
native console;
native Array;
native UIDiag;
native performance;
native Mezonet;
native FS;
native R;
native RPGAtsumaru;
native parent;

// old browser support
if (typeof performance==="undefined") {
    window.performance = {};
}
if (!performance.now) {
    performance.now = function now() {
        return Date.now();
    };
}

Tonyu.resetLoopCheck(10000);
$Boot=this;
setScheduler(new Scheduler);
initGlobals();
//initEvents();
initLayers();
initPeripherals();
loadPlugins();
if ($customLoading) {
    var tt=Tonyu.thread();
    tt.apply(this,"loadAssets",[true]);
    tt.steps();
} else {
    loadAssets();
}
createMainObject();
progress();
mainLoop();

\new(param) {
    extend(param);
    initSymbol();
    _th=Tonyu.thread();
    _th.apply(this,"main");
    _th.stepsLoop();
    on ("die") \{
        if (_th) _th.kill();
    };
}
\initSymbol() {
    $Symbol={
        subActors:"__SUBACTOR"
    };
}
\setScheduler(s) {
    _scheduler=$Scheduler=s;
}
\moveToScheduler(a: Actor, oldS: Scheduler, newS: Scheduler) {
    a._scheduler=newS;
    oldS.findByThreadGroup(a).forEach \(th) {
        if (th.scheduled===newS) return;
        oldS.unschedule(th);
        //th.scheduled=null;
        newS.addToNext(th);
        newS.checkDuplicate();
    };
}
\timeStop(except) {
    var oldS=_scheduler;
    setScheduler(new Scheduler);
    var newS=_scheduler;
    oldS.doTimeStop();
    var res={
        release: \(a) {
            if (!a) return res.releaseAll();
            a._scheduler=newS;
            moveToScheduler(a, oldS, newS);
            /*oldS.findByThreadGroup(a).forEach \(th) {
                if (th.scheduled===newS) return;
                th.scheduled=null;
                newS.addToNext(th);
                newS.checkDuplicate();
            };*/
        },
        releaseAll: \{
            var a=$Screen.all();
            for (var e in a) {
                res.release(e);
            }
        },
    };
    if (except) res.release(except);
    return res;
}
\update() {
    waitFor(Tonyu.timeout(50));
}
\initGlobals() {
    var opt=$currentProject.getOptions();
    if (opt.run && opt.run.globals) {
        var g=opt.run.globals;
        for (var name in g) {
            Tonyu.setGlobal(name, g[name]);
        }
    }
    $fixProductOrder=true;
}
\initPeripherals() {
    $InputDevice=new InputDevice;
    $Screen.multiLayerTouches=new MultiLayerTouches{screen:$Screen};
    // TODO: $Screen.on("touchstart")  -> move to MultiLayerTouches
    $InputDevice.on("touchstart") \(e) {
        var shape;
        var f=e.finger;
        if (e.byMouse) {
            shape=new PointShape{x:f.x, y:f.y, layer:f.layer};
        } else {
            shape=new RectShape{x:f.x, y:f.y, width:32, height:32, layer:f.layer};
        }
        e.shape=shape;
        var a=$Screen.multiLayerTouches.findActor(shape);
        if (a) {
            e.actor=a;
            f.layer=a.layer;
            a.fireEvent("touch",e);
        }
    };
    $InputBox=UIDiag;
    $InputDevice.initCanvasEvents(cvj);
    $ObjectPool=new ObjectPool;
    $pat_fruits=30;
    $Keys=new Keys;
    $GamePad=new GamePad;
    $Math=Math;
    $JSON=JSON;
    $DeferredUtil=FS.DeferredUtil;
    $consolePanel=new ConsolePanel{align:"center",x:465/2,y:465/2,width:465,height:465,zOrder:-10,layer:$FrontSprites};
    $printColor=null;
    $printSize=20;
    $consolePrintY=465;
    $panel=new Panel{align:"center",x:$screenWidth/2,y:$screenHeight/2,width:$screenWidth,height:$screenHeight,zOrder:-1,layer:$FrontSprites};
    initFPSParams();
    $WebPage=new WebPage;
    $Navigator=new Navigator;
    $API=new API;
    $Zip=new Zip;
    if (typeof RPGAtsumaru!=="undefined") {
        $RPGAtsumaru=RPGAtsumaru;
    }
    $mouseX=$mouseX||0;
    $mouseY=$mouseY||0;
    $imageList=[];// temporary before load assets(for customLoading)
    debugCnt=50;
    newLimit=1000;
    $printLimit=500;
    if ($debugger) {
        autoReload=$debugger.startWithAutoReload;
        $debugger.on("classChanged") \{
            getMainClass();// Should be reload because old class(before compile) are not same
            if (typeof autoReload==="function") {
                return autoReload{mainClass};
            }
            if (autoReload===true && mainClass) {
                loadPage(mainClass);
            }
        };
    }
    pageStack=[];
}
\initLayers() {
    $screenWidth=465;
    $screenHeight=465;
    $mainLayer=$Sprites=new Sprites();
    $frontLayer=$FrontSprites=new Sprites();
    $backLayer=new Sprites();
    $uiLayer=new Sprites();
    $sprites3D=new Sprites3D;
    $camera3D=new Camera3D{layer:$sprites3D,x:0,y:0,z:-100};
    $mainLayer3D=new Layer3D{
        group:$sprites3D,
        camera:$camera3D,
    };
    cvj=$mainCanvas||$("canvas");
    $Screen=new Screen{width:$screenWidth, height:$screenHeight, layer:$uiLayer};
    $Screen.on("resize") \{
        $screenWidth=$Screen.width;
        $screenHeight=$Screen.height;
        if($panel){
            $panel.setPanel($screenWidth,$screenHeight);
            $panel.x=$screenWidth/2;
            $panel.y=$screenHeight/2;
        }
        if($consolePanel){
            $consolePanel.setPanel($screenWidth,$screenHeight);
            $consolePanel.x=$screenWidth/2;
            $consolePanel.y=$screenHeight/2;
            $consolePrintY=$screenHeight;
        }
    };
    $Screen.addLayer($frontLayer);
    $camera2D=$Screen.addLayer($mainLayer);
    $Screen.addLayer($mainLayer3D);
    $Screen.addLayer($backLayer);
    $Screen.setBGColor("rgb(20,80,180)");
    $Screen.selectLayer($mainLayer);
    $rootLayer=new Sprites();
    $uiScreen=new Screen{canvas:cvj[0],layer:$rootLayer};
    $uiScreen.setBGColor("#888");
    $uiScreen.addLayer($uiLayer);
    $layoutManager=new UILayout{layer:$uiLayer};
    //drawFrame();
}
\debug() {
    if (!debugCnt) return;
    debugCnt--;
    var a=Array.prototype.slice.call(arguments);
    a.unshift(debugCnt);
    a.unshift("DEBUG");
    console.log.apply(console,a);
}
\loadPlugins() {
    progress("Loading plugins..");
    runAsync \(r) {
        $currentProject.loadPlugins(r);
    };
    progress("Loading plugins done");
}
\loadImages() {
    progress("Loading pats..");
    var rs=$currentProject.getResource();
    var r;
    r=runAsync \(succ) {
        ImageList.load( rs.images, succ) {
            baseDir:$currentProject.getDir(),
            prj:$currentProject
        };
    };
    //var r=a[0];
    $imageList=r[0];
    //$Sprites.setImageList(r[0]);
    for (var name,val in r[0].names) {
        Tonyu.setGlobal(name, val);
    }
    progress("Loading pats done.");
}
\loadSounds() {
    progress("Loading sounds...");
    initT2MediaPlayer();
    loadFromProject($currentProject);
    progress("Loading sounds done.");
    on("stop")\{
        allResetBGM();
        //allClearSoundData();
    };
    $sound=this;
}
\loadAssets(para) {
    loadImages();
    loadSounds();
    loadedAll=true;
    if (para) progress();
}
\getIDE() {
    try {
        return (parent.Tonyu.globals.$currentProject.ide);
    }catch(e) {
        return null;
    }
}
\getMainClass(){
    var o=$currentProject.getOptions();
    var mainClassName=o.run.mainClass;
    progress("MainClass= "+mainClassName);
    mainClass=Tonyu.getClass(mainClassName);
    if (!mainClass) {
        throw new Error( mainClassName+" というクラスはありません");
    }
}
\createMainObject() {
    getMainClass();
    $excludeFromAll=$Screen.all();
    new mainClass();
}
\loadPage(page,arg,options) {
    switch (typeof arg) {
        case "function":
        options={onLoad:arg};
        arg=undefined;
        break;
        case "boolean":
        options={push:arg};
        arg=undefined;
        break;
    }
    options=options||{};
    var push=(options.push);
    var pass=(options.pass||[]).concat($excludeFromAll.toArray());
    var res;
    var oldS=_scheduler, newS;
    if (!page) {
        var saved=pageStack.pop();
        if (!saved) {
            throw new Error(R("noPushedPages"));
        }
        $Screen.restore(saved.sprites);
        $t2World=saved.t2World;
        newS=saved.scheduler;
        setScheduler(newS);
        for (var pa of saved.pass) {
            moveToScheduler(pa, oldS, newS);
        }
    } else if (push) {
        var saved={
            scheduler: oldS,
            sprites:$Screen.saveAndClear(pass),
            t2World: $t2World,
            pass,
        };
        newS=new Scheduler;
        setScheduler(newS);
        for (var pa of pass) {
            moveToScheduler(pa, oldS, newS);
        }
        $t2World=null;
        pageStack.push(saved);
        res=new page(arg);
    } else {
        var a=$Screen.all();
        a=a.find \(e) { return pass.indexOf(e)<0; };
        a.die();
        res=new page(arg);
    }
    if (typeof options.onLoad==="function") options.onLoad{page:res};
}
\stop() {
    var res=new $.Deferred();
    var evt={
        die: \{
            die();
            res.resolve();
            //print("ISDEAD",isDead());
        },
        preventDefault: \{evt.defaultPrevented=true;}
    };
    try {
        $sound.stopAllSE();
    } catch(e) {
        console.error(e.stack);
    }
    var r=fireEvent("stop",evt);
    if(!evt.defaultPrevented) {
        evt.die();
        res.resolve();
    }
    return res;
}
\hide() {
}
\schedule(obj,method,args) {
    if (!method) throw new Error("指定されたメソッドは定義されていません:"+method);
    args=args||[];
    var s=obj._scheduler||_scheduler;
    var th=s.newThread(obj, method, args);
    obj.setThreadGroup(this);
    th.setThreadGroup(obj);
    return th;
}
\progress(m) {
    if (typeof SplashScreen=="undefined") return;
    if (m) {
        console.log.apply(console,arguments);
        SplashScreen.progress(m);
    } else SplashScreen.hide();
}
\progressNoLog(m) {
    if (typeof SplashScreen=="undefined") return;
    if (m) {
        SplashScreen.progress(m);
    } else SplashScreen.hide();
}

\mainLoop() {
    $frameCount=0;
    $drawnFrameCount=0;
    while (true) {
        if (_useRAF) loopRAF();
        else loopTimer();
        measureFps();
        handlePause();
        if (typeof Mezonet!=="undefined" && typeof Mezonet.doRefresh==="function") Mezonet.doRefresh();
        $drawnFrameCount++;
    }
}
\loopRAF() {
    var nowTime=now();
    //var elapsed;
    var frameTime=1000/_fps; // 1フレームにかけられる時間
    var moves=0;
    //var procCnt;
    //var subTime;
    var bufferTime = 0;
    subTime = trunc(nowTime - rafProcNowTime);
    procCnt = subTime / frameTime;
    // 誤差丸めの範囲
    bufferTime = (0.5*_fps/60);
    if (_fps < 58 || _fps > 62) bufferTime = 0; // 60FPS付近以外は丸めない方が滑らかそう
    // 60FPS時、procCntが0,2,0,2,…となり実質30FPSになることがあるため、誤差を丸める
    if (procCnt >= 1.0-bufferTime && procCnt <= 1.0+bufferTime) procCnt = 1.0;
    procCnt = floor(procCnt);
    if (procCnt > maxFrameSkip) {
        procCnt = maxFrameSkip;
        rafProcNowTime = nowTime;
    } else {
        rafProcNowTime += procCnt * frameTime;
    }
    //debug("procCnt:",procCnt,"Moves:",moves);
    while(moves<procCnt) {
        $_doDraw=moves==procCnt-1;
        moveFrame();
        moves++;
        if (moves<procCnt) afterDraw{drawn:false};
    }
    //debug("endWhile");
    if (moves > 0) {
        drawFrame();
        afterDraw{drawn:true};// was false ... why?
    }
    //debug("beforeWaitRAF");
    runPromise(requestAnimationFrame);
    //if (isDead()) print("DEAD but continue...");
    //debug("afterWaitRAF");
    //elapsed = now()-start;
    //var cnt=rafCount-1;
    //if (rafResolution) {//★で何回分のRAFが実行されたか？（描画移動に手間取ると2回分以上経過しているかも)
    //	var rafResMS=time/rafResolution;  //RAFの分解能をmsで  time=30  res=2   resMS=15
	//	var elapsedRAF=floor(elapsed/rafResMS+0.5);  // rafの経過回数
	//	if (elapsedRAF>1) cnt-=(elapsedRAF-1); // 2回以上の時間かかっていたらその分は減らす
    //}
    //rafCntDebug=cnt;
}
\loopTimer() {
    moveFrame();
    doDraw=now()<deadLine;
    if (!doDraw && frameSkipped>=maxFrameSkip) {
        doDraw=true;
        resetDeadLine();
    }
    $_doDraw=doDraw;
    if (doDraw) { // フレームスキップの時は描画しない
        drawFrame();
        frameSkipped=0;
    } else {
        frameSkipped++;
    }
    afterDraw{drawn:doDraw};
    waitFrame(); // FPS制御
}
// isIdle := paused || schedulerEmpty
\handlePause() {
    if (economyMode && _scheduler.isEmpty) {
        isIdle=true;
        while(_scheduler.isEmpty) {
            runPromise(requestAnimationFrame);
        }
        resetDeadLine();
    }
    while(paused) {
        isIdle=true;
        runPromise(requestAnimationFrame);
        if (!paused) resetDeadLine();
    }
    isIdle=false;
    // why not resetDeadLine?  if not paused do nonthing...
}
nowait \drawFrame() {
    var s=now();
    $uiScreen.drawLayers();
    drawTime=now()-s;
    fps_fpsCnt ++;
}
nowait \moveFrame() {
    var s=now();
    $_printCount=0;
    Tonyu.resetLoopCheck();
    if (newLimit) newLimitCount=newLimit;
    //debug("MoveFrame",1);
    var sc=_scheduler.stepsAll();
    //debug("MoveFrame",2);
    $Keys.update();
    //debug("MoveFrame",3);
    $GamePad.update();
    $InputDevice.update();
    if ($sound )$sound.resetSEFrame();
    //console.log("running");
    //debug("MoveFrame",4);
    $screenWidth=$Screen.width;
    $screenHeight=$Screen.height;
    moveTime=now()-s;
    fps_rpsCnt ++;
    $frameCount++;//=fps_rpsCnt;
}
nowait \afterDraw(e) {// should call (after draw, e.drawn==true) or (move and frame skip, e.drawn==false)
    //debug("AfterDraw",1);
    $Sprites.checkHit();
    //debug("AfterDraw",2);
    $Sprites.removeOneframes(e.drawn);
    sendEvent("afterDraw",e);
    //debug("AfterDraw",3);
}
nowait \initFPSParams() {
    // フレームレートの設定
    _fps = $defaultFPS || 30;
    maxFrameSkip = 5;
    minFrameSkip = 1;
    // フレームレート制御でつかう変数 //
    frameCnt = 0;
    resetDeadLine();
    lastMeasured=now();
    fps_fps=fps_rps=fps_fpsCnt=fps_rpsCnt=0;
    drawTime=5;moveTime=5;
	//rafAccept=1.1;
	//rafInterval=1000/60;
    _useRAF=true;
	//rafCount=2;
	//frameSkip=1;

    rafProcNowTime=now();
}
nowait \now() {
    return performance.now();
}
nowait \resetDeadLine() {
    deadLine=now()+1000/_fps;
    frameSkipped = 0;
}

\waitFrame() {
    var wt=deadLine-now();
    if (wt<1) {
        if (wt<-1000) resetDeadLine();
        wt=1;
    }
    wt=floor(wt);
    waitFor(Tonyu.timeout(wt));
    deadLine+=1000/_fps;
}

nowait \getFrameRate() {
    return _fps;
}

// Tonyu1の$System.setFrameRate() //
nowait \setFrameRate(fps, maxFrameSkip) {
    _fps = fps;
    if (typeof maxFrameSkip!="number") maxFrameSkip=5;
    if (maxFrameSkip<=0) maxFrameSkip=1;
    this.maxFrameSkip = maxFrameSkip;
    resetDeadLine();
}
\useRAF {
    return _useRAF;
}
\useRAF=v {
    // 切り替え時にフレームスキップが発生するのを防止する
    if (v) {
        rafProcNowTime=now();
    } else {
        resetDeadLine();
    }
    return _useRAF=v;
}

// FPS（計測したフレームレート）を返す //
nowait \getMeasuredFps() {
    return fps_fps;
}

// RPS（計測した実行レート）を返す //
nowait \getMeasuredRps() {
    return fps_rps;
}

nowait \measureFps() {
    var nowTime = now();
    if (nowTime>=lastMeasured+1000) {
        fps_fps=fps_fpsCnt;
        fps_rps=fps_rpsCnt;
        fps_fpsCnt=0;
        fps_rpsCnt=0;
        lastMeasured=nowTime;
    }
}
\requestDrawFrame() {
    if (!isIdle) return;
    if (_drawFrameRequested) return;
    _drawFrameRequested=true;
    requestAnimationFrame \{
        drawFrame();
        _drawFrameRequested=false;
    };
}
\setEconomyMode(options) {
    // options:: {manualDraw}
    economyMode=options;
}
