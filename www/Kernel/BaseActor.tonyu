extends null;
includes MathMod,EventMod,TextRectMod,OneframeSpriteMod,
ThreadGroupMod,EventHandlerCaller,DialogMod;
native Tonyu;
native Key;
native console;
native Math;
native FS;
native Array;

\new(x,y,p) {
    if (Tonyu.runMode) _th=$Boot.schedule(this,"main",[]);
    if (typeof x=="object") Tonyu.extend(this,x);
    else if (typeof x=="number") {
        this.x=x;
        this.y=y;
        this.p=p;
    }
    layer=layer||$mainLayer;
    crashScale=1;
    if (scaleX==null) scaleX=1;
    if (rotation==null) rotation=0;
    //if (this.rotate==null) this.rotate=0;
    if (alpha==null) alpha=255;
    if (zOrder==null) zOrder=0;
    if (age==null) age=0;
    if (anim!=null && typeof anim=="object"){
        animMode=true;
        animFrame=0;
    }else{
        animMode=false;
    }
    if (animFps==null) animFps=1;
}
nowait \extend(obj) {
    return Tonyu.extend(this,obj);
}

nowait \print(pt) {
    console.log.apply(console,arguments);
    var mergedArg="";
    if($consolePanel){
        for(var argCount=0;argCount<arguments.length;argCount++){
            mergedArg=mergedArg+arguments[argCount]+" ";
        }
        splits=mergedArg.split("\n");
        for(var printCount=0;printCount<splits.length;printCount++){
            $consolePanel.scroll(0,20);
            $consolePanel.setFillStyle("white");
            $consolePanel.fillText(splits[printCount],0,$consolePrintY,20,"left");
        }
    }
}

nowait \setAnimFps(f){
    this.animFps=f;
    this.animFrame=0;
    this.animMode=true;
}
nowait \startAnim(){
    this.animMode=true;
}
nowait \stopAnim(){
    this.animMode=false;
}
\update() {
    onUpdate();
    if(_thread) {
        _thread.suspend();
        if ($Scheduler) $Scheduler.addToNext(_thread);
    } else {
        $Scheduler.checkTimeout();
    }
}
nowait \onUpdate() {

}
\updateEx(updateT){
    for(var updateCount=0;updateCount<updateT;updateCount++){
        update();
    }
}
nowait \getkey(k) {
    return $Keys.getkey(k);
}
nowait \hitTo(t) {
    return crashTo(t);
}
nowait \all(c) {
    //return layer.all.apply(layer,arguments); <- includes myself!
    var res=new TQuery(this);
    if (arguments.length>0 && typeof c!="function") {
        return res;
    }
    layer.sprites.forEach \(s) {
        if (s===this) return;
        if (!c || s instanceof c) {
            res.push(s);
        }
    };
    return res;
}
nowait \allCrash(t) {
    var res=new TQuery(this);
    var sp=this; //_sprite || this;
    var t1=getCrashRect();
    if (!t1) return res;
    layer.sprites.forEach(\(s) {
        var t2;
        if (s!==this &&
        !s.excludeFromAll &&
        s instanceof t &&
        (t2=s.getCrashRect()) &&
        Math.abs(t1.x-t2.x)*2<t1.width+t2.width &&
        Math.abs(t1.y-t2.y)*2<t1.height+t2.height) {
            res.push(s);
        }
    });
    return res;
}
nowait \crashTo(t) {
    if (!t) return false;
    if (typeof t=="function") {
        return allCrash(t)[0];
    }
    return crashTo1(t);
}
nowait \crashTo1(t) {
    if (!t || t._isDead) return false;
    var t1=getCrashRect();
    var t2=t.getCrashRect();
    return
    //    t1.x!=null && t1.y!=null && t1.width && t1.height &&
    //    t2.x!=null && t2.y!=null && t2.width && t2.height &&
    t1 && t2 &&
    Math.abs(t1.x-t2.x)*2<t1.width+t2.width &&
    Math.abs(t1.y-t2.y)*2<t1.height+t2.height;
}
\crashToChecker(d,f){
    while(true){
        if(typeof d=="function"){
            for(obj in allCrash(d)){
                callEventHandler(f,[obj]);
            }
        }else if(crashTo(d)){
            callEventHandler(f,[d]);
        }
        update();
    }
}
nowait \getCrashRect() {
    var actWidth=(width||radius*2)*scaleX*crashScale, actHeight;
    if(typeof scaleY==="undefined"){
        actHeight=(height||radius*2)*scaleX*crashScale;
    }else{
        actHeight=(height||radius*2)*scaleY*crashScale;
    }
    return typeof x=="number" &&
    typeof y=="number" &&
    typeof actWidth=="number" &&
    typeof actHeight=="number" &&
    {x,y,width:Math.abs(actWidth),height:Math.abs(actHeight)};
}
nowait \allWithin(t,distance) {
    var res=new TQuery(this);
    var sp=this; //_sprite || this;
    var t1=getCrashRect();
    if (!t1) return res;
    layer.sprites.forEach(\(s) {
        var t2;
        if (s!==this &&
        !s.excludeFromAll &&
        s instanceof t &&
        Math.sqrt(Math.abs(x-s.x)*Math.abs(x-s.x)+ Math.abs(y-s.y)*Math.abs(y-s.y))<distance) {
            res.push(s);
        }
    });
    return res;
}
nowait \within(t,distance){
    if(!t) return false;
    if(typeof t=="function"){
        return allWithin(t,distance)[0];
    }
    return within1(t,distance);
}
nowait \within1(t,distance){
    if(!t || t._isDead) return false;
    if(Math.sqrt(Math.abs(x-t.x)*Math.abs(x-t.x)+ Math.abs(y-t.y)*Math.abs(y-t.y))<distance){
        return true;
    }
    return false;
}
\withinChecker(d,r,f){
    while(true){
        if(typeof d=="function"){
            for(obj in allWithin(d,r)){
                //print(r);
                f(obj);
            }
        }else if(within(d,r)){
            f(d);
        }
        update();
    }
}
nowait \watchHit(typeA,typeB,onHit) {
    layer.watchHit(typeA , typeB, \(a,b) {
        onHit.apply(this,[a,b]);
    });
}
nowait \currentThreadGroup() {//@deprecated
    return $Scheduler; //$currentThreadGroup;
}
nowait \die() {
    killThreadGroup();
    hide();
    fireEvent("die");
    _isDead=true;
    if (_poolArray) {
        _poolArray.push(this);
        objectPoolAge=(objectPoolAge||0)+1;
    }
}
nowait \hide() {
    layer.remove(this);
}
nowait \show(x,y,p) {
    layer.add(this);
    if (x!=null) this.x=x;
    if (y!=null) this.y=y;
    if (p!=null) this.p=p;
}

nowait \detectShape() {
    if (typeof p!="number") {
        p=0;
    }
    p=Math.floor(p);
    pImg=$imageList[p];
    if (!pImg) return;
    width=pImg.width;
    height=pImg.height;
}
nowait \isDead() {
    return _isDead;
}

nowait \_animation(){
    age++;
    if(animMode && age%animFps==0){
        p=anim[animFrame%anim.length];
        animFrame++;
    }
}
nowait \performTransform(ctx) {
    if (x!==x || y!==y || x==null || y==null) {
        //console.log("警告：",getClassInfo().shortName,"で座標の指定に誤りがあります");
    }
    ctx.translate(x,y);
    if(this.rotation!=0){
        ctx.rotate(this.rotation/180*Math.PI);
    }else{
        ctx.rotate(this.rotate/180*Math.PI);
    }
    if(typeof this.scaleY==="undefined") {
        ctx.scale(this.scaleX,this.scaleX);
    }else{
        ctx.scale(this.scaleX,this.scaleY);
    }
    ctx.globalAlpha=this.alpha/255;
}
nowait \draw(ctx) {
    if (x==null || y==null || _isInvisible) return;
    if (text!=null) {
        var splitsText=(text+"").split("\n");
        drawY=y;
        if (!size) size=15;
        if (!align) align="center";
        if (!fillStyle) fillStyle="white";
        if (font) ctx.font=size+"px "+font;
        ctx.fillStyle=fillStyle;
        ctx.globalAlpha=this.alpha/255;
        height=0;width=0;
        for(var textCount=0;textCount<splitsText.length;textCount++){
            var rect=drawTextRect(ctx, splitsText[textCount], x, drawY, size, align , "fill");
            if(width<rect.w) width=rect.w;
            height+=rect.h;
            drawY+=size;
        }
    } else if (fillStyle!=null) {
        ctx.save();
        performTransform(ctx);
        ctx.fillStyle=fillStyle;
        if (radius) {
            ctx.beginPath();
            ctx.arc(0,0,radius,0,2*Math.PI);
            ctx.fill();
        } else {
            ctx.fillRect(-width/2,-height/2,width,height);
        }
        ctx.restore();
    } else {
        detectShape();
        if (pImg) {
            _animation();
            ctx.save();
            performTransform(ctx);
            ctx.drawImage(
            pImg.image, pImg.x, pImg.y, pImg.width, pImg.height,
            -width/2, -height/2, width, height);
            ctx.restore();
        }
    }
    if (_fukidashi) {
        if (_fukidashi.c>0) {
            _fukidashi.c--;
            ctx.fillStyle="white";
            ctx.strokeStyle="black";
            fukidashi ( ctx , _fukidashi.text,
            x, y-height/2-10, _fukidashi.size);
        }
    }
}

\runAsync(f) {
    if (!_thread) throw new Error("runAsync should run in wait mode");
    _thread.runAsync(f);
}


\screenOut(a) {
    //オブジェクトが画面外に出たかどうかを判定します。
    if (!a) a=0;
    //var r=0;
    var cp=$Screen.convert(this,$Screen);
    return abs(clamped(cp.x,-a,$screenWidth+a))+
        abs(clamped(cp.y,-a,$screenHeight+a));
    /*var viewX=$Sprites.sx,viewY=$Sprites.sy;
    if (x<viewX+a)               r+=viewX+a-x;
    if (y<viewY+a)               r+=viewY+a-y;
    if (x>$screenWidth +viewX-a) r+=x-($screenWidth +viewX-a);
    if (y>$screenHeight+viewY-a) r+=y-($screenHeight+viewY-a);
    return r;*/
}
\screenOutChecker(d,f){
    while(true){
        while(true){
            if(screenOut()>d){
                f();
                break;
            }
            update();
        }
        while(true){
            if(screenOut()<=d){
                break;
            }
            update();
        }
        update();
    }
}
\file(path) {
    var d=Tonyu.currentProject.getDir();
    var files=d.rel("files/");
    return files.rel(path).setPolicy {topDir:d};
}
\waitInputDevice(fl) {
    runAsync \(f){
        $InputDevice.addOnetimeListener(f);
    };
}
/*\redrawScreen() {
    $Sprites.draw($Screen.buf[0]);
    $Screen.draw();
}*/

// from PlainChar
nowait \color(r,g,b) {
    return "rgb("+[r,g,b].join(",")+")";
}
nowait \loadPage(){
    $Boot.loadPage.apply($Boot,arguments);
    /*    all().die();
    new page(arg);
    die();*/
}

\setVisible(v) {
    _isInvisible=!v;
}
\useObjectPool=value {
    if (value) {
        _poolArray=$ObjectPool.poolList(getClassInfo().fullName);
    }
}
\appear(o,param) {
    if (typeof o=="function") {
        if (param) { param.layer=param.layer||layer; }
        var p=$ObjectPool.withdraw(o.meta.fullName);
        if (p) {
        	for (var k in Object.keys(p)) {
        	   if (k!="objectPoolAge") delete p[k];
		    }
		    o.call(p,param);
        	return p;
        } else {
        	return new o(param);
        }
    } else {
	    return o;
	}
}
\wait(t) {
    if(_thread) {
        _thread.suspend();
        if (t) {
            _thread.waitCount=t;
            if ($Scheduler) $Scheduler.addToNext(_thread);
        }
    } else if (_th) {
        if (t) {
            _th.waitCount=t;
        } else {
            if (_th.scheduled) _th.scheduled.unschedule(_th);
        }
    }
}
nowait \notify() {
    if (_th) {
        if (_th.scheduled) {
             _th.waitCount=0;
        } else {
            if ($Scheduler) $Scheduler.addToCur(_th);
        }
    }
}
nowait \findTouch(params) {
    if (typeof params==="number") params={scale:params};
    params=params||{};
    params.scale=params.scale||2;
    var r=getCrashRect();
    if (!r) return null;
    r.width*=params.scale;
    r.height*=params.scale;
    for (var t in $touches) {
        if (params.pickup || t.touched==1) {
            if (Math.abs(r.x-t.x)<r.width/2 &&
                Math.abs(r.y-t.y)<r.height/2) {
                return t;
            }
        }
    }
}
