extends Panel;

\new(opt){
    layers=[];
    _color="black";
    camera={screen=this};
    super(opt);
}

\drawLayers() {
    if (!_drawing) {
        if (!canvas) {
            throw new Error("canvas is null");
        }
        _drawing=true;
        if (clearBG) {
            clearRect(0,0,width,height);
        }
        fillStyle=_color+"";
        fillRect(0,0,width,height);
        var c=getContext();
        for (var i=layers.length-1;i>=0;i--) {
            var l=layers[i];
            l.draw(c);
        }
        _drawing=false;
    }
}
\draw(ctx) {
    drawLayers();
    super.draw(ctx);
}
\addLayer(group) {
    if (group is Sprites3D) {
        var camera=new Camera3D{group};
        layers.push(camera);
        return camera;
    }
    group=group||new Sprites;
    // spx,spy  Screen pivot x,y
    // wpx,wpy  World pivot x,y
    var layer=new Layer2D{
        spx:0,spy:0,
        wpx:0,wpy:0,rotation:0,scale:1,
        group,screen:this,index:layers.length
    };
    layers.push(layer);
    return layer;
}
\selectLayer(i) {
    var r=findLayer(i);
    if (r!=null) index=r;
}
\findLayer(i) {
    if (typeof i=="number") {
        if (layers[i]) return i;
    } else {
        for (var j=0; j<layers.length;j++) {
            if (layers[j]==i || layers[j].group==i) {
                return j;
            }
        }
    }
}
\setPivot(x,y) {
    layers[index].spx=x;
    layers[index].spy=y;
}
\scrollTo(x,y,scl,rot) {
    layers[index].wpx=x;
    layers[index].wpy=y;
    if (typeof scl=="number") layers[index].scale=scl;
    if (typeof rot=="number") layers[index].rotation=rot;
}
\canvas2buf(p) {
    p.layer=layer;
    return convert(p, this);
}
/*\resize(w,h) {
    super.resize(w,h);
    if (layoutManager && !layoutManager.isDead()) {
        layoutManager.doLayout();
    }
}*/

\convert(obj, toLayer) {// toLayer: Sprites
    if (toLayer==null) toLayer=this;
    if (!obj.layer) obj.layer=this; //throw new Error("layer not set");
    if (obj.layer===toLayer) return obj;
    if (obj.layer!==this && toLayer!==this) {
        var p=convert(obj,this);
        return convert(p,toLayer);
    } else if (obj.layer!==this && toLayer===this) {
        var l=findLayer(obj.layer);
        if (l!=null) {
            // world to screen
            l=layers[l];
            return l.world2screen(obj);
            var dx=obj.x-l.wpx;
            var dy=obj.y-l.wpy;
            var rt=l.rotation;
            // (x,y)= l.sp + R(rt)*(obj-l.wp)/l.scale;
            // (x)= l.spx + (cos(rt) cos(rt+90))*(dx)/l.scale;
            // (y)= l.spy + (sin(rt) sin(rt+90))*(dy)/l.scale;
            var x=l.spx + (cos(rt)*dx+cos(rt+90)*dy)*l.scale;
            var y=l.spy + (sin(rt)*dx+sin(rt+90)*dy)*l.scale;
            return {x,y,
                rotation:obj.rotation,
                scale:obj.scale,
                layer:this
            };
        } else {
            return super.convert(obj,this);
        }
    } else if (obj.layer===this && toLayer!==this) {
        var l=findLayer(toLayer);
        if (l!=null) {
            // screen to world
            l=layers[l];
            return l.screen2world(obj);
            var rt=-l.rotation;
            var dx=obj.x-l.spx;
            var dy=obj.y-l.spy;
            // (x,y)= l.sp + R(rt)*(obj-l.wp)/l.scale;
            // (x)= l.spx + (cos(rt) cos(rt+90))*(dx)/l.scale;
            // (y)= l.spy + (sin(rt) sin(rt+90))*(dy)/l.scale;
            var x=l.wpx + (cos(rt)*dx+cos(rt+90)*dy)/l.scale;
            var y=l.wpy + (sin(rt)*dx+sin(rt+90)*dy)/l.scale;
            return {x,y,
                rotation:rt,
                scale:1/l.scale,
                layer:toLayer
            };
        } else {
            return super.convert(obj,toLayer);
        }
    } else return obj;
}
\setBGColor(color){
    this._color=color;
}
\all() {
    var res=new TQuery{screen:this};
    for (var l in layers) {
        var q=l.group.all.apply(l.group,arguments);
        res.push(q);
    }
    return res;
}
\touchedFingers(q:TQuery,options) {
    //options: filter, layer
    var res=[];
    options=options||{};
    for (var e of q) {
        var r=e.getCrashRect();
        for (var i=0;i<$touches.length;i++) {
            var t=$touches[i];
            if (t.touched==1) {
                var p=convert(t,e.layer);
                if (p.x>=r.x-r.width/2 && p.x<=r.x+r.width/2 &&
                p.y>=r.y-r.height/2 && p.y<=r.y+r.height/2) {
                    t.captured=e;
                    res.push(t);
                }
            }
        }
    }
    return res;
}
