extends Actor;
native Math;
native $;
native console;
"field strict";
var chipWidth, chipHeight, row, col;
var bufferSize;
var bufAry;
var chipLayers, mapObj;
\getChipLayer(name) {
    for (var mp of chipLayers) {
        if (mp.name===name) return mp;
    }
    return null;
}
\addChipLayer(name) {
    var res=[];
    res.name=name;
    chipLayers.push(res);
    return res;
}
\new (param){
    chipLayers=[];
    bufferSize=param.bufferSize||1024;
    alpha=255;
    super(param);
    x=x||0;
    y=y||0;
    if (!align) align="left top";
    chipWidth=chipWidth||32;
    chipHeight=chipHeight||chipWidth||32;
    if (typeof col!=="number") col=$screenWidth/chipWidth;
    if (typeof row!=="number") row=$screenHeight/chipHeight;
    parseBufferSize();
    col=floor(col);row=floor(row);
    bufAry=createBuf(col*chipWidth,row*chipHeight);
    mapObj=true;
    addChipLayer("base");
    addChipLayer("on");
    for (var ml of chipLayers) {
        for(var j=0;j<row;j++){
            var rows = [];
            for(var i=0;i<col;i++){
                rows.push(-1);
            }
            ml.push(rows);
        }
    }
    initMap();
}
\setPivot(x,y) {
    align=["left","top",x,y];
}
\parseBufferSize() {
    \fitSize(size, unit) {
        size=floor(size/unit)*unit;
        if (size<unit) size=unit;
        return size;
    }
    if (typeof bufferSize==="number") {
        bufferSize={w:bufferSize, h:bufferSize};
    } else {
        bufferSize.w=bufferSize.w||bufferSize.width||1024;
        bufferSize.h=bufferSize.h||bufferSize.height||1024;
    }
    bufferSize.w=fitSize(bufferSize.w,chipWidth);
    bufferSize.h=fitSize(bufferSize.h,chipHeight);
}
\createBuf(width,height){
    var rh=floor(height); // remaining Height
    var ary=[];
    for(var j=0;0<rh;j++){
        var a=[];
        var h=rh;
        if(rh>bufferSize.h) h=bufferSize.h;
        if(rh<2) h=2;
        var rw=floor(width); // remaining Width
        for(var i=0;0<rw;i++){
            var w=rw;
            if(rw>bufferSize.w) w=bufferSize.w;
            if(rw<2) w=2;
            a.push($("<canvas>").attr{width:w,height:h});
            rw-=bufferSize.w;
        }
        ary.push(a);
        rh-=bufferSize.h;
    }
    // console.log(this);
    // console.log(ary);
    return ary;
}
\initMap(){
    //if(!mapTable) return;
    //if(!mapOnTable) return;
    for(var i=0;i<row;i++){
        for(var j=0;j<col;j++){
            setAll(j,i);
        }
    }
}
\redrawMap() {
    return redraw();
}
\redraw(){
    bufAry=createBuf(col*chipWidth,row*chipHeight);
    initMap();
}

\resolve(fileName, fallback) {
    if (typeof fileName==="string") {
        var r=file("../maps/").rel(fileName);
        if (!fallback || r.exists()) return r;
        r=file(fileName);
        return r;
    }
    return fileName;
}
\load(dataFile){
    dataFile=resolve(dataFile,true);
    if (!dataFile || !dataFile.obj) {
        print(dataFile);
        throw new Error(dataFile+" is not a file!");
    }
    var baseData=dataFile.obj();
    var mapTable=baseData[0];
    mapTable.name="base";
    row=mapTable.length;
    col=mapTable[0].length;
    var mapOnTable=baseData[1];
    mapOnTable.name="on";
    chipLayers=[mapTable, mapOnTable];
    if (baseData[2]) chipWidth=(baseData[2]-0)||chipWidth||32;
    if (baseData[3]) chipHeight=(baseData[3]-0)||chipHeight||32;
    redraw();
}
\save(saveFileName) {
    var saveDataFile=resolve(saveFileName);//file("../maps/").rel(saveFileName);
    var data=[chipLayers[0],chipLayers[1],chipWidth,chipHeight];
    saveDataFile.obj(data);
}
\setAll(setCol,setRow){
    if(setCol>=col || setRow>=row || setCol<0 || setRow<0) return;
    /*var oldP=mapTable[setRow][setCol];
    var oldOnP=mapOnTable[setRow][setCol];
    mapTable[setRow][setCol]=p;
    mapOnTable[setRow][setCol]=onP;*/
    var x1=floor(setCol*chipWidth/bufferSize.w);
    var y1=floor(setRow*chipHeight/bufferSize.h);
    var hs=bufAry.length;
    var j=y1;
    var ws=bufAry[j].length;
    var i=x1;
    var drawX = setCol*chipWidth-i*bufferSize.w;
    var drawY = setRow*chipHeight-j*bufferSize.h;
    var cv=bufAry[j][i];
    if (!cv) return;
    var ctx=cv[0].getContext("2d");
    if (!ctx) return;

    ctx.clearRect(drawX,drawY,chipWidth,chipHeight);
    // draw set
    for (var l of chipLayers) {
        var p=l[setRow][setCol];//Math.floor(p);
        var pImg=$imageList[p];
        if (pImg) {
            ctx.save();
            ctx.drawImage(
            pImg.image, pImg.x, pImg.y, pImg.width, pImg.height,
            drawX, drawY, chipWidth, chipHeight);
            ctx.restore();
        }
    }
}
\setWithLayerName(name, setCol, setRow , p) {
    if(setCol>=col || setRow>=row || setCol<0 || setRow<0) return;
    var l=getChipLayer(name);
    if (!l) throw new Error("No such chipLayer "+name);
    l[setRow][setCol]=p;
    setAll(setCol,setRow);
}
\set(setCol,setRow,p){
    setWithLayerName("base",setCol,setRow,p);
    //if(setCol>=col || setRow>=row || setCol<0 || setRow<0) return;
    //setAll(setCol,setRow,p,mapOnTable[setRow][setCol]);
}
\setOn(setCol,setRow,onP){
    setWithLayerName("on",setCol,setRow,p);
    //if(setCol>=col || setRow>=row || setCol<0 || setRow<0) return;
    //setAll(setCol,setRow,mapTable[setRow][setCol],onP);
}
\worldToChip(o) {
    var l=transform.worldToLocal(o);
    //print(l.x, l.y);
    var r=getDrawRect();
    return {x:Math.floor((l.x-r.left)/chipWidth),y:Math.floor((l.y-r.top)/chipHeight)};
}
\setOnAt(x,y,p){
    var l=worldToChip{x,y};
    setOn(l.x, l.y ,p);
}
\setAt(x,y,p){
    var l=worldToChip{x,y};
    set(l.x, l.y ,p);
}
\getWithLayerName(name, setCol, setRow) {
    if(setCol>=col || setRow>=row || setCol<0 || setRow<0) return -1;
    var l=getChipLayer(name);
    if (!l) throw new Error("No such chipLayer "+name);
    return l[setRow][setCol];
}
\get(getCol,getRow){
    return getWithLayerName("base",getCol,getRow);
}
\getAt(y){
    var l=worldToChip{x,y};
    return get(l.x, l.y);
}
\getOn(getCol,getRow){
    return getWithLayerName("on",getCol,getRow);
}
\getOnAt(x,y){
    var l=worldToChip{x,y};
    return getOn(l.x,l.y);
}
\scrollTo(scrollX,scrollY){
    x=-scrollX;
    y=-scrollY;
}
\getDrawRect() {
    var r=_align.getDrawRect{width: chipWidth* col, height: chipHeight* row};
    r.left=r.x-r.width/2;
    r.top=r.y-r.height/2;
    return r;
}
\draw(ctx) {
    //var lay=$Screen.findLayer(layer);
    //console.log("lay",lay);
    /*var lsx=lay.spx; // Screen pivot x
    var lsy=lay.spy; // Screen pivot y
    var lwx=lay.wpx; // World pivot x
    var lwy=lay.wpy; // World pivot y*/
    //var ls=(typeof lay.scale=="number")? lay.scale : 1; // layer scale
    //var lr=(typeof lay.rotation=="number")? lay.rotation : 0; // layer rotation
    var hs=bufAry.length;
    var sum=0;
    var r=getDrawRect();
    var sx=r.left;
    var sy=r.top;
    ctx.save();
    performTransform(ctx);
    for(var j=0;j<hs;j++){
        var ws=bufAry[j].length;
        for(var i=0;i<ws;i++){
            var pCv=bufAry[j][i];
            if (!pCv) return;
            var pCtx=pCv[0];
            if (!pCtx) return;
            var dx=sx+i*bufferSize.w; // Split Map x
            var dy=sy+j*bufferSize.h; // Split Map y
            var dw=pCtx.width;    // Split Map width
            var dh=pCtx.height;   // Split Map height
            /*var mx1=lsx+(dx-lwx);    // Map draw x1 (left)
            var my1=lsy+(dy-lwy);    // Map draw y1 (top)
            var mx2=lsx+(dx-lwx+dw); // Map draw x2 (right)
            var my2=lsy+(dy-lwy+dh); // Map draw y2 (buttom)*/
            //if(lr!=0 || (0<=mx2 && mx1<$screenWidth && 0<=my2 && my1<$screenHeight)){
            ctx.globalAlpha=alpha/255;
            //ctx.fillStyle="red";
            //ctx.fillRect(dx,dy,dw,dh);
            ctx.drawImage(
            pCtx, 0, 0, dw, dh,
            dx, dy, dw, dh);
                // if ((i+j)%2==1) {
                //     var ga = ctx.globalAlpha;
                //     var fi = ctx.fillStyle;
                //     ctx.globalAlpha = 0.125;
                //     ctx.fillStyle = "rgb(255, 255, 0)";
                //     ctx.fillRect(dx, dy, dw, dh);
                //     ctx.globalAlpha = ga;
                //     ctx.fillStyle = fi;
                // }
            sum++;
            //}
        }
    }
    ctx.restore();
}
