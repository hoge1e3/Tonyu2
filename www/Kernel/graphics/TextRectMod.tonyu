extends null;
"field strict";

nowait function drawTextRect(ctx, text, x, topY, h, align:Align2D , type) {
    if (!align) align=new Align2D;
    ctx.textBaseline=(align.v==="center" ? "middle" : align.v==="default" ? "top" : align.v);
    setFontSize(ctx, h);
    var met=ctx.measureText(text);
    var res={y:topY, w: met.width, h:h};
    var r=align.getDrawRect{width:met.width, height: h};
    res.x=x+r.x-r.width/2;
    if (type=="fill") ctx.fillText(text, res.x, topY);
    if (type=="stroke") ctx.strokeText(text, res.x, topY);
    return res;
}
nowait function setFontSize(ctx,sz) {
    //var post=ctx.font.replace(/^[0-9\.]+/,"");
    ctx.font=fontSizeChanged(ctx.font, sz);//sz+post;
}
function fontSizeChanged(fontString, newSize) {
    if ((newSize+"").match(/^\d+$/)) {
        newSize = `${newSize}px`;
    }
    let regex = /^((?:[a-zA-Z0-9-]+\s+)*)?([0-9.-]+[a-z%]+(?:\s*\/\s*[0-9.-]+[a-z%]*)?)(\s+.+)?$/;
    let match = fontString.match(regex);
    if (!match) {
        //throw new Error('Invalid font string format');
        return newSize+" "+fontString;
    }
    //const [, beforeSize = '', currentSizeAndLineHeight, afterSize = ''] = match;
    let beforeSize=match[1]||"";
    let currentSizeAndLineHeight=match[2];
    let afterSize=match[3]||"";

    //const [, lineHeight] = currentSizeAndLineHeight.split('/');
    let lineHeights = currentSizeAndLineHeight.split('/');
    let lineHeight = lineHeights[1];
    
    let newSizeWithLineHeight = lineHeight ? `${newSize}/${lineHeight.trim()}` : newSize;
    
    return `${beforeSize}${newSizeWithLineHeight}${afterSize}`.trim();
}


nowait function fukidashi(ctx, text, x, y, sz) {
    var align="c";
    var theight=20;
    var margin=5;
    var r=drawTextRect(ctx, text, x,y-theight-margin-sz, sz, align);
    ctx.beginPath();
    ctx.moveTo(x , y);
    ctx.lineTo(x+margin , y-theight);
    ctx.lineTo(x+r.w/2+margin , y-theight);
    ctx.lineTo(x+r.w/2+margin , y-theight-r.h-margin*2);
    ctx.lineTo(x-r.w/2-margin , y-theight-r.h-margin*2);
    ctx.lineTo(x-r.w/2-margin , y-theight);
    ctx.lineTo(x-margin , y-theight);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();

    var fs=ctx.fillStyle;
    ctx.fillStyle=ctx.strokeStyle;
    drawTextRect(ctx, text, x, y-theight-margin-sz, sz, align, "fill");
    ctx.fillStyle=fs;
}
