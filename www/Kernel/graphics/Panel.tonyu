/*---NEXT
extends BaseActor;//important change!<- why old style module cannot override \draw, Actor already overrided \draw.(But now extends Actor OK?)
includes PanelMod;
"field strict";
\new(opt)
\watchResize()
// DO NOT move to PanelMod! (layer is field)
\convert(obj, toLayer)
*/

extends Actor;
native $;
native Math;
native isNaN;
native Tonyu;
native Image;
native FS;
native requestAnimationFrame;
\new(opt){
    super(opt);
    //this.width=width;
    //this.height=height;
    if (canvas) {
        width=canvas.width;
        height=canvas.height;
        parallel("watchResize");
    } else {
        setPanel(width||$screenWidth||465,height||$screenHeight||465);
        //buf=$("<canvas>").attr{width,height};
    }
    if (_fillStyle && canvas) canvas.getContext("2d").fillStyle=_fillStyle+"";
    x=typeof x==="number"? x : width/2;
    y=typeof y==="number"? y : height/2;
    //if(align==null) align="center";
    if(alpha==null) alpha=255;
    if(_drawn==null) _drawn=false;

    registerEventHandler("touchstart", new PanelTouchStart{target:this});
}
\watchResize() {
    while(true) {
        if (width!=canvas.width || height!=canvas.height) {
            width=canvas.width;height=canvas.height;
            fireEvent("resize",{width,height});
        }
        runPromise(requestAnimationFrame);
        //update();
    }
}
//\setPanel({width,height})
\setPanel(width,height){
    if (!(width*height>0)) {
        throw new Error("Invalid Panel size: "+width+"x"+height);
    }
    this.width=trunc(width);
    this.height=trunc(height);
    buf=$("<canvas>").attr{width,height};
    canvas=buf[0];
    imageSmoothingEnabled=!$imageSmoothingDisabled;
    _drawn=false;
    fireEvent("resize",{width,height,force:true});
}
\resize(width,height){
    if (this.width==width && this.height==height) return;
    setPanel(width,height);
}
\getContext(){
    _drawn=true;
    return canvas.getContext("2d");
}
\context {
    _drawn=true;
    return canvas.getContext("2d");
}
\image {
    _drawn=true;
    return canvas;
}
\setFillStyle(color){
    fillStyle=color;
}
\fillStyle {
    return _fillStyle;
}
\fillStyle=val {
    _fillStyle=val;
    if (!canvas) return;
    context.fillStyle=val+"";
}
\strokeStyle=val {
    context.strokeStyle=val+"";
}
\lineWidth=val {
    context.lineWidth=val;
}
\fillCircle(x,y,r) {
    var ctx=context;
    ctx.fillStyle=fillStyle+"";
    ctx.beginPath();
    ctx.arc(x,y,r,0,2*$Math.PI);
    ctx.closePath();
    ctx.fill();
}
\fillRect(x,y,w,h){
    var ctx=getContext();
    //ctx.save();
    //ctx.fillStyle=fillStyle+"";
    ctx.fillRect(x,y,w,h);
    //ctx.restore();
}
\fillText(text,x,y,size,align,baseline){
    var ctx=getContext();
    ctx.save();
    text=text+"";
    var splits = text.split("\n");
    //ctx.clearRect(0,0,this.width,this.height);
    ctx.textAlign = align ||"center";
    ctx.textBaseline = baseline ||"alphabetic";
    size=size||15;
    ctx.fillStyle=fillStyle+"";
    var f=ctx.font.replace(/^[0-9\.]+/,"");
    ctx.font=size+f;
    for(var colCount=0;colCount<splits.length;colCount++){
        ctx.fillText(splits[colCount],x,y);
        y+=size;
    }
    ctx.restore();
}
\clearRect(clearX,clearY,clearW,clearH){
    var ctx=getContext();
    ctx.save();
    ctx.clearRect(clearX||0,clearY||0,clearW||width,clearH||height);
    ctx.restore();
    if (arguments.length==0) _drawn=false;
}
\getPixelColor(x,y){
    var d=getPixel(x,y);
    return new Color(d[0],d[1],d[2],d[3]);
}
\getPixel(getX,getY){
    var ctx;
    if(typeof getX=="number" && !isNaN(getX) &&
    typeof getY=="number" && !isNaN(getY)){
        ctx=getContext();
        imagedata=ctx.getImageData(getX,getY,1,1);
        colordata=[imagedata.data[0],imagedata.data[1],imagedata.data[2],imagedata.data[3]];
        //print(imagedata.data);
    }else{
        colordata=[0,0,0,0];
    }
    return(colordata);
}
\scroll(scrollX,scrollY){
    var ctx=getContext();
    ctx.save();
    imagedata=ctx.getImageData(0,0,this.width,this.height);
    clearRect(0,0,width,height);
    ctx.putImageData(imagedata,-scrollX,-scrollY);
    ctx.restore();
}
\draw(ctx){
    if(_drawn){
        var pImg=canvas;
        ctx.save();
        performTransform(ctx);
        var r=_align.getDrawRect(this);
        ctx.drawImage(
        pImg, 0, 0,width,height,
        r.x-r.width/2, r.y-r.height/2, width ,height);
        ctx.restore();
    }
}
nowait \drawSprite(x,y,p,options) {
    var pImg=$imageList[p];
    if (!pImg) return;
    if (options===true) options={f:true};
    options=options||{};
    var scaleX=typeof (options.scaleX)==="number"?options.scaleX:1;
    var scaleY=typeof (options.scaleY)==="number"?options.scaleY:scaleX;
    var rotation=options.rotation||options.angle||0;
    var ctx=context;
    if (options.f) scaleX*=-1;

    ctx.save();
    ctx.translate(x,y);
    ctx.rotate(rotation/180*Math.PI);
    ctx.scale(scaleX,scaleY);
    ctx.drawImage(
    pImg.image, pImg.x, pImg.y, pImg.width, pImg.height,
    -pImg.width/2, -pImg.height/2, pImg.width, pImg.height);
    ctx.restore();
}
nowait \copy() {
    /*context . drawImage(image, dx, dy)
    context . drawImage(image, dx, dy, dw, dh)
    context . drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)*/
    var sx, sy, sw, sh, dx, dy, dw, dh;
    var a=new ArgParser(arguments);
    var srcPanel=a.shift(Panel) || this;
    if (a.length<=4) {
        dx=a.shift();
        dy=a.shift();
        if (a.length==0) {
            context.drawImage(srcPanel.image,dx, dy);
        } else {
            dw=a.shift();
            dh=a.shift();
            if (dw*dh!=0) {
                context.drawImage(srcPanel.image,dx,dy,dw,dh);
            }
        }
    } else {
        sx=a.shift();
        sy=a.shift();
        sw=a.shift();
        sh=a.shift();
        dx=a.shift();
        if (typeof dx==="object") {
            var params=dx;
            // params: x,y,scaleX,scaleY,rotation
        }
        dy=a.shift();
        dw=a.shift() || sw;
        dh=a.shift() || sh;
        //print(sx, sy, sw, sh, dx, dy, dw, dh);
        if (sw*sh*dw*dh!=0) {
            context.drawImage(srcPanel.image,sx, sy, sw, sh, dx, dy, dw, dh);
        }
    }
}
// DO NOT move to PanelMod! (layer is field)
\convert(obj, toLayer) {
    // Only supports this <-> this.layer
    // Why?  other layers (i.e. $mainLayer) are depends on screen(When Multi screen)
    // ({x,y})   -> from==this to==layer
    // ({x,y},layer) -> from==this to==layer
    // ({x,y,this})  -> from==this to==layer
    // ({x,y},this)  -> from==layer to==this
    // ({x,y,layer}) -> from==layer to==this
    var fromLayer=obj.layer;
    if (fromLayer==null && toLayer==null) {
        fromLayer=this;toLayer=layer;
    } else if (fromLayer==null && toLayer===layer) {
        fromLayer=this;
    } else if (fromLayer===this && toLayer==null) {
        toLayer=layer;
    } else if (fromLayer==null && toLayer===this) {
        fromLayer=layer;
    } else if (fromLayer===layer && toLayer==null) {
        toLayer=this;
    }
    if (fromLayer===toLayer) return obj;
    var scaleY=this.scaleY||scaleX;
    if (fromLayer==null || toLayer==null) throw new Error("layer not set");
    if (fromLayer===this && toLayer===layer) {
        // panelXY to world
        var r=_align.getDrawRect(this);

        var dx=obj.x+r.x-r.width/2;
        var dy=obj.y+r.y-r.height/2;
        var rt=rotation;
        // (x,y)= l.sp + R(rt)*(obj-l.wp)/l.scale;
        // (x)= l.spx + (cos(rt) cos(rt+90))*(dx)/l.scale;
        // (y)= l.spy + (sin(rt) sin(rt+90))*(dy)/l.scale;
        var x=this.x+(cos(rt)*dx+cos(rt+90)*dy)*scaleX;
        var y=this.y+(sin(rt)*dx+sin(rt+90)*dy)*scaleY;
        return {x,y,
            rotation:obj.rotation,
            scale:obj.scale,
            layer:toLayer
        };
    } else if (fromLayer===layer && toLayer===this) {
        // world to panelXY
        var r=_align.getDrawRect(this);
        var rt=-rotation;
        var dx=obj.x-(this.x);
        var dy=obj.y-(this.y);
        //   print(width,height,rt,scaleX,scaleY);
        // (x,y)= l.sp + R(rt)*(obj-l.wp)/l.scale;
        // (x)= l.spx + (cos(rt) cos(rt+90))*(dx)/l.scale;
        // (y)= l.spy + (sin(rt) sin(rt+90))*(dy)/l.scale;
        var x=r.width/2-r.x + (cos(rt)*dx+cos(rt+90)*dy)/scaleX;
        var y=r.height/2-r.y + (sin(rt)*dx+sin(rt+90)*dy)/scaleY;
        return {x,y,
            rotation:rt,
            scale:1/scaleX,
            layer:toLayer
        };
    } else {
        print("no support",obj.layer, toLayer);
        throw new Error("not support");
    }
}
\drawLine(x,y,dx,dy) {
    if (dx==null && dy==null) {
        if (x==null && y==null) {
            px=null;py=null;return;
        }
        if (px==null && py==null) {
            px=x;py=y;return;
        }
        dx=x;dy=y;x=px;y=py;px=dx;py=dy;
    }
    context.beginPath();
    context.moveTo(x,y);
    context.lineTo(dx,dy);
    context.stroke();
}
\slicePattern(x,y,width,height) {
    return {image:canvas,x,y,width,height};
}
\addPattern(x,y,width,height) {
    $imageList.push(slicePattern(x,y,width,height));
    return $imageList.length-1;
}
\getImageData(x,y,width,height) {
    return context.getImageData(x,y,width,height);
}
\putImageData(data,x,y) {
    return context.putImageData(data,x,y);
}

\setAsText(text:String, options) {
    options=options||{};
    var padding=options.padding || 0;
    switch (typeof padding) {
        case "number":
        padding={left: padding, top:padding, right: padding, bottom:padding};
        break;
        case "string":
        padding=padding.split(/[ ,]+/);
        switch (padding.length) {
            case 1:
            padding={left: padding[0]-0, top:padding[0]-0, right: padding[0]-0, bottom:padding[0]-0};
            break;
            case 2:
            padding={left: padding[0]-0, top:padding[1]-0, right: padding[0]-0, bottom:padding[1]-0};
            break;
            default:
            padding={left: padding[0]-0, top:padding[1]-0, right: padding[2]-0, bottom:padding[3]-0};
        }
    }
    padding.left=padding.left||0;
    padding.right=padding.right || padding.left;
    padding.top=padding.top || 0;
    padding.bottom=padding.bottom || padding.top;
    var f=options.fillStyle || fillStyle;
    var size=options.size || 15;
    var a=new Align2D("left top");
    var rect=drawTextRect(context, text, padding.left, padding.top, size, a, "test");
    resize(padding.left+ rect.w+padding.right, padding.top+rect.h+padding.bottom);
    var bg=options.background || options.bg || \{};
    if (typeof bg!=="function") {
        fillStyle=bg;
        fillRect(0,0,width,height);
    } else {
        bg(this);
    }
    fillStyle=f;
    var rect=drawTextRect(context, text, padding.left, padding.top, size, a, "fill");
}
\replace(x,y,width,height,replacement) {

}
\save(fn) {
    var url=buf[0].toDataURL();
    if (typeof fn==="string") fn=file(fn);
    return fn.text( url );
}
\download(filename) {
    filename=filename||"download.png";
    var url=buf[0].toDataURL();
    FS.Content.url(url).download(filename);
}
\load(fn) {
    if (typeof fn==="string") fn=file(fn);
    var d=new $.Deferred();
    var url=fn.text();
    var element=$("<img>").css{display:"none"}.appendTo("body");
    element.on("load") \{
        var img = new Image();
        img.src = element.attr('src');
        var width = img.width;
        var height = img.height;
        //print(width,height);
        resize(width,height);
        context.drawImage(img, 0,0);
        d.resolve(this);
    };
    element.attr{src=url};
    return d.promise();
}
\imageSmoothingEnabled=v {
    var context=this.context;
    if (!context) return;
    if (typeof context.msImageSmoothingEnabled==="boolean") {
        context.msImageSmoothingEnabled=v;
    } else {
        context.imageSmoothingEnabled=v;
    }
}
\imageSmoothingEnabled {
    var context=this.context;
    if (!context) return;
    if (typeof context.msImageSmoothingEnabled==="boolean") {
        return context.msImageSmoothingEnabled;
    } else {
        return context.imageSmoothingEnabled;
    }
}
\replaceColor() {
    var a=new ArgParser(arguments);
    var top=0,left=0;
    var w=width, h=height;
    if (a.length>=4) {
        left=a.shift();
        top=a.shift();
        w=a.shift();
        h=a.shift();
    }
    var func=a.shift();
    if (typeof func!=="function") {
        var ctx=context;
        ctx.save();
        ctx.beginPath();
        ctx.moveTo(left,top);
        ctx.lineTo(left+w,top);
        ctx.lineTo(left+w,top+h);
        ctx.lineTo(left,top+h);
        ctx.closePath();
        ctx.clip();
        ctx.globalCompositeOperation="source-in";
        if (func) fillStyle=func;
        ctx.fillRect(left,top,w,h);
        ctx.restore();
        return;
    }
    var data=getImageData(left,top,w,h);
    for (var i=0;i<h;i++) {
        for (var j=0;j<w;j++) {
            func(new Color(data,j,i),left+j,top+i);
        }
    }
    putImageData(data,left,top);
}
