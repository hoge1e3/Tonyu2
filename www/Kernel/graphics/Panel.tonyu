extends Actor;
native $;
native Math;
native isNaN;
native Tonyu;
native Image;
\new(opt){
    super(opt);
    //this.width=width;
    //this.height=height;
    if (canvas) {
        width=canvas.width;
        height=canvas.height;
        parallel("watchResize");
    } else {
        setPanel(width||$screenWidth||465,height||$screenHeight||465);
        //buf=$("<canvas>").attr{width,height};
    }
    if (_fillStyle && canvas) canvas.getContext("2d").fillStyle=_fillStyle;
    x=x||width/2;
    y=y||height/2;
    if(align==null) align="center";
    if(alpha==null) alpha=255;
    if(_drawn==null) _drawn=false;
}
\watchResize() {
    while(true) {
        if (width!=canvas.width || height!=canvas.height) {
            width=canvas.width;height=canvas.height;
            fireEvent("resize",{width,height});
        }
        update();
    }
}
//\setPanel({width,height})
\setPanel(width,height){
    this.width=trunc(width);
    this.height=trunc(height);
    buf=$("<canvas>").attr{width,height};
    canvas=buf[0];
    fireEvent("resize",{width,height,force:true});
}
\resize(width,height){
    if (this.width==width && this.height==height) return;
    setPanel(width,height);
}
\getContext(){
    _drawn=true;
    return canvas.getContext("2d");
}
\context {
    _drawn=true;
    return canvas.getContext("2d");
}
\image {
    _drawn=true;
    return canvas;
}
\setFillStyle(color){
    fillStyle=color;
}
\fillStyle {
    return _fillStyle;
}
\fillStyle=val {
    _fillStyle=val;
    if (!canvas) return;
    context.fillStyle=val;
}
\strokeStyle=val {
    context.strokeStyle=val;
}
\lineWidth=val {
    context.lineWidth=val;
}
\fillCircle(x,y,r) {
    var ctx=context;
    ctx.fillStyle=fillStyle;
    ctx.beginPath();
    ctx.arc(x,y,r,0,2*$Math.PI);
    ctx.closePath();
    ctx.fill();
}
\fillRect(x,y,rectWidth,rectHeight){
    var ctx=getContext();
    ctx.save();
    //ctx.clearRect(0,0,this.width,this.height);
    ctx.fillStyle=fillStyle;
    ctx.fillRect(x,y,rectWidth,rectHeight);
    ctx.restore();
}
\fillText(text,x,y,size,align){
    var ctx=getContext();
    ctx.save();
    text=text+"";
    var splits = text.split("\n");
    //ctx.clearRect(0,0,this.width,this.height);
    ctx.textAlign = align ||"center";
    size=size||15;
    ctx.fillStyle=fillStyle;
    var f=ctx.font.replace(/^[0-9\.]+/,"");
    ctx.font=size+f;
    for(var colCount=0;colCount<splits.length;colCount++){
        ctx.fillText(splits[colCount],x,y);
        y+=size;
    }
    ctx.restore();
}
\clearRect(clearX,clearY,clearW,clearH){
    var ctx=getContext();
    ctx.save();
    ctx.clearRect(clearX,clearY,clearW,clearH);
    ctx.restore();
}
\getPixel(getX,getY){
    var ctx;
    if(typeof getX=="number" && !isNaN(getX) &&
    typeof getY=="number" && !isNaN(getY)){
        ctx=getContext();
        imagedata=ctx.getImageData(getX,getY,1,1);
        colordata=[imagedata.data[0],imagedata.data[1],imagedata.data[2],imagedata.data[3]];
        //print(imagedata.data);
    }else{
        colordata=[0,0,0,0];
    }
    return(colordata);
}
\scroll(scrollX,scrollY){
    var ctx=getContext();
    ctx.save();
    imagedata=ctx.getImageData(0,0,this.width,this.height);
    clearRect(0,0,width,height);
    ctx.putImageData(imagedata,-scrollX,-scrollY);
    ctx.restore();
}
\draw(ctx){
    if(_drawn){
        var pImg=canvas;
        ctx.save();
        if(align=="left"){
            ctx.translate(x+width/2,y+height/2);
        }else if(align=="center"){
            ctx.translate(x,y);
        }else if(align=="right"){
            ctx.translate(x-width/2,y-height/2);
        }
        if(this.rotation!=0){
            ctx.rotate(this.rotation/180*Math.PI);
        }else{
            ctx.rotate(this.rotate/180*Math.PI);
        }
        if(typeof this.scaleY==="undefined") {
            ctx.scale(this.scaleX,this.scaleX);
        }else{
            ctx.scale(this.scaleX,this.scaleY);
        }
        ctx.globalAlpha=this.alpha/255;
        ctx.drawImage(
        pImg, 0, 0,width,height,
        -width/2, -height/2, width ,height);
        ctx.restore();
    }
}
nowait \drawSprite(x,y,p,options) {
    var pImg=$imageList[p];
    if (options===true) options={f:true};
    options=options||{};
    var scaleX=typeof (options.scaleX)==="number"?options.scaleX:1;
    var scaleY=typeof (options.scaleY)==="number"?options.scaleY:scaleX;
    var rotation=options.rotation||options.angle||0;
    var ctx=context;
    if (options.f) scaleX*=-1;

    ctx.save();
    ctx.translate(x,y);
    ctx.rotate(rotation/180*Math.PI);
    ctx.scale(scaleX,scaleY);
    ctx.drawImage(
    pImg.image, pImg.x, pImg.y, pImg.width, pImg.height,
    -pImg.width/2, -pImg.height/2, pImg.width, pImg.height);
    ctx.restore();
}
nowait \copy() {
    /*context . drawImage(image, dx, dy)
    context . drawImage(image, dx, dy, dw, dh)
    context . drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)*/
    var sx, sy, sw, sh, dx, dy, dw, dh;
    var a=new ArgParser(arguments);
    var srcPanel=a.shift(Panel) || this;
    if (a.length<=4) {
        dx=a.shift();
        dy=a.shift();
        if (a.length==0) {
            context.drawImage(srcPanel.image,dx, dy);
        } else {
            dw=a.shift();
            dh=a.shift();
            if (dw*dh!=0) {
                context.drawImage(srcPanel.image,dx,dy,dw,dh);
            }
        }
    } else {
        sx=a.shift();
        sy=a.shift();
        sw=a.shift();
        sh=a.shift();
        dx=a.shift();
        dy=a.shift();
        dw=a.shift() || sw;
        dh=a.shift() || sh;
        //print(sx, sy, sw, sh, dx, dy, dw, dh);
        if (sw*sh*dw*dh!=0) {
            context.drawImage(srcPanel.image,sx, sy, sw, sh, dx, dy, dw, dh);
        }
    }
}
\convert(obj, toLayer) {
    if (toLayer==null) toLayer=this;
    var scaleY=this.scaleY||scaleX;
    if (!obj.layer) throw new Error("layer not set");
    if (obj.layer===this && toLayer===layer) {
        var dx=obj.x-width/2;
        var dy=obj.y-height/2;
        var rt=rotation;
        // (x,y)= l.sp + R(rt)*(obj-l.wp)/l.scale;
        // (x)= l.spx + (cos(rt) cos(rt+90))*(dx)/l.scale;
        // (y)= l.spy + (sin(rt) sin(rt+90))*(dy)/l.scale;
        var x=this.x+(cos(rt)*dx+cos(rt+90)*dy)*scaleX;
        var y=this.y+(sin(rt)*dx+sin(rt+90)*dy)*scaleY;
        return {x,y,
            rotation:obj.rotation,
            scale:obj.scale,
            layer:toLayer
        };
    } else if (obj.layer===layer && toLayer===this) {
        var rt=-rotation;
        var dx=obj.x-(this.x);
        var dy=obj.y-(this.y);
        //   print(width,height,rt,scaleX,scaleY);
        // (x,y)= l.sp + R(rt)*(obj-l.wp)/l.scale;
        // (x)= l.spx + (cos(rt) cos(rt+90))*(dx)/l.scale;
        // (y)= l.spy + (sin(rt) sin(rt+90))*(dy)/l.scale;
        var x=width/2 + (cos(rt)*dx+cos(rt+90)*dy)/scaleX;
        var y=height/2 + (sin(rt)*dx+sin(rt+90)*dy)/scaleY;
        return {x,y,
            rotation:rt,
            scale:1/scaleX,
            layer:toLayer
        };
    } else {
        print("no support",obj.layer, toLayer);
        throw new Error("not support");
    }
}
\drawLine(x,y,dx,dy) {
    if (dx==null && dy==null) {
        if (x==null && y==null) {
            px=null;py=null;return;
        }
        if (px==null && py==null) {
            px=x;py=y;return;
        }
        dx=x;dy=y;x=px;y=py;px=dx;py=dy;
    }
    context.beginPath();
    context.moveTo(x,y);
    context.lineTo(dx,dy);
    context.stroke();
}
\slicePattern(x,y,width,height) {
    return {image:canvas,x,y,width,height};
}
\addPattern(x,y,width,height) {
    $imageList.push(slicePattern(x,y,width,height));
    return $imageList.length-1;
}
\getImageData(x,y,width,height) {
    return context.getImageData(x,y,width,height);
}
\putImageData(data,x,y) {
    return context.putImageData(data,x,y);
}

\replace(x,y,width,height,replacement) {

}
\save(fn) {
    var url=buf[0].toDataURL();
    if (typeof fn==="string") fn=file(fn);
    fn.text( url );
}
\load(fn) {
    if (typeof fn==="string") fn=file(fn);
    var d=new $.Deferred();
    var url=fn.text();
    var element=$("<img>").css{display:"none"}.appendTo("body");
    element.on("load") \{
        var img = new Image();
        img.src = element.attr('src');
        var width = img.width;
        var height = img.height;
        //print(width,height);
        resize(width,height);
        context.drawImage(img, 0,0);
        d.resolve(this);
    };
    element.attr{src=url};
    return d.promise();
}
