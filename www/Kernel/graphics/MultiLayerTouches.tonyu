extends TObject;
includes MathMod;
native WeakMap;
"field strict";
var screen;
var layers=new WeakMap;
\add(a:Actor) {
    var layer=screen.findLayer( a.getSpriteGroup() );
    var ts=getOrNewTouchables(layer);
    if (ts.indexOf(a)<0) ts.push(a);
}
\remove(a:Actor) {
    var layer=screen.findLayer( a.getSpriteGroup() );
    var ts=getOrNewTouchables(layer);
    var idx=ts.indexOf(a);
    if (idx>=0) ts.splice(idx,1);
}
\getOrNewTouchables(layer) {
    /*if (layer ===$mainLayer3D || layer.group===$mainLayer3D) {
        throw new Error("Why 3d?");
    }*/
    var res=getTouchables(layer);
    if (res) return res;
    res=[];
    layers.set(layer,res);
    return res;
}
\getTouchables(layer) {
    return layers.get(layer);
}
\findActor(shape) {
    var cands=[],i=0;
    for (var i=0; i<screen.layers.length;i++) {// front -> back
        var layer=screen.layers[i];
        var ts=getTouchables(layer);
        if (!ts) continue;
        var localShape=shape.layerChanged(layer);
        //ts=ts.sort\(a,b) {return a.zOrder-b.zOrder;};
        for (var t of ts) {
            var c=t.getTouchShape();
            if (c.intersects(localShape)) {
                var ch=c.layerChanged(shape.layer);
                cands.push{
                    actor: t,
                    shape: ch,
                    zOrder: t.zOrder,
                    zOrderLayer: i,
                    dist: dist(shape.x-ch.x, shape.y-ch.y)
                };
                //return t;
            }
        }
    }
    // Erase "overlapping" objects
    for (var i=0; i<cands.length;i++) {
        var shape=cands[i].shape;
        for (var j=i+1; j<cands.length;j++) {
            if (shape.intersects(cands[j].shape)) {
                var cmp=compZ(cands[j],cands[i]);
                if (cmp>0) {
                    cands[j].dead=true;
                }
                if (cmp<0) {
                    cands[i].dead=true;
                }
            }
        }
    }
    \compZ(a,b) {
        var c=a.zOrderLayer-b.zOrderLayer;
        if (c) return c;
        return a.zOrder-b.zOrder;
    }
    cands=cands.filter \(e){return !e.dead;};
    cands.sort\(a,b) {
        return a.dist-b.dist;
    };
    return cands[0] && cands[0].actor;
}
\saveAndClear() {
    var saved=layers;
    layers=new WeakMap;
    return saved;
}
\restore(saved) {
    layers=saved;
}
