// Pad version 2.0
// @makkii_bcr

// Padクラス
extends Actor;

\new(opt) {
    opt=opt||{};
    super(opt);

    if (!buttonCnt && (version == null || version == 1) && $pat_inputPad != undefined) {
        // Pad ver 1.0 を使う(後方互換)
        version = 1;
    } else {
        // Pad ver 2.0 を使う
        version = 2;
    }

    if (version == 1) {
        newPadV1(opt);
    } else {
        newPadV2(opt);
    }

    if (active == null) active = true;
    if (active) {
        activate(opt);
    }
}

\activate(opt) {
    if (opt) {
        if (opt.buttonCnt) {
            buttonCnt = opt.buttonCnt;
            drawPanel();
            setXYPanel();
        }
    }
    active = true;
    if (!actived) {
        actived = true;
    }
}

\newPadV2(opt) {
    died = false;
    // パッドレイアウト
    // 0 : ボタン作成なし(自分で作る)(v2.0未実装)
    // 1 : デフォルトのボタン配置
    // 2 : アナログパッドがあるボタン配置(v2.0未実装)
    if (layout == null) layout = 1; // デフォルトパッド
    // ボタンの個数 (十字キー以外)
    if (buttonCnt == null) buttonCnt = 1; // 1ボタンのみ
    // ボタン自動再配置
    if (autoMove == null) autoMove = true; // 自動再配置
    // レイヤー
    if (opt.layer == null) layer = $frontLayer;

    initButton();
}

\newPadV1(opt) {
    APAD_DIAG_SIZE = 96;
    died = false;
    padImageP = $pat_inputPad;
    padUpdateFrame = -1;
    if (opt.layer == null) layer = $frontLayer;
    jujiKey = new Actor{x:96+1, y:$screenHeight-96-1, p:padImageP+0,zOrder:-9, layer};
    no1Key = new Actor{x:$screenWidth-96, y:$screenHeight-96, p:padImageP+1,zOrder:-9, layer};
    jujiKey.show();
    no1Key.show();

    jujiKeyPushU = new Actor{x:jujiKey.x, y:jujiKey.y-60, p:padImageP+2, zOrder:-10, layer};
    jujiKeyPushL = new Actor{x:jujiKey.x-60, y:jujiKey.y, p:padImageP+2, zOrder:-10, layer};
    jujiKeyPushR = new Actor{x:jujiKey.x+60, y:jujiKey.y, p:padImageP+2, zOrder:-10, layer};
    jujiKeyPushD = new Actor{x:jujiKey.x, y:jujiKey.y+60, p:padImageP+2, zOrder:-10, layer};
    jujiKeyPush1 = new Actor{x:no1Key.x, y:no1Key.y, p:padImageP+2, scaleX:2, zOrder:-10, layer};
    jujiKeyPushU.hide();
    jujiKeyPushL.hide();
    jujiKeyPushR.hide();
    jujiKeyPushD.hide();
    jujiKeyPush1.hide();
}

\die() {
    if (version == 1) {
        dieV1();
    } else {
        dieV2();
    }
    super.die();
}

\dieV2() {
    died = true;
    if (buttons != null) {
        for (var i=0; i<buttons.length; i++) {
            var obj = buttons[i];
            if (obj) {
                obj.die();
                buttons[i] = null;
            }
        }
        buttons = null;
    }
    if (jujiPads != null) {
        for (var i=0; i<jujiPads.length; i++) {
            var obj = jujiPads[i];
            if (obj) {
                obj.die();
                jujiPads[i] = null;
            }
        }
        jujiPads = null;
    }
}

\dieV1() {
    died = true;
    jujiKey.die();
    no1Key.die();
    jujiKeyPushU.show();jujiKeyPushU.die();
    jujiKeyPushL.show();jujiKeyPushL.die();
    jujiKeyPushR.show();jujiKeyPushR.die();
    jujiKeyPushD.show();jujiKeyPushD.die();
    jujiKeyPush1.show();jujiKeyPush1.die();
}

\initButton() {
    DEFALT_SCREEN_WIDTH = 465;

    p = -1;

    jujiPads = [];
    buttons = [];
    padScaleX = 1;
    padUpdateFrame = -1;

    if (layout == 1) {
        // デフォルトのボタン配置
        initButtonLayout1();
        setXYPanelLayout1();
    }
}

\initButtonLayout1() {
    var screenSize = $screenWidth;
    if ($screenWidth > $screenHeight) screenSize = $screenHeight;
    padScaleX = screenSize / 465;
    oldPadScaleX = padScaleX;
    oldButtonCnt = buttonCnt;

    var tempJujiPadWidth = trunc(72 * screenSize / DEFALT_SCREEN_WIDTH) * 3;
    var tempJujiPadHeight = trunc(72 * screenSize / DEFALT_SCREEN_WIDTH) * 3;
    var tempJujiPadBorder = 4 * padScaleX;

    if (jujiPadWidth != null) tempJujiPadWidth = jujiPadWidth;
    if (jujiPadHeight != null) tempJujiPadHeight = jujiPadHeight;
    if (jujiPadBorder != null) tempJujiPadBorder = jujiPadBorder;

    jujiPads[0] = new PadButton{
        pad:this,
        mode:10001,
        x:101,
        y:$screenHeight-101,
        alpha,
        layer,
        width:tempJujiPadWidth,
        height:tempJujiPadHeight,
        padFillColor:jujiPadFillColor,
        padBorder:tempJujiPadBorder,
        padBorderColor:jujiPadBorderColor,
        padLPushColor:(jujiPadLPushColor == null ? jujiPadPushColor : jujiPadLPushColor),
        padRPushColor:(jujiPadRPushColor == null ? jujiPadPushColor : jujiPadRPushColor),
        padUPushColor:(jujiPadUPushColor == null ? jujiPadPushColor : jujiPadUPushColor),
        padDPushColor:(jujiPadDPushColor == null ? jujiPadPushColor : jujiPadDPushColor),
        padLColor:(jujiPadLColor == null ? jujiPadColor : jujiPadLColor),
        padRColor:(jujiPadRColor == null ? jujiPadColor : jujiPadRColor),
        padUColor:(jujiPadUColor == null ? jujiPadColor : jujiPadUColor),
        padDColor:(jujiPadDColor == null ? jujiPadColor : jujiPadDColor),
        diagonalEnable:jujiPadDiagonalEnable,
        active,
    };

    for (var i=0; i<4; i++) {
        var tempPadWidth       = buttonWidth;
        var tempPadHeight      = buttonHeight;
        var tempPadFillColor   = buttonFillColor;
        var tempPadBorder      = buttonBorder;
        var tempPadBorderColor = buttonBorderColor;
        var tempPadPushColor   = buttonPushColor;
        var tempPadText        = buttonText;
        var tempPadTextSize    = buttonTextSize;
        var tempPadTextColor   = buttonTextColor;

        if (buttonCnt == 1) {
            tempPadWidth = 160 * padScaleX;
            tempPadHeight = 160 * padScaleX;
            tempPadBorder = 1 * padScaleX;
            tempPadTextSize = 120 * screenSize / DEFALT_SCREEN_WIDTH;
        } else if (buttonCnt >= 2) {
            if (i < 4) {
                var obj = buttons[i];
                if (obj) {
                    if (buttonCnt == 3 && i == 2) {
                        tempPadWidth = 194 * padScaleX;
                    } else {
                        tempPadWidth = 96 * padScaleX;
                    }
                    tempPadHeight = 96 * padScaleX;
                    tempPadBorder = 1 * padScaleX;
                    tempPadTextSize = 72 * screenSize / DEFALT_SCREEN_WIDTH;
                }
            }
        }

        if (buttonWidth     != null) tempPadWidth    = buttonWidth;
        if (buttonHeight    != null) tempPadHeight   = buttonHeight;
        if (buttonBorder    != null) tempPadBorder   = buttonBorder;
        if (tempPadTextSize != null) tempPadTextSize = tempPadTextSize;

        if (i == 0) {
            if (button1Width       != null) tempPadWidth       = button1Width;
            if (button1Height      != null) tempPadHeight      = button1Height;
            if (button1FillColor   != null) tempPadFillColor   = button1FillColor;
            if (button1Border      != null) tempPadBorder      = button1Border;
            if (button1BorderColor != null) tempPadBorderColor = button1BorderColor;
            if (button1PushColor   != null) tempPadPushColor   = button1PushColor;
            if (button1Text        != null) tempPadText        = button1Text;
            if (button1TextSize    != null) tempPadTextSize    = button1TextSize;
            if (button1TextColor   != null) tempPadTextColor   = button1TextColor;
        } else if (i == 1) {
            if (button2Width       != null) tempPadWidth       = button2Width;
            if (button2Height      != null) tempPadHeight      = button2Height;
            if (button2FillColor   != null) tempPadFillColor   = button2FillColor;
            if (button2Border      != null) tempPadBorder      = button2Border;
            if (button2BorderColor != null) tempPadBorderColor = button2BorderColor;
            if (button2PushColor   != null) tempPadPushColor   = button2PushColor;
            if (button2Text        != null) tempPadText        = button2Text;
            if (button2TextSize    != null) tempPadTextSize    = button2TextSize;
            if (button2TextColor   != null) tempPadTextColor   = button2TextColor;
        } else if (i == 2) {
            if (button3Width       != null) tempPadWidth       = button3Width;
            if (button3Height      != null) tempPadHeight      = button3Height;
            if (button3FillColor   != null) tempPadFillColor   = button3FillColor;
            if (button3Border      != null) tempPadBorder      = button3Border;
            if (button3BorderColor != null) tempPadBorderColor = button3BorderColor;
            if (button3PushColor   != null) tempPadPushColor   = button3PushColor;
            if (button3Text        != null) tempPadText        = button3Text;
            if (button3TextSize    != null) tempPadTextSize    = button3TextSize;
            if (button3TextColor   != null) tempPadTextColor   = button3TextColor;
        } else if (i == 3) {
            if (button4Width       != null) tempPadWidth       = button4Width;
            if (button4Height      != null) tempPadHeight      = button4Height;
            if (button4FillColor   != null) tempPadFillColor   = button4FillColor;
            if (button4Border      != null) tempPadBorder      = button4Border;
            if (button4BorderColor != null) tempPadBorderColor = button4BorderColor;
            if (button4PushColor   != null) tempPadPushColor   = button4PushColor;
            if (button4Text        != null) tempPadText        = button4Text;
            if (button4TextSize    != null) tempPadTextSize    = button4TextSize;
            if (button4TextColor   != null) tempPadTextColor   = button4TextColor;
        }

        buttons[i] = new PadButton{
            pad:this,
            mode:10000,
            x:50+(i-4)%4*100,
            y:50+trunc((i-4)/4)*100,
            alpha,
            layer,
            width:tempPadWidth,
            height:tempPadHeight,
            padFillColor:tempPadFillColor,
            padBorder:tempPadBorder,
            padBorderColor:tempPadBorderColor,
            padPushColor:tempPadPushColor,
            padText:tempPadText?tempPadText:i+1,
            padTextSize:tempPadTextSize,
            padTextColor:tempPadTextColor,
            active
        };
        buttons[i].drawPanel();
    }

    if (autoMove) drawPanel();
}

\drawPanel() {
    if (layout == 1) {
        var screenSize = $screenWidth;
        if ($screenWidth > $screenHeight) screenSize = $screenHeight;
        jujiPads[0].width = trunc(72 * screenSize / DEFALT_SCREEN_WIDTH) * 3;
        jujiPads[0].height = trunc(72 * screenSize / DEFALT_SCREEN_WIDTH) * 3;
        jujiPads[0].padBorder = 1 * padScaleX;

        if (buttonCnt == 1) {
            buttons[0].width = 160 * padScaleX;
            buttons[0].height = 160 * padScaleX;
            buttons[0].padBorder = 1 * padScaleX;
            buttons[0].padTextSize = 120 * screenSize / DEFALT_SCREEN_WIDTH;
        } else if (buttonCnt >= 2) {
            for (var i=0; i<buttons.length; i++) {
                if (i >= 4) break;
                var obj = buttons[i];
                if (obj) {
                    if (buttonCnt == 3 && i == 2) {
                        obj.width = 194 * padScaleX;
                    } else {
                        obj.width = 96 * padScaleX;
                    }
                    obj.height = 96 * padScaleX;
                    obj.padBorder = 1 * padScaleX;
                    obj.padTextSize = 72 * screenSize / DEFALT_SCREEN_WIDTH;
                }
            }
        }
    }

    for (var i=0; i<jujiPads.length; i++) {
        var obj = jujiPads[i];
        if (obj) obj.drawPanel();
    }
    for (var i=0; i<buttons.length; i++) {
        var obj = buttons[i];
        if (obj) {
            if (i<buttonCnt) {
                obj.show();
                obj.drawPanel();
            } else {
                obj.hide();
            }
        }
    }
}

\setXYPanel() {
    if (layout == 1) {
        // デフォルトのボタン配置
        setXYPanelLayout1();
    }
}

\setXYPanelLayout1() {
    jujiPads[0].x = 112*trunc(padScaleX*64)/64;
    jujiPads[0].y = $screenHeight-112*trunc(padScaleX*64)/64;
    if (buttonCnt == 1) {
        buttons[0].x = $screenWidth  -  84 * padScaleX;
        buttons[0].y = $screenHeight -  84 * padScaleX;
    } else if (buttonCnt == 2) {
        buttons[0].x = $screenWidth  -  52 * padScaleX;
        buttons[0].y = $screenHeight -  52 * padScaleX;
        buttons[1].x = $screenWidth  - 150 * padScaleX;
        buttons[1].y = $screenHeight -  52 * padScaleX;
    } else if (buttonCnt == 3) {
        buttons[0].x = $screenWidth  -  52 * padScaleX;
        buttons[0].y = $screenHeight -  52 * padScaleX;
        buttons[1].x = $screenWidth  - 150 * padScaleX;
        buttons[1].y = $screenHeight -  52 * padScaleX;
        buttons[2].x = $screenWidth  - 101 * padScaleX;
        buttons[2].y = $screenHeight - 150 * padScaleX;
    } else if (buttonCnt >= 4) {
        buttons[0].x = $screenWidth  -  52 * padScaleX;
        buttons[0].y = $screenHeight -  52 * padScaleX;
        buttons[1].x = $screenWidth  - 150 * padScaleX;
        buttons[1].y = $screenHeight -  52 * padScaleX;
        buttons[2].x = $screenWidth  -  52 * padScaleX;
        buttons[2].y = $screenHeight - 150 * padScaleX;
        buttons[3].x = $screenWidth  - 150 * padScaleX;
        buttons[3].y = $screenHeight - 150 * padScaleX;
    }
}

\padUpdate() {
    if (!active) return;
    activate();

    if (version == 1) {
        padUpdateV1();
    } else {
        padUpdateV2();
    }
}

\padUpdateV2() {
    padsUpdateV2();

    // 画面サイズ変更でパネル画像を再描画 //
    var screenSize = $screenWidth;
    if ($screenWidth > $screenHeight) screenSize = $screenHeight;
    padScaleX = screenSize / 465;
    if (padScaleX != oldPadScaleX/* || oldButtonCnt != buttonCnt*/) {
        if (autoMove) drawPanel();
        oldPadScaleX = padScaleX;
    }

    // 画面サイズ変更でパネル表示位置を変更 //
    if ($screenWidth != oldScreenWidth || $screenHeight != oldScreenHeight/* || oldButtonCnt != buttonCnt*/) {
        if (autoMove) setXYPanel();
        oldScreenWidth = $screenWidth;
        oldScreenHeight = $screenHeight;
        oldButtonCnt = buttonCnt;
    }
}

\padUpdateV1() {
    // 同じフレームでは一回のみ実行
    if (padUpdateFrame == $frameCount) return;
    padUpdateFrame = $frameCount;

    // 操作 //
    keyPushL = 0;
    keyPushR = 0;
    keyPushU = 0;
    keyPushD = 0;
    keyPush1 = 0;

    padKeyNotapCnt ++;
    for (var i=0; i<5; i++) { // タップ判定・マウス判定 //
        var t = $touches[i];
        if (t.touched) {
            if (isOnRectWH(t.x, t.y, jujiKey.x-32-APAD_DIAG_SIZE/2, jujiKey.y-32-64, 64+APAD_DIAG_SIZE, 64)) keyPushU = 1;
            if (isOnRectWH(t.x, t.y, jujiKey.x-32-APAD_DIAG_SIZE/2, jujiKey.y-32+64, 64+APAD_DIAG_SIZE, 64)) keyPushD = 1;
            if (isOnRectWH(t.x, t.y, jujiKey.x-32-64, jujiKey.y-32-APAD_DIAG_SIZE/2, 64, 64+APAD_DIAG_SIZE)) keyPushL = 1;
            if (isOnRectWH(t.x, t.y, jujiKey.x-32+64, jujiKey.y-32-APAD_DIAG_SIZE/2, 64, 64+APAD_DIAG_SIZE)) keyPushR = 1;
            if (isOnRectWH(t.x, t.y, no1Key.x-64, no1Key.y-64, 128, 128)) keyPush1 = 1;
            padKeySW = 1;
            padKeyNotapCnt = 0;
        }
    }

    // カウントアップ
    if (keyPushL) keyCntL ++; else keyCntL = 0;
    if (keyPushR) keyCntR ++; else keyCntR = 0;
    if (keyPushU) keyCntU ++; else keyCntU = 0;
    if (keyPushD) keyCntD ++; else keyCntD = 0;
    if (keyPush1) keyCnt1 ++; else keyCnt1 = 0;

    // 表示
    if (keyPushL) jujiKeyPushL.show(); else jujiKeyPushL.hide();
    if (keyPushR) jujiKeyPushR.show(); else jujiKeyPushR.hide();
    if (keyPushU) jujiKeyPushU.show(); else jujiKeyPushU.hide();
    if (keyPushD) jujiKeyPushD.show(); else jujiKeyPushD.hide();
    if (keyPush1) jujiKeyPush1.show(); else jujiKeyPush1.hide();
}

\padsUpdateV2() {
    // 同じフレームでは一回のみ実行
    if (padUpdateFrame == $frameCount) return;
    padUpdateFrame = $frameCount;

    // ボタンごとに処理 //
    for (var i=0; i<buttons.length; i++) {
        var obj = buttons[i];
        if (obj) obj.padUpdate();
    }
    for (var i=0; i<jujiPads.length; i++) {
        var obj = jujiPads[i];
        if (obj) obj.padUpdate();
    }
}

\getUp(i) {
    if (died) return 0;
    activate();
    padUpdate();
    var value = 0;
    if (version == 1) { // v1.0
        return keyCntU;
    } else { // v2.0
        if (i == null) i = 0;
        if (i >= 0 && i < jujiPads.length) value = jujiPads[i].padCntU;
    }
    return value;
}

\getDown(i)  {
    if (died) return 0;
    activate();
    padUpdate();
    var value = 0;
    if (jujiPads == null) { // v1.0
        return keyCntD;
    } else { // v2.0
        if (i == null) i = 0;
        if (i >= 0 && i < jujiPads.length) value = jujiPads[i].padCntD;
    }
    return value;
}

\getLeft(i) {
    if (died) return 0;
    activate();
    padUpdate();
    var value = 0;
    if (jujiPads == null) { // v1.0
        return keyCntL;
    } else { // v2.0
        if (i == null) i = 0;
        if (i >= 0 && i < jujiPads.length) value = jujiPads[i].padCntL;
    }
    return value;
}

\getRight(i) {
    if (died) return 0;
    activate();
    padUpdate();
    var value = 0;
    if (jujiPads == null) { // v1.0
        return keyCntR;
    } else { // v2.0
        if (i == null) i = 0;
        if (i >= 0 && i < jujiPads.length) value = jujiPads[i].padCntR;
    }
    return value;
}

\getButton(i) {
    if (died) return 0;
    activate();
    padUpdate();
    var value = 0;
    if (buttons == null) { // v1.0
        if (i == 0) value = keyCnt1;
    } else { // v2.0
        if (!i) i = 1;
        i--;
        if (i >= 0 && i < buttons.length) value = buttons[i].padCnt;
    }
    return value;
}

// JujiPads配列からPadButtonを取得する
\getJujiPadObj(i) {
    activate();
    if (jujiPads == null) return null;
    var obj = null;
    if (i == null) i = 0;
    if (i >= 0 && i < jujiPads.length) obj = jujiPads[i];
    return obj;
}

// JujiPads配列のlength
\getJujiPadObjLength(i) {
    activate();
    if (jujiPads == null) return null;
    return jujiPads.length;
}

// buttons配列からPadButtonを取得する
\getButtonObj(i) {
    activate();
    if (buttons == null) return null;
    var obj = null;
    if (i == null) i = 0;
    if (i >= 0 && i < buttons.length) obj = buttons[i];
    return obj;
}

// buttons配列のlength
\getButtonObjLength(i) {
    activate();
    if (buttons == null) return null;
    return buttons.length;
}

// Pad ver 1.0 用(後方互換)
\getPadUp() { return getUp(); }
\getPadDown() { return getDown(); }
\getPadLeft() { return getLeft(); }
\getPadRight() { return getRight(); }
\getPadButton() { return getButton(); }

// 範囲 //
\isOnRect(mx, my, rx, ry, rx2, ry2) {
    return (rx <= mx && mx < rx2 && ry <= my && my < ry2);
}

// 範囲 //
\isOnRectWH(mx, my, rx, ry, rw, rh) {
    return (rx <= mx && mx < rx+rw && ry <= my && my < ry+rh);
}

while (true) {
    padUpdate();
    update();
}
