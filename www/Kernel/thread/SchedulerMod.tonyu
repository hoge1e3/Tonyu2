extends null;
"field strict";
let _scheduler,_th,_updating,_updateExc;

native Tonyu;
native Key;
native console;
native Math;
native FS;
native Array;

\resolvedScheduler {
    if (!_scheduler) return _scheduler;
    while (_scheduler.newScheduler) {
        _scheduler=_scheduler.newScheduler;
    }
    return _scheduler;
}
\initSchedulerMod() {
    _scheduler=_scheduler||$Scheduler;
    _th=$Boot.schedule(this,"main",[]);
}

\update() {
    if (!_updating) {
        _updating=true;
        onUpdate();
        _updating=false;
    }   
    let sched=resolvedScheduler;
    if(_thread) {
        if (sched) sched.addToNext(_thread);
        _thread.suspend();
        __await null;
    } else {
        if (sched) sched.checkTimeout();
    }
}
\onUpdate() {

}
\updateEx(updateT){
    if (!_thread) { return update(); }
    if (updateT<0) updateT=0;
    for(_thread._updateExc=(_thread._updateExc||0)+updateT;
    _thread._updateExc>=1;
    _thread._updateExc--) {
        update();
    }
}
/*
nowait \currentThreadGroup() {//@deprecated
    return _scheduler; //$currentThreadGroup;
}*/
\wait(t) {
    if(_thread) {
        let sched=resolvedScheduler;
        _thread.suspend();
        if (t) {
            _thread.waitCount=t;
            if (sched) sched.addToNext(_thread);
        }
        __await null;
    } else if (_th) {
        if (t) {
            _th.waitCount=t;
        } else {
            if (_th.scheduled) _th.scheduled.unschedule(_th);
        }
    }
}
nowait \notify() {
    if (_th) {
        if (_th.scheduled) {
            _th.waitCount=0;
        } else {
            let sched=resolvedScheduler;
            if (sched) sched.addToCur(_th);
        }
    }
}
\timeStop() {
    return $Boot.timeStop(this);
}
