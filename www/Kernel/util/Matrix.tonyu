extends TObject;
includes MathMod,EventMod,FileMod;

\new(d) {
    data={}||d;
}
\fromArray(array) {//2-dim
    for (var i,row in array) {
        for (var j,val in row) {
            set(j,i,val);
        }
    }
}
\toArray() {
    var res=[];
    for (var i=0 ; i<=ymax; i++) {
        var row=[];
        res.push(row);
        for (var j=0 ; j<=xmax; j++) {
            row.push(get(j,i));
        }
    }
    return res;
}
\load(csvFile) {
    var f=file(csvFile);
    var x=0,y=0;
    var SEP=",";
    var lines=f.lines();//waitFor(f.lines());
    for (var l of lines) {
        row=l.split(SEP);
        x=0;
        for (cell of row) {
            set(x,y,cell);
            x++;
        }
        y++;
    }
}
\cross(col,row) {
    var colr=find(col);
    var rowr=find(row);
    return get(colr.x,rowr.y);
}
\search(cell,options) {
    for (var k,v in data) {
        if (v===cell) {
            return unkey(k);
        }
    }
}
\find() {
    var r=search.apply(this,arguments);
    if (r==null) {
        throw new Error(arguments[0]+" not found.");
    }
    return r;
}
\crop() {
    var a=new ArgParser(arguments);
    var o=a.parseOptions("left,top,right,bottom,width,height,keepXY");
    var r=new Matrix;
    if (o.width) o.right=o.left+o.width-1;
    if (o.height) o.bottom=o.top+o.height-1;
    if (o.right==null) o.right=xmax;
    if (o.bottom==null) o.bottom=ymax;
    for(var y=o.top;y<=o.bottom;y++) {
        for(var x=o.left;x<=o.right;x++){
            if (o.keepXY) {
                r.set(x,y,get(x,y));
            } else {
                r.set(x-o.left,y-o.top,get(x,y));
            }
        }
    }
    return r;
}
/*\mirror(pat) {
    var res=[];
    res.used=pat.used+rnd()*0.1;
    res.id=pat.id+"M";
    for (var line of pat){
        res.push(rev(line));
    }
    pats.push(res);
}*/
\rev(line) {
    var res=[];
    for (var e of line) {
        res.unshift(e);
    }
    return res;
}
\keysIterator() {
    return {
        tonyuIterator=tonyuIteratorKeys
    };
}
\rectIterator() {
    return {
        tonyuIterator=tonyuIteratorRect
    };
}
\tonyuIteratorKeys(arity) {
    var res={i:0,keys:[]};
    for (var k,v in data) {
        res.keys.push(k);
    }
    switch(arity) {
        case 3:
        res.next=\{
            if (res.i>=res.keys.length) return false;
            var key=res.keys[res.i];
            res.i++;
            var xy=unkey(key);
            res[0]=xy.x;
            res[1]=xy.y;
            res[2]=data[key];
            return true;
        };
        break;
        default:
        throw new Error("Matrix: in の前には3つの変数が必要です");
    }
    return res;
}
\tonyuIterator(arity) {
    if (iterateMode==="keys") return tonyuIteratorKeys(arity);
    return tonyuIteratorRect(arity);
}
\tonyuIteratorRect(arity) {
    var res={x:xmin,y:ymin,cnt:0};
    if (xmin==null||ymin==null||xmax==null||ymax==null) {
        res.next=\{return false;};
        return res;
    }
    switch(arity) {
        case 3:
        res.next=function () {
            //if (res.cnt++>1000) throw new Error("OVER! "+res.x+" "+res.y+" "+xmax+" "+ymax+" ");
            if (res.x>xmax) {
                res.x=xmin;
                res.y++;
            }
            if (res.y<=ymax) {
                res[0]=res.x;
                res[1]=res.y;
                res[2]=get(res.x,res.y);
                res.x++;
                return true;
            }
            return false;
        };
        break;
        default:
        throw new Error("Matrix: in の前には3つの変数が必要です");
    }
    return res;
}
\unkey(key) {
    var r=key.split(",");
    return {x:r[0]-0,y:r[1]-0};
}
\key(x,y,updateRange) {
    x=floor(x)||0;
    y=floor(y)||0;
    if (updateRange) {
        if (xmin==null || x<xmin) xmin=x;
        if (xmax==null || x>xmax) xmax=x;
        if (ymin==null || y<ymin) ymin=y;
        if (ymax==null || y>ymax) ymax=y;
    }
    return x+","+y;
}
\rows {
    return xmax-xmin+1;
}
\cols {
    return ymax-ymin+1;
}
\get(x,y) {
    var res=data[key(x,y)];
    if (res===undefined) {
        var e={
            set: \(v){
                e.value=v;
                set(x,y,v);
            },x,y,
        };
        sendEvent("newCell",e);
        return e.value;
    }
    return res;
}
\exists(x,y) {
    return data[key(x,y)]!==undefined;
}
\set(x,y,v) {
    var k;
    if (v===undefined) {
        k=key(x,y);
        if (data[k]===undefined) return v;
        fireEvent("change") {
            x,y,value:v
        };
        delete data[k];
    } else {
        k=key(x,y,true);
        if (data[k]===v) return v;
        fireEvent("change") {
            x,y,value:v
        };
        return data[k]=v;
    }
}
\neighbors(x,y,options) {
    //var x=src.x,y=src.y;
    // options: {dirs: 4 or 8, includeEmpty: bool }
    options=options||{dirs:neighborDirs};
    options.dirs=options.dirs||neighborDirs||4;
    var dirs=[
    [0,-1],[1,-1],[1,0], [1,1],
    [0,1], [-1,1],[-1,0],[-1,-1]];
    var res=[];
    for(var dir of dirs) {
        var i=dir[1],j=dir[0];
        if (i==0&&j==0) continue;
        if (options.dirs==4) {
            if (i*j!=0) continue;
        }
        var r;
        if (exists(x+j,y+i)) {
            r=get(x+j,y+i);
            res.push{x:x+j,y:y+i,ox:j,oy:i,value:r};
        } else if (options.includeEmpty) {
            res.push{x:x+j,y:y+i,ox:j,oy:i};
        }
    }
    return res;
}
\fill(left,top,cols,rows,data) {
    data=data||{};
    for (var i=top;i<top+rows;i++) {
        for (var j=left;j<left+cols;j++) {
            var d=data;
            if (typeof data==="object") {
                d=Object.create(data);
            } else if (typeof data==="function") {
                d=data(j,i);
            }
            set(j,i,d);
        }
    }
}
\pack() {
    var t;
    t=xmin;    xmin=xmax;    xmax=t;
    t=ymin;    ymin=ymax;    ymax=t;
    for (var k,v in data) {
        var xy=unkey(k);
        var x=xy.x, y=xy.y;
        if (x<xmin) {
            xmin=x;
        }
        if (y<ymin) {
            ymin=y;
        }
        if (x>xmax) {
            xmax=x;
        }
        if (y>ymax) {
            ymax=y;
        }
    }
}
